{"version":3,"sources":["typed-formik-form/components/formik-date-range-picker/dateRangePickerUtils.ts","typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker.tsx","typed-formik-form/components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo.tsx","typed-formik-form/components/helpers/label-with-info/LabelWithInfo.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/validation/validationUtils.ts","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/index.ts","typed-formik-form/components/helpers/skjemagruppe-question/SkjemagruppeQuestion.tsx","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/types/index.ts","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","typed-formik-form/utils/bemUtils.ts","dev/components/app-intl-provider/messages.ts","dev/examples/formik-example/ferieuttak-example/ferieuttakMessages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","typed-formik-form/validation/getCheckedValidator.ts","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","typed-formik-form/validation/getDateValidator.ts","typed-formik-form/validation/getDateRangeValidator.ts","typed-formik-form/validation/getFødselsnummerValidator.ts","typed-formik-form/validation/getListValidator.ts","typed-formik-form/validation/getNumberValidator.ts","typed-formik-form/validation/getOrgNumberValidator.ts","typed-formik-form/validation/getStringValidator.ts","typed-formik-form/validation/getYesOrNoValidator.ts","typed-formik-form/validation/getRequiredFieldValidator.ts","typed-formik-form/validation/getTimeValidator.ts","typed-formik-form/validation/types.ts","typed-formik-form/validation/intlFormErrorHandler.ts","dev/examples/formik-example/ferieuttak-example/types.ts","dev/components/tiles/Tiles.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakForm.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakListAndDialog.tsx","dev/examples/formik-example/types.ts","dev/examples/formik-example/typed-form-example/Siblings.tsx","dev/examples/validering-example/types.ts","dev/examples/formik-example/typed-form-example/TypedFormExample.tsx","dev/examples/formik-example/FormikExample.tsx","dev/components/validation-errors/ValidationErrorList.tsx","dev/examples/validering-example/ValideringPanel.tsx","dev/utils/dateUtils.ts","dev/examples/validering-example/ValideringExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/utils/focusUtils.ts","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/utils/numberInputUtils.ts","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-number-input/FormikNumberInput.tsx","typed-formik-form/components/formik-radio-group/FormikRadioGroup.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal/Modal.tsx"],"names":["dayjs","extend","isSameOrBefore","minMax","sortDateRange","d1","d2","from","sortDateRangeByToDate","to","findClosestDateAfterDate","fromDate","dates","dayjss","map","d","filter","m","isAfter","length","min","toDate","undefined","getClosestDateRangeBeforeDate","date","ranges","rangesBeforeDate","dateRange","isBefore","getRangesEndingBeforeDate","sort","reverse","getClosestDateRangeAfterDate","rangesAfterDate","getRangesStartingAfterDate","getFollowingDate","allowRangesToStartAndStopOnSameDate","subtract","getMaxDateForRangeStart","maxDate","otherRanges","dateRanges","follwingDateRange","followingRangeeDate","getMaxDateForRangeEnd","baseDate","followingDate","getPreceedingDate","add","getMinDateForRangeStart","minDate","preceedingDateRange","preceedingDate","max","findClosestDateBeforeDate","getMinDateForRangeEnd","findClosestDateBeforeOrEqualDate","FormikDateRangePicker","props","legend","fromInputProps","toInputProps","description","disableWeekend","disabledDateRanges","showYearSelector","fullScreenOnMobile","fullscreenOverlay","locale","values","useFormikContext","ISOStringToDate","name","fromDateLimitations","toDateLimitations","tag","className","FormikDatepicker","ModalFormAndList","items","listRenderer","formRenderer","labels","error","dialogWidth","maxItems","onChange","React","useState","isVisible","modalState","setModalState","resetModal","selectedItem","showListTitle","Modal","isOpen","contentLabel","modalTitle","onRequestClose","DialogFormWrapper","width","onSubmit","id","item","guid","onCancel","allItems","SkjemagruppeQuestion","listTitle","feil","onEdit","onDelete","i","emptyListText","style","paddingBottom","marginTop","htmlType","onClick","mini","addLabel","FormikModalFormAndList","sortFunc","onAfterChange","validate","context","useContext","TypedFormikFormContext","value","field","form","getAndRenderFieldErrorMessage","updatedValues","setFieldValue","onAfterFieldValueSet","ButtonRow","children","align","layout","cls","Children","knapp","index","createContext","TypedFormikForm","oldProps","currentProps","resetFormOnCancel","includeValidationSummary","submitButtonLabel","cancelButtonLabel","includeButtons","runDelayedFormValidation","cancelButtonType","formErrorHandler","onValidSubmit","noButtonsContentRenderer","cleanup","formik","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValid","isValidating","formSubmitCount","setFormSubmitCout","hasCleanedUp","counter","cleanupState","setCleanupState","ref","useRef","useEffect","current","showErrors","evt","stopPropagation","preventDefault","setValues","runCleanup","noValidate","autoComplete","Provider","isValidationErrorsVisible","fieldErrorHandler","fieldName","isHandledErrorTypeChecker","isHandledErrorTypeFunc","getErrorForField","errors","status","setTimeout","validateForm","createTypedFormikFormContext","FormikValidationErrorSummary","type","getFeilPropForFormikInput","elementName","fieldErrors","getIn","Array","isArray","getAllFieldsWithErrors","allErrors","errorObjectChecker","getFieldsWithErrors","keys","parentKey","createFieldKey","isObject","push","Object","forEach","key","err","idx","hasValue","getNumberFromStringInput","inputValue","isNaN","replace","numValue","Number","isoStringFormat","dateToISOString","format","dateString","getDateFromDateString","isISODateString","Date","datepickerUtils","getDateStringFromValue","parseDateLimitations","invalidDateRanges","weekendsNotSelectable","forwardRef","rest","isFieldsetTag","titleId","tabIndex","role","aria-labelledby","getLocaleToUse","label","inputTitle","placeholder","restProps","isWide","useMediaQuery","minWidth","elementId","position","inputName","intl","useIntl","isInvalid","htmlFor","inputId","inputProps","title","limitations","calendarSettings","YesOrNo","TypedFormikWrapper","initialValues","renderFormContent","renderForm","setSubmitting","setTouched","bemUtils","block","element","e","modifier","modifierConditional","condition","child","c","classNames","appMessages","invalidTime","ferieuttakMessages","nb","require","nn","allMessages","ferieMessages","AppIntlProvider","onError","messages","NAVLogo","ValidateCheckedError","viewBox","fill","fillRule","bem","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","ValidateDateError","getCheckedValidator","notChecked","isSameOrAfter","isoWeek","ValidateDateRangeError","getDateValidator","options","required","onlyWeekdays","dateHasNoValue","dateHasInvalidFormat","dateIsBeforeMin","dateIsAfterMax","isoWeekday","dateIsNotWeekday","ValidateFødselsnummerError","getFromDateValidator","dateError","fromDateIsAfterToDate","getToDateValidator","toDateIsBeforeFromDate","getDateRangeValidator","validateFromDate","validateToDate","ValidateListError","getFødselsnummerValidator","disallowedValues","fødselsnummerHasNoValue","result","fnrvalidator","fnr","reasons","includes","fødselsnummerIsNot11Chars","fødselsnummerIsInvalid","some","f","fødselsnummerIsNotAllowed","ValidateNumberError","getListValidator","minItems","numItems","listIsEmpty","listHasTooFewItems","listHasTooManyItems","ValidateOrgNumberError","getNumberValidator","numberValue","numberHasNoValue","numberHasInvalidFormat","numberIsTooSmall","numberIsTooLarge","ValidateStringError","isValidOrgNumber","test","charAt","strValue","checkNbr","mod","parseInt","getMod11","getOrgNumberValidator","orgNumberHasNoValue","isValidFormat","orgNumberHasInvalidFormat","ValidateYesOrNoError","getStringValidator","minLength","maxLength","stringHasNoValue","stringIsNotAString","stringIsTooShort","stringIsTooLong","ValidateRequiredFieldError","getYesOrNoValidator","YES","NO","DO_NOT_KNOW","yesOrNoIsUnanswered","ValidateTimeError","getRequiredFieldValidator","noValue","isIntlErrorObject","createFieldErrorIntlKey","errorPrefix","getFieldErrorHandler","formatMessage","keepKeyUnaltered","getIntlFormErrorHandler","Ferieland","getMinutes","hours","minutes","valueIsValidNumber","match","getTimeValidator","inputHours","inputMinutes","hoursAreInvalid","minutesAreInvalid","tooManyHours","hoursAreNegative","tooManyMinutes","minutesAreNegative","timeHasNoValue","durationIsTooLong","durationIsTooShort","FerieuttakFormFields","getTypedFormComponents","FerieuttakListAndDialog","FormFields","Form","TypedFormExample","FormikTimeInput","timeInputLayout","direction","compact","time","dag","ferieuttak","fom","tom","land","friends","letters","FormikExample","console","log","ValidationErrorList","info","example","ValideringPanel","code","activePanel","setActivePanel","marginBottom","tabs","_evt","language","docco","utc","isBetween","startOf","endOf","dateToday","liste","ValideringExample","tidsperiode_fra","tidsperiode_til","YesOrNoQuestion","jaNeiSpørsmål","Input","tekst","bredde","NumberInput","tall","DatePicker","dato","prettifyDate","DateRangePicker","dayPickerProps","initialMonth","fødselsnummer","orgnummer","CheckboxPanelGroup","checkboxes","RadioPanelGroup","radio","radios","CountrySelect","select","Checkbox","checked","TimeInput","Intro","href","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","withRouter","routeConfig","find","getRouteConfig","history","maxWidth","DevPage","App","setAppElement","ReactDOM","render","document","getElementById","handleTimeChange","getNumberFromNumberInputValue","isValidTime","maxHours","maxMinutes","justifyContent","placeholders","stateTime","setStateTime","hoursLabelId","minutesLabelId","inputMode","pattern","newTime","target","elementSelector","nodelistToArray","nodes","arr","unshift","tabEnabledSelectors","concat","allTabIndexEnabledSelectors","getFocusableElements","el","onlyTabReachable","querySelectorAll","join","onFocus","elements","focus","focusFirstElement","FormikInputGroup","feilProp","isRenderableErrorMsgType","aria-live","FormikInput","suffix","suffixStyle","harFeil","feilMessageId","aria-errormessage","aria-hidden","FormikRadioPanelGroup","useTwoColumns","rb","FormikCheckbox","afterOnChange","newValue","isCheckboxChecked","fieldValues","FormikCheckboxPanelGroup","cb","keyProp","FormikConfirmationCheckboxPanel","countries","getCountries","FormikDateIntervalPicker","fromDatepickerProps","toDatepickerProps","FormikNumberInput","integerValue","FormikRadioGroup","isSelected","FormikSelect","FormikTextarea","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","ConfirmationCheckbox","DateIntervalPicker","FileInput","FormikWrapper","InputGroup","RadioGroup","Select","Textarea","ValidationErrorLink","stopClickEvent","ValidationSummary","errorMessages","summaryEl","innerRef","tittel","customFeilRender","elementById","skjemaelementId","elementByName","getElementsByName","feilmelding","fieldsWithErrors","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fileSelectHandler","bind","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","files","this","onFilesSelect","dataTransfer","inputElement","which","click","multiple","acceptedExtensions","onDragOver","onDrop","accept","Component","FormikFileInput","arrayHelpers","filteredListEØSCountries","countryOptionValue","shouldFilter","createCountryOptions","onluEuAndEftaCountries","useAlpha3Code","lang","names","entries","getNames","a","b","localeCompare","alpha2ToAlpha3","countryOptionsCache","getCountryOptions","updateCache","showOnlyEuAndEftaCountries","FormikCountrySelect","shouldCloseOnOverlayClick"],"mappings":"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","file":"static/js/main.16a9bf45.chunk.js","sourcesContent":["import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport minMax from 'dayjs/plugin/minMax';\nimport { DateRange } from '../../types';\nimport { DatepickerLimitiations } from '../formik-datepicker/FormikDatepicker';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(minMax);\n\nconst sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nconst sortDateRangeByToDate = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.to).isSameOrBefore(d2.to)) {\n        return -1;\n    }\n    return 1;\n};\nexport const getRangesStartingAfterDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.from).isAfter(date, 'day'));\n};\n\nexport const getRangesEndingBeforeDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.to).isBefore(date, 'day'));\n};\n\nexport const findClosestDateAfterDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isAfter(fromDate, 'day'));\n    return dayjss.length > 0 ? dayjs.min(dayjss).toDate() : undefined;\n};\n\nexport const findClosestDateBeforeDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const findClosestDateBeforeOrEqualDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isSameOrBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const getClosestDateRangeBeforeDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesBeforeDate = getRangesEndingBeforeDate(date, ranges).sort(sortDateRangeByToDate).reverse();\n    return rangesBeforeDate.length === 0 ? undefined : rangesBeforeDate[0];\n};\n\nexport const getClosestDateRangeAfterDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesAfterDate = getRangesStartingAfterDate(date, ranges).sort(sortDateRange);\n    return rangesAfterDate.length === 0 ? undefined : rangesAfterDate[0];\n};\n\nconst getFollowingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.from : dayjs(dateRange.from).subtract(1, 'day').toDate();\n};\n\nexport const getMaxDateForRangeStart = ({\n    fromDate,\n    toDate,\n    maxDate,\n    otherRanges: dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    otherRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!fromDate) {\n        return toDate || maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(fromDate, dateRanges);\n    const followingRangeeDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(toDate ? [toDate] : []),\n        ...(maxDate ? [maxDate] : []),\n        ...(followingRangeeDate ? [followingRangeeDate] : []),\n    ];\n    return findClosestDateAfterDate(fromDate, dates);\n};\nexport const getMaxDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    maxDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(baseDate, dateRanges);\n    const followingDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(maxDate ? [maxDate] : []), ...(followingDate ? [followingDate] : [])];\n    return findClosestDateAfterDate(baseDate, dates) || maxDate;\n};\n\nconst getPreceedingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.to : dayjs(dateRange.to).add(1, 'day').toDate();\n};\n\nexport const getMinDateForRangeStart = ({\n    toDate,\n    minDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!toDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(toDate, dateRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(minDate ? [minDate] : []), ...(preceedingDate ? [preceedingDate] : [])];\n\n    return findClosestDateBeforeDate(toDate, dates);\n};\n\nexport const getMinDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    minDate,\n    dateRanges: otherRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(baseDate, otherRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(fromDate ? [fromDate] : []),\n        ...(minDate ? [minDate] : []),\n        ...(preceedingDate ? [preceedingDate] : []),\n    ];\n    return findClosestDateBeforeOrEqualDate(baseDate, dates);\n};\n\ninterface DateRangePickerLimitations {\n    fromDateLimitations: DatepickerLimitiations;\n    toDateLimitations: DatepickerLimitiations;\n}\n\nexport const getDateRangePickerLimitations = (props: {\n    /** Selected from date */\n    fromDate?: Date;\n    /** Selected to date */\n    toDate?: Date;\n    /** Min allowed date */\n    minDate?: Date;\n    /** Max allowed date */\n    maxDate?: Date;\n    /** Other date ranges which become disabled in the datepicker */\n    dateRanges?: DateRange[];\n    /** Disallow selection of saturday and sunday */\n    disableWeekend?: boolean;\n    /** Allow one dateRange to start on the same date another ends */\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): DateRangePickerLimitations => {\n    return {\n        fromDateLimitations: {\n            minDate: getMinDateForRangeStart(props),\n            maxDate: getMaxDateForRangeStart(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n        toDateLimitations: {\n            minDate: getMinDateForRangeEnd(props),\n            maxDate: getMaxDateForRangeEnd(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n    };\n};\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { ISOStringToDate } from '../formik-datepicker/datepickerUtils';\nimport FormikDatepicker, {\n    DatePickerBaseProps,\n    DatepickerLimitiations,\n    DatePickerPresentationProps,\n} from '../formik-datepicker/FormikDatepicker';\nimport { getDateRangePickerLimitations } from './dateRangePickerUtils';\nimport './dateRangePicker.less';\n\ninterface OwnProps<FieldName, ErrorType> {\n    legend?: string;\n    description?: React.ReactNode;\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    locale?: string;\n    allowRangesToStartAndStopOnSameDate?: boolean;\n    fromInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n    toInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n}\n\nexport type FormikDateRangePickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nfunction FormikDateRangePicker<FieldName, ErrorType>({\n    legend,\n    fromInputProps,\n    toInputProps,\n    description,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    showYearSelector,\n    fullScreenOnMobile,\n    fullscreenOverlay,\n    allowRangesToStartAndStopOnSameDate,\n    locale,\n}: FormikDateRangePickerProps<FieldName, ErrorType>) {\n    const { values } = useFormikContext<any>();\n    const fromDate = ISOStringToDate(values[fromInputProps.name]);\n    const toDate = ISOStringToDate(values[toInputProps.name]);\n    const { fromDateLimitations, toDateLimitations } = getDateRangePickerLimitations({\n        fromDate,\n        toDate,\n        minDate,\n        maxDate,\n        dateRanges: disabledDateRanges,\n        disableWeekend,\n        allowRangesToStartAndStopOnSameDate,\n    });\n    return (\n        <SkjemaGruppe\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateRangePicker\">\n            <div className=\"dateRangePicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...fromInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...fromDateLimitations}\n                    {...locale}\n                />\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...toInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...toDateLimitations}\n                    {...locale}\n                />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateRangePicker;\n","import React from 'react';\nimport Alertstripe from 'nav-frontend-alertstriper';\nimport './unansweredQuestionsInfo.less';\n\nconst UnansweredQuestionsInfo: React.FunctionComponent = ({ children }) => (\n    <div className=\"unansweredQuestionsInfo\">\n        <Alertstripe type=\"info\" form=\"inline\">\n            {children}\n        </Alertstripe>\n    </div>\n);\n\nexport default UnansweredQuestionsInfo;\n","import React from 'react';\nimport Hjelpetekst from 'nav-frontend-hjelpetekst';\nimport { PopoverOrientering } from 'nav-frontend-popover';\nimport { Element } from 'nav-frontend-typografi';\nimport './labelWithInfo.less';\n\ninterface LabelWithHelperText {\n    info?: React.ReactNode;\n    infoPlassering?: PopoverOrientering;\n}\n\nconst LabelWithInfo: React.FunctionComponent<LabelWithHelperText> = ({\n    children,\n    info,\n    infoPlassering = PopoverOrientering.Over,\n}) => {\n    if (!children) {\n        return null;\n    }\n    if (info === undefined) {\n        return <Element tag=\"span\">{children}</Element>;\n    }\n\n    const partialPopoverProps: any = {\n        orientering: infoPlassering,\n    };\n    return (\n        <Element tag=\"span\" className=\"labelWithInfo\">\n            {children}\n            {info && (\n                <Hjelpetekst popoverProps={partialPopoverProps} className=\"labelWithInfo__info\">\n                    {info}\n                </Hjelpetekst>\n            )}\n        </Element>\n    );\n};\n\nexport default LabelWithInfo;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport DialogFormWrapper, { DialogFormWrapperWidths } from '../dialog-form-wrapper/DialogFormWrapper';\nimport Modal from '../modal/Modal';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    allItems?: ItemType[];\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    maxItems?: number;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    maxItems,\n    onChange,\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false,\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    const showListTitle = items.length > 0;\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({\n                        onSubmit: handleOnSubmit,\n                        onCancel: resetModal,\n                        item: modalState.selectedItem,\n                        allItems: items,\n                    })}\n                </DialogFormWrapper>\n            </Modal>\n            <SkjemagruppeQuestion legend={showListTitle ? labels.listTitle : undefined} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                {(maxItems === undefined || maxItems > items.length) && (\n                    <div\n                        style={showListTitle ? { marginTop: '1rem' } : undefined}\n                        className={'modalFormAndList__addButton'}>\n                        <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })} mini={true}>\n                            {labels.addLabel}\n                        </Knapp>\n                    </div>\n                )}\n            </SkjemagruppeQuestion>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType, ErrorType>\n    extends ModalFormAndListProps<ItemType>,\n        TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType, ErrorType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    maxItems,\n    validate,\n}: FormikModalFormAndListProps<FieldName, ItemType, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate ? (value) => validate(value, name) : undefined}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        maxItems={maxItems}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","import React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.FunctionComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport {\n    CancelButtonTypes,\n    CustomFormErrorHandler,\n    ErrorTypeChecker,\n    FieldErrorHandler,\n    NavFrontendSkjemaFeil,\n} from '../../types';\nimport { getErrorForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\n\nexport interface TypedFormikFormProps<FormValues, ErrorType> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    id?: string;\n    cancelButtonType?: CancelButtonTypes;\n    runDelayedFormValidation?: boolean;\n    formErrorHandler?: CustomFormErrorHandler<ErrorType>;\n    noButtonsContentRenderer?: () => React.ReactNode;\n    cleanup?: (values: FormValues) => FormValues;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n}\n\nexport type TypedFormikFormContextType = {\n    showErrors: boolean;\n    fieldErrorHandler?: FieldErrorHandler<any>;\n    isHandledErrorTypeChecker?: ErrorTypeChecker<any>;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    onAfterFieldValueSet: () => void;\n};\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\n\nconst userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues, ErrorType>({\n    children,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    id,\n    includeButtons = true,\n    runDelayedFormValidation,\n    cancelButtonType,\n    formErrorHandler,\n    onCancel,\n    onValidSubmit,\n    noButtonsContentRenderer,\n    cleanup,\n}: TypedFormikFormProps<FormValues, ErrorType>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount, setFormSubmitCout] = useState(submitCount);\n    const [cleanupState, setCleanupState] = useState({ hasCleanedUp: false, counter: 0 });\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid,\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                if (isValid) {\n                    setFormSubmitCout(submitCount);\n                }\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    useEffect(() => {\n        cleanupState.hasCleanedUp && handleSubmit();\n    }, [cleanupState, handleSubmit]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const runCleanup = (evt: React.FormEvent<HTMLFormElement>) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        formik.setValues(cleanup ? cleanup(formik.values) : formik.values);\n        setCleanupState({ hasCleanedUp: true, counter: cleanupState.counter + 1 });\n    };\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        setCleanupState({ ...cleanupState, hasCleanedUp: false });\n        if (cleanup !== undefined) {\n            runCleanup(evt);\n        } else {\n            handleSubmit(evt);\n        }\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            showErrors,\n            fieldErrorHandler: (error, fieldName) => {\n                return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, fieldName) : error;\n            },\n            isHandledErrorTypeChecker: formErrorHandler?.isHandledErrorTypeFunc,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const error = getErrorForField(field.name, form.errors);\n                    if (error) {\n                        return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, field.name) : error;\n                    }\n                }\n                return undefined;\n            },\n            onAfterFieldValueSet: () => {\n                if (runDelayedFormValidation && formik.status && formik.status.showErrors) {\n                    setTimeout(() => {\n                        formik.validateForm();\n                    });\n                }\n            },\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className} id={id} autoComplete=\"off\">\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && isValidationErrorsVisible(formik) && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type={cancelButtonType || 'flat'}\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n                {includeButtons === false && noButtonsContentRenderer && (\n                    <div style={{ marginTop: '2rem' }}>{noButtonsContentRenderer()}</div>\n                )}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import { FieldInputProps, FormikErrors, FormikProps, getIn, isObject } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { ErrorTypeChecker, NavFrontendSkjemaFeil } from '../types';\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context,\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): any | undefined => {\n    const fieldErrors: Array<string> | string = getIn(errors, elementName);\n    if (fieldErrors === null) {\n        return undefined;\n    }\n    if (Array.isArray(fieldErrors)) {\n        if (fieldErrors.length === 1 && fieldErrors[0] === null) {\n            /** Filter out fieldArray errors containing only null item */\n            return undefined;\n        }\n        if (fieldErrors.length >= 1) {\n            return fieldErrors[0];\n        }\n    } else {\n        return fieldErrors;\n    }\n};\n\nexport const isValidationErrorsVisible = (formik: FormikProps<any>): boolean => {\n    return formik?.status?.showErrors === true;\n};\n\nexport const getAllFieldsWithErrors = (allErrors: any, errorObjectChecker?: ErrorTypeChecker): string[] => {\n    const getFieldsWithErrors = (errors: any, keys: string[] = [], parentKey?: string): string[] => {\n        const createFieldKey = (fieldName: string): string => {\n            return parentKey ? `${parentKey}.${fieldName}` : fieldName;\n        };\n        if (errors) {\n            if (parentKey && isObject(errors) && errorObjectChecker && errorObjectChecker(errors)) {\n                keys.push(parentKey);\n                return keys;\n            }\n            Object.keys(errors).forEach((key) => {\n                const error = errors[key];\n                if (Array.isArray(error)) {\n                    error.forEach((err, idx) => {\n                        getFieldsWithErrors(err, keys, createFieldKey(`${key}.${idx}`));\n                    });\n                } else {\n                    if (isObject(error)) {\n                        if (errorObjectChecker && errorObjectChecker(error)) {\n                            keys.push(createFieldKey(key));\n                            return;\n                        }\n                        return getFieldsWithErrors(error, keys, createFieldKey(`${key}`));\n                    }\n                    keys.push(createFieldKey(key));\n                }\n            });\n        }\n        return keys;\n    };\n    return getFieldsWithErrors(allErrors, []);\n};\n","import { ValidationError, ValidationResult } from './types';\n\nexport const hasValue = (value: any): boolean => value !== '' && value !== undefined && value !== null;\n\nexport const validateAll = <ErrorType = ValidationError>(\n    validations: Array<() => ValidationResult<ErrorType>>\n): ErrorType | undefined => {\n    let result: ValidationResult<ErrorType>;\n    validations.some((validateFunc) => {\n        const validationResult = validateFunc();\n        if (validationResult) {\n            result = validationResult;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\n\nexport const getNumberFromStringInput = (inputValue: string | undefined): number | undefined => {\n    if (inputValue === undefined || inputValue === '' || Array.isArray(inputValue)) {\n        return undefined;\n    }\n    if (typeof inputValue === 'number' && isNaN(inputValue)) {\n        return undefined;\n    }\n    const value = `${inputValue}`.replace(/\\,/g, '.');\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n        return undefined;\n    }\n    return numValue;\n};\n","import dayjs from 'dayjs';\nimport { DatepickerLimitations, DatepickerDateRange, isISODateString } from 'nav-datovelger';\nimport { DatepickerLimitiations } from './FormikDatepicker';\n\nconst isoStringFormat = 'YYYY-MM-DD';\n\nexport const dateToISOString = (date?: Date) => (date ? dayjs(date).format(isoStringFormat) : '');\nexport const ISOStringToDate = (dateString = ''): Date | undefined => getDateFromDateString(dateString);\n\nconst parseDateLimitations = ({\n    minDate,\n    maxDate,\n    disabledDateRanges = [],\n    disableWeekend,\n}: DatepickerLimitiations): DatepickerLimitations => {\n    const invalidDateRanges: DatepickerDateRange[] = disabledDateRanges.map((d) => ({\n        from: dateToISOString(d.from),\n        to: dateToISOString(d.to),\n    }));\n    return {\n        minDate: minDate ? dateToISOString(minDate) : undefined,\n        maxDate: maxDate ? dateToISOString(maxDate) : undefined,\n        weekendsNotSelectable: disableWeekend,\n        invalidDateRanges,\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (isISODateString(value) === false) {\n            return value;\n        }\n        if (dayjs(value, isoStringFormat, true).isValid()) {\n            date = dayjs(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string | undefined): Date | undefined => {\n    if (dateString === undefined) {\n        return undefined;\n    }\n    if (isISODateString(dateString)) {\n        return new Date(dateString);\n    }\n    return undefined;\n};\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations,\n};\n\nexport default datepickerUtils;\n","export { default as FormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCheckboxPanelGroup } from './components/formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nexport { default as FormikConfirmationCheckboxPanel } from './components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nexport { default as FormikCountrySelect } from './components/formik-country-select/FormikCountrySelect';\nexport { default as FormikDateIntervalPicker } from './components/formik-date-interval-picker/FormikDateIntervalPicker';\nexport { default as FormikDatepicker } from './components/formik-datepicker/FormikDatepicker';\nexport { default as FormikFileInput } from './components/formik-file-input/FormikFileInput';\nexport { default as FormikInput } from './components/formik-input/FormikInput';\nexport { default as FormikNumberInput } from './components/formik-number-input/FormikNumberInput';\nexport { default as FormikInputGroup } from './components/formik-input-group/FormikInputGroup';\nexport { default as FormikModalFormAndList } from './components/formik-modal-form-and-list/FormikModalFormAndList';\nexport { default as FormikModalFormAndInfo } from './components/formik-modal-form-and-list/FormikModalFormAndInfo';\nexport { default as FormikRadioPanelGroup } from './components/formik-radio-panel-group/FormikRadioPanelGroup';\nexport { default as FormikRadioGroup } from './components/formik-radio-group/FormikRadioGroup';\nexport { default as FormikSelect } from './components/formik-select/FormikSelect';\nexport { default as FormikTextarea } from './components/formik-textarea/FormikTextarea';\nexport { default as FormikTimeInput } from './components/formik-time-input/FormikTimeInput';\nexport { default as FormikValidationErrorSummary } from './components/formik-validation-error-summary/FormikValidationErrorSummary';\nexport { default as FormikYesOrNoQuestion } from './components/formik-yes-or-no-question/FormikYesOrNoQuestion';\n\nexport { default as TypedFormikForm, TypedFormikFormContext } from './components/typed-formik-form/TypedFormikForm';\nexport { default as TypedFormikWrapper } from './components/typed-formik-wrapper/TypedFormikWrapper';\n\nexport { default as UnansweredQuestionsInfo } from './components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo';\nexport { default as LabelWithInfo } from './components/helpers/label-with-info/LabelWithInfo';\nexport { default as SkjemagruppeQuestion } from './components/helpers/skjemagruppe-question/SkjemagruppeQuestion';\n\nexport * from './types';\nexport * from './utils/countryUtils';\nexport * from './utils/formikUtils';\nexport * from './utils/typedFormErrorUtils';\nexport * from './components/getTypedFormComponents';\nexport { ISOStringToDate, dateToISOString } from './components/formik-datepicker/datepickerUtils';\nexport * from './components/formik-modal-form-and-list/types';\nexport { getNumberFromNumberInputValue } from './utils/numberInputUtils';\n","import React, { forwardRef } from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { guid } from 'nav-frontend-js-utils';\n\nconst SkjemagruppeQuestion = forwardRef(function SkjemagruppeQuestion(props: SkjemaGruppeProps, ref: React.Ref<any>) {\n    const { legend, feil, tag, children, className, id, ...rest } = props;\n\n    const isFieldsetTag = tag === undefined || tag === 'fieldset';\n    const titleId = `${id || guid()}__title`;\n\n    return (\n        <SkjemaGruppe\n            ref={ref}\n            tabIndex={id ? -1 : undefined}\n            id={id}\n            className={`${className ? className : ''} singleInputWrapper`}\n            tag={tag ? tag : legend ? 'fieldset' : 'div'}\n            feil={feil}\n            role={isFieldsetTag ? undefined : 'group'}\n            aria-labelledby={isFieldsetTag && legend ? undefined : titleId}\n            legend={isFieldsetTag ? legend ? <Element tag=\"div\">{legend}</Element> : undefined : undefined}\n            {...rest}>\n            {isFieldsetTag === false && legend && (\n                <div className=\"skjemaelement__label divLegend\" id={titleId}>\n                    {legend}\n                </div>\n            )}\n            {children}\n        </SkjemaGruppe>\n    );\n});\n\nexport default SkjemagruppeQuestion;\n","import React from 'react';\nimport { DayPickerProps } from 'react-day-picker';\nimport { useIntl } from 'react-intl';\nimport { Field, FieldProps } from 'formik';\nimport { CalendarPlacement, Datepicker, DatepickerChange } from 'nav-datovelger';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { useMediaQuery } from 'react-responsive';\nimport { DateRange, NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport './datepicker.less';\n\nexport interface DatepickerLimitiations {\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDateRanges?: DateRange[];\n    disableWeekend?: boolean;\n}\n\nexport interface DatePickerBaseProps<FieldName, ErrorType> extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    label: string;\n    disabled?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    inputTitle?: string;\n    placeholder?: string;\n    dayPickerProps?: DayPickerProps;\n    invalidFormatError?: string;\n    locale?: 'nb' | 'nn' | 'en';\n    onChange?: (date: string) => void;\n}\nexport interface DatePickerPresentationProps {\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n}\ninterface OwnProps<FieldName, ErrorType> extends DatePickerBaseProps<FieldName, ErrorType> {\n    id?: string;\n    description?: React.ReactNode;\n}\n\nexport type FormikDatepickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nconst getLocaleToUse = (locale: string): 'nb' | 'nn' | 'en' | undefined => {\n    switch (locale) {\n        case 'nb':\n            return 'nb';\n        case 'nn':\n            return 'nn';\n        case 'en':\n            return 'en';\n        default:\n            return undefined;\n    }\n};\n\nfunction FormikDatepicker<FieldName, ErrorType>({\n    validate,\n    label,\n    name,\n    id,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    inputTitle,\n    onChange,\n    description,\n    placeholder,\n    locale,\n    ...restProps\n}: FormikDatepickerProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMediaQuery({ minWidth: 736 });\n    const elementId = id || guid();\n    const position: CalendarPlacement | undefined =\n        fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullscreen' : undefined;\n    const inputName = (name || '') as string;\n    const intl = useIntl();\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps<string>) => {\n                const isInvalid = (feil || getFeilPropForFormikInput({ field, form, context, feil })) !== undefined;\n                const handleOnDatepickerChange: DatepickerChange = (dateString) => {\n                    if (field.value !== dateString) {\n                        form.setFieldValue(field.name, dateString);\n                        if (onChange) {\n                            onChange(dateString);\n                        }\n                        if (context) {\n                            context.onAfterFieldValueSet();\n                        }\n                    }\n                };\n\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={elementId}>{label}</Label>\n                        {description && <div className={'skjemaelement__description'}>{description}</div>}\n                        <Datepicker\n                            inputId={elementId}\n                            locale={getLocaleToUse(locale || intl.locale)}\n                            {...restProps}\n                            inputProps={{ name: inputName, placeholder, 'aria-invalid': isInvalid, title: inputTitle }}\n                            value={field.value}\n                            limitations={datepickerUtils.parseDateLimitations({\n                                minDate,\n                                maxDate,\n                                disableWeekend,\n                                disabledDateRanges,\n                            })}\n                            showYearSelector={showYearSelector}\n                            calendarSettings={{\n                                position,\n                            }}\n                            onChange={handleOnDatepickerChange}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow',\n}\n\nexport interface Time {\n    hours: string;\n    minutes: string;\n}\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport type CancelButtonTypes = 'standard' | 'hoved' | 'fare' | 'flat';\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputValidationProps<FieldName, ErrorType> {\n    validate?: (value: any, fieldName: FieldName) => ErrorType | undefined;\n}\n\nexport interface CustomFormErrorHandler<ErrorType> {\n    fieldErrorHandler: FieldErrorHandler<ErrorType>;\n    isHandledErrorTypeFunc?: ErrorTypeChecker<ErrorType>;\n}\n\nexport type FieldErrorHandler<ErrorType> = (error: ErrorType, fieldName: string) => string;\nexport type ErrorTypeChecker<ErrorType = any> = (error: ErrorType) => boolean;\n","import React from 'react';\nimport { Formik, FormikProps, FormikConfig } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\ntype Props<FormValues> = TypedFormikWrapperProps<FormValues> & FormikConfig<Partial<FormValues>>;\n\nfunction TypedFormikWrapper<FormValues>(props: Props<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","export const appMessages = {\n    nb: {\n        invalidTime: 'Timer og minutter er ikke gyldig for {dag}',\n        'letters.listIsEmpty': 'Whooa {value}',\n        'hasKids.yesOrNoIsUnanswered': 'You have not answered {question}',\n        'fødselsnummer.disallowedFødselsnummer': 'Du kan ikke bruke dette fødselsnummeret',\n        'fødselsnummer.disallowedFødselsnummerCustom': 'Du kan ikke bruke dette fødselsnummeret {info}',\n        'søskennavn.mangler': 'Ett av søskenene til {navn} mangler navn',\n    },\n    nn: {},\n};\n","const ferieuttakMessages = {\n    nb: require('./ferieuttak.nb.json'),\n    nn: require('./ferieuttak.nn.json'),\n};\n\nexport default ferieuttakMessages;\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { appMessages } from './messages';\nimport ferieMessages from '../../examples/formik-example/ferieuttak-example/ferieuttakMessages';\nimport { MessageFileFormat } from '../../utils/devIntlUtils';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst allMessages: MessageFileFormat = {\n    nb: {\n        ...appMessages.nb,\n        ...ferieMessages.nb,\n    },\n    nn: {\n        ...appMessages.nn,\n        ...ferieMessages.nn,\n    },\n};\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? allMessages.nb : allMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\ntype CheckedValidationResult = ValidateCheckedError | undefined;\n\nconst getCheckedValidator = (): ValidationFunction<CheckedValidationResult> => (value: any) => {\n    if (value !== true) {\n        return ValidateCheckedError.notChecked;\n    }\n    return undefined;\n};\n\nexport default getCheckedValidator;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React from 'react';\nimport bemHelper from '../../utils/bemUtils';\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined,\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isoWeek);\n\nexport enum ValidateDateError {\n    dateHasNoValue = 'dateHasNoValue',\n    dateHasInvalidFormat = 'dateHasInvalidFormat',\n    dateIsBeforeMin = 'dateIsBeforeMin',\n    dateIsAfterMax = 'dateIsAfterMax',\n    dateIsNotWeekday = 'dateIsNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateDateError.dateHasNoValue\n    | ValidateDateError.dateHasInvalidFormat\n    | ValidateDateError.dateIsBeforeMin\n    | ValidateDateError.dateIsAfterMax\n    | ValidateDateError.dateIsNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst getDateValidator =\n    (options: DateValidationOptions = {}): ValidationFunction<DateValidationResult> =>\n    (value: any) => {\n        const { required, min, max, onlyWeekdays } = options;\n        const date = datepickerUtils.getDateFromDateString(value);\n        if (required && hasValue(value) === false) {\n            return ValidateDateError.dateHasNoValue;\n        }\n        if (hasValue(value)) {\n            if (date === undefined) {\n                return ValidateDateError.dateHasInvalidFormat;\n            }\n            if (min && dayjs(date).isBefore(min, 'day')) {\n                return ValidateDateError.dateIsBeforeMin;\n            }\n            if (max && dayjs(date).isAfter(max, 'day')) {\n                return ValidateDateError.dateIsAfterMax;\n            }\n            if (onlyWeekdays && dayjs(date).isoWeekday() > 5) {\n                return ValidateDateError.dateIsNotWeekday;\n            }\n        }\n        return undefined;\n    };\n\nexport default getDateValidator;\n","import dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport getDateValidator, { DateValidationOptions, DateValidationResult } from './getDateValidator';\nimport { ValidationFunction } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface Options extends DateValidationOptions {\n    fromDate?: Date;\n    toDate?: Date;\n}\n\nconst getFromDateValidator =\n    (options: Options): ValidationFunction<DateRangeValidationResult> =>\n    (value: any) => {\n        const dateError = getDateValidator(options)(value);\n        if (dateError) {\n            return dateError;\n        }\n        const { toDate } = options;\n        const date = datepickerUtils.getDateFromDateString(value);\n        if (!date || !toDate) {\n            return undefined;\n        }\n\n        if (dayjs(date).isAfter(toDate, 'day')) {\n            return ValidateDateRangeError.fromDateIsAfterToDate;\n        }\n        return undefined;\n    };\n\nconst getToDateValidator =\n    (options: Options): ValidationFunction<DateRangeValidationResult> =>\n    (value: any) => {\n        const dateError = getDateValidator(options)(value);\n        if (dateError) {\n            return dateError;\n        }\n        const { fromDate } = options;\n        const date = datepickerUtils.getDateFromDateString(value);\n        if (!date || !fromDate) {\n            return undefined;\n        }\n        if (dayjs(date).isBefore(fromDate, 'day')) {\n            return ValidateDateRangeError.toDateIsBeforeFromDate;\n        }\n        return undefined;\n    };\n\nconst getDateRangeValidator = (options: Options) => ({\n    validateFromDate: getFromDateValidator(options),\n    validateToDate: getToDateValidator(options),\n});\n\nexport default getDateRangeValidator;\n","import fnrvalidator from '@navikt/fnrvalidator';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateFødselsnummerError {\n    fødselsnummerHasNoValue = 'fødselsnummerHasNoValue',\n    fødselsnummerIsNot11Chars = 'fødselsnummerIsNot11Chars',\n    fødselsnummerIsInvalid = 'fødselsnummerIsInvalid',\n    fødselsnummerIsNotAllowed = 'fødselsnummerIsNotAllowed',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateFødselsnummerError.fødselsnummerHasNoValue\n    | ValidateFødselsnummerError.fødselsnummerIsNotAllowed\n    | ValidateFødselsnummerError.fødselsnummerIsNot11Chars\n    | ValidateFødselsnummerError.fødselsnummerIsInvalid\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    disallowedValues?: string[];\n}\n\nconst getFødselsnummerValidator =\n    (options: Options = {}): ValidationFunction<FødselsnummerValidationResult> =>\n    (value: any) => {\n        const { required, disallowedValues } = options;\n        if (hasValue(value) === false && required === false) {\n            return undefined;\n        }\n        if (required && hasValue(value) === false) {\n            return ValidateFødselsnummerError.fødselsnummerHasNoValue;\n        }\n        if (hasValue(value)) {\n            const result = fnrvalidator.fnr(value);\n            if (result.status === 'invalid') {\n                /** Errors from @navikt/fnrvalidator */\n                const LENGTH_ERROR = 'fnr or dnr must consist of 11 digits';\n                const { reasons } = result;\n                if (reasons.includes(LENGTH_ERROR)) {\n                    return ValidateFødselsnummerError.fødselsnummerIsNot11Chars;\n                }\n                return ValidateFødselsnummerError.fødselsnummerIsInvalid;\n            }\n            if (disallowedValues) {\n                const equalsDisallowedValue = disallowedValues.some((f) => f === value);\n                if (equalsDisallowedValue) {\n                    return ValidateFødselsnummerError.fødselsnummerIsNotAllowed;\n                }\n            }\n        }\n        return undefined;\n    };\n\nexport default getFødselsnummerValidator;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ntype ListValidationResult = undefined | ValidateListError;\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst getListValidator =\n    (options: Options): ValidationFunction<ListValidationResult> =>\n    (value: any) => {\n        const { required = false, minItems = undefined, maxItems = undefined } = options;\n        if (Array.isArray(value)) {\n            const numItems = value.length;\n            if (required && numItems === 0) {\n                return ValidateListError.listIsEmpty;\n            }\n            if (minItems !== undefined && minItems > numItems) {\n                return ValidateListError.listHasTooFewItems;\n            }\n            if (maxItems !== undefined && maxItems < numItems) {\n                return ValidateListError.listHasTooManyItems;\n            }\n        }\n        if (required && !Array.isArray(value)) {\n            return ValidateListError.listIsEmpty;\n        }\n    };\n\nexport default getListValidator;\n","import { ValidationFunction } from './types';\nimport { getNumberFromStringInput, hasValue } from './validationUtils';\n\nexport enum ValidateNumberError {\n    numberHasNoValue = 'numberHasNoValue',\n    numberHasInvalidFormat = 'numberHasInvalidFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateNumberError.numberHasNoValue\n    | ValidateNumberError.numberHasInvalidFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst getNumberValidator =\n    (options: Options = {}): ValidationFunction<NumberValidationResult> =>\n    (value: any) => {\n        const { required, min, max } = options;\n        const numberValue = getNumberFromStringInput(value);\n\n        if (hasValue(value) === false && required) {\n            return ValidateNumberError.numberHasNoValue;\n        }\n\n        if (hasValue(value)) {\n            if (numberValue === undefined) {\n                return ValidateNumberError.numberHasInvalidFormat;\n            }\n            if (min !== undefined && numberValue < min) {\n                return ValidateNumberError.numberIsTooSmall;\n            }\n            if (max !== undefined && numberValue > max) {\n                return ValidateNumberError.numberIsTooLarge;\n            }\n        }\n        return undefined;\n    };\n\nexport default getNumberValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateOrgNumberError {\n    orgNumberHasNoValue = 'orgNumberHasNoValue',\n    orgNumberHasInvalidFormat = 'orgNumberHasInvalidFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateOrgNumberError.orgNumberHasNoValue\n    | ValidateOrgNumberError.orgNumberHasInvalidFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst isValidOrgNumber = (value: any): boolean => {\n    if (\n        value &&\n        typeof value === 'string' &&\n        value.length === 9 &&\n        /^[0-9]*$/.test(value) &&\n        (value.charAt(0) === '8' || value.charAt(0) === '9')\n    ) {\n        return getMod11(value) === parseInt(value.charAt(8), 10);\n    }\n    return false;\n};\n\nconst getOrgNumberValidator =\n    (options: Options = {}): ValidationFunction<OrgNumberValidationResult> =>\n    (value: any) => {\n        const { required } = options;\n        if (required && hasValue(value) === false) {\n            return ValidateOrgNumberError.orgNumberHasNoValue;\n        }\n        const isValidFormat = isValidOrgNumber(value);\n        if (hasValue(value) && isValidFormat === false) {\n            return ValidateOrgNumberError.orgNumberHasInvalidFormat;\n        }\n    };\n\nexport default getOrgNumberValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateStringError {\n    stringHasNoValue = 'stringHasNoValue',\n    stringIsNotAString = 'stringIsNotAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateStringError.stringHasNoValue\n    | ValidateStringError.stringIsNotAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ninterface Options {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst getStringValidator =\n    (options: Options = {}): ValidationFunction<StringValidationResult> =>\n    (value: any) => {\n        const { required, minLength, maxLength } = options;\n\n        if (required && hasValue(value) === false) {\n            return ValidateStringError.stringHasNoValue;\n        }\n        if (hasValue(value)) {\n            if (typeof value !== 'string') {\n                return ValidateStringError.stringIsNotAString;\n            }\n            if (minLength !== undefined && value.length < minLength) {\n                return ValidateStringError.stringIsTooShort;\n            }\n            if (maxLength !== undefined && value.length > maxLength) {\n                return ValidateStringError.stringIsTooLong;\n            }\n        }\n    };\n\nexport default getStringValidator;\n","import { YesOrNo } from '../types';\nimport { ValidationFunction } from './types';\n\nexport enum ValidateYesOrNoError {\n    'yesOrNoIsUnanswered' = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult = ValidateYesOrNoError.yesOrNoIsUnanswered | undefined;\n\nconst getYesOrNoValidator = (): ValidationFunction<YesOrNoValidationResult> => (value: any) => {\n    const isAnswered = value === YesOrNo.YES || value === YesOrNo.NO || value === YesOrNo.DO_NOT_KNOW;\n    return isAnswered ? undefined : ValidateYesOrNoError.yesOrNoIsUnanswered;\n};\n\nexport default getYesOrNoValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst getRequiredFieldValidator = (): ValidationFunction<RequiredFieldValidationResult> => (value: any) => {\n    if (hasValue(value) === false) {\n        return ValidateRequiredFieldError.noValue;\n    }\n    return undefined;\n};\n\nexport default getRequiredFieldValidator;\n","import { Time } from '../types';\nimport { ValidationFunction } from './types';\nimport { getNumberFromStringInput, hasValue } from './validationUtils';\n\nexport enum ValidateTimeError {\n    timeHasNoValue = 'timeHasNoValue',\n    hoursAreInvalid = 'hoursAreInvalid',\n    hoursAreNegative = 'hoursAreNegative',\n    minutesAreInvalid = 'minutesAreInvalid',\n    minutesAreNegative = 'minutesAreNegative',\n    tooManyHours = 'tooManyHours',\n    tooManyMinutes = 'tooManyMinutes',\n    durationIsTooLong = 'durationIsTooLong',\n    durationIsTooShort = 'durationIsTooShort',\n}\n\ntype TimeValidationResult =\n    | undefined\n    | ValidateTimeError.timeHasNoValue\n    | ValidateTimeError.hoursAreInvalid\n    | ValidateTimeError.hoursAreNegative\n    | ValidateTimeError.minutesAreInvalid\n    | ValidateTimeError.minutesAreNegative\n    | ValidateTimeError.durationIsTooLong\n    | ValidateTimeError.durationIsTooShort\n    | ValidateTimeError.tooManyHours\n    | ValidateTimeError.tooManyMinutes;\n\ntype TimeRange = {\n    hours: number;\n    minutes: number;\n};\n\ninterface Options {\n    required?: boolean;\n    min?: TimeRange;\n    max?: TimeRange;\n}\n\nconst getMinutes = (hours: number, minutes: number): number => hours * 60 + minutes;\n\nconst valueIsValidNumber = (value: string | undefined): boolean => {\n    if (value) {\n        return value.match(/^[\\-0-9]+$/) !== null; // Tillatt - for å kunne gi feil på negative verdier\n    }\n    return false;\n};\n\nconst getTimeValidator =\n    (options: Options = {}): ValidationFunction<TimeValidationResult> =>\n    (value: Partial<Time>) => {\n        const { required, max, min } = options;\n        const { hours: inputHours, minutes: inputMinutes } = value || {};\n\n        if (hasValue(inputHours) && valueIsValidNumber(inputHours) === false) {\n            return ValidateTimeError.hoursAreInvalid;\n        }\n        if (hasValue(inputMinutes) && valueIsValidNumber(inputMinutes) === false) {\n            return ValidateTimeError.minutesAreInvalid;\n        }\n\n        const hours = getNumberFromStringInput(inputHours || '0');\n        const minutes = getNumberFromStringInput(inputMinutes || '0');\n\n        if (hours === undefined) {\n            return ValidateTimeError.hoursAreInvalid;\n        } else if (hours > 23) {\n            return ValidateTimeError.tooManyHours;\n        } else if (hours < 0) {\n            return ValidateTimeError.hoursAreNegative;\n        }\n        if (minutes === undefined) {\n            return ValidateTimeError.minutesAreInvalid;\n        } else if (minutes > 59) {\n            return ValidateTimeError.tooManyMinutes;\n        } else if (minutes < 0) {\n            return ValidateTimeError.minutesAreNegative;\n        }\n\n        if (required && hours === 0 && minutes === 0) {\n            return ValidateTimeError.timeHasNoValue;\n        }\n\n        if (max) {\n            if (getMinutes(hours, minutes) > getMinutes(max.hours, max.minutes)) {\n                return ValidateTimeError.durationIsTooLong;\n            }\n        }\n\n        if (min) {\n            if (getMinutes(hours, minutes) < getMinutes(min.hours, min.minutes)) {\n                return ValidateTimeError.durationIsTooShort;\n            }\n        }\n\n        return undefined;\n    };\n\nexport default getTimeValidator;\n","export interface IntlErrorObject {\n    /** If passed in, the key is not transformed with field name and error */\n    key: string;\n    /** Values passed through to intl formatMessage */\n    values?: { [key: string]: any };\n    /** Set if error key is not to be altered by fieldErrorHandler */\n    keepKeyUnaltered?: boolean;\n}\n\nexport const isIntlErrorObject = (error: any): error is IntlErrorObject => {\n    return typeof error === 'object' && typeof error.key === 'string';\n};\n\nexport type ValidationError = string | IntlErrorObject;\n\nexport type ValidationResult<ValidationErrors> = ValidationErrors | undefined;\n\nexport type ValidationFunction<ValidationErrors> = (value: any) => ValidationResult<ValidationErrors>;\n","import { IntlShape } from 'react-intl';\nimport { CustomFormErrorHandler, FieldErrorHandler } from '../types';\nimport { isIntlErrorObject, ValidationError } from './types';\n\nconst createFieldErrorIntlKey = (error: string, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nconst getFieldErrorHandler =\n    (intl: IntlShape, errorPrefix?: string): FieldErrorHandler<ValidationError> =>\n    (error: ValidationError, fieldName: string) => {\n        return isIntlErrorObject(error)\n            ? intl.formatMessage(\n                  {\n                      id: error.keepKeyUnaltered\n                          ? error.key\n                          : createFieldErrorIntlKey(error.key, fieldName, errorPrefix),\n                  },\n                  error.values\n              )\n            : intl.formatMessage({ id: createFieldErrorIntlKey(error, fieldName, errorPrefix) });\n    };\n\nconst getIntlFormErrorHandler = (intl: IntlShape, errorPrefix?: string): CustomFormErrorHandler<ValidationError> => ({\n    fieldErrorHandler: getFieldErrorHandler(intl, errorPrefix),\n    isHandledErrorTypeFunc: isIntlErrorObject,\n});\n\nexport default getIntlFormErrorHandler;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    land: Ferieland[];\n}\n\nexport const isFerieuttak = (ferieuttak: Ferieuttak): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined && ferieuttak.land !== undefined;\n};\n\nexport enum Ferieland {\n    'Norge' = 'norge',\n    'Sverige' = 'sverige',\n    'Danmark' = 'danmark',\n}\n","import React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\ninterface Props {\n    columns?: 1 | 2 | 3 | 'flex';\n}\n\nconst Tiles: React.FunctionComponent<Props> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { dateToISOString, getTypedFormComponents, ISOStringToDate } from '../../../../typed-formik-form';\nimport { getDateRangeValidator } from '../../../../typed-formik-form/validation';\nimport getDateValidator from '../../../../typed-formik-form/validation/getDateValidator';\nimport getListValidator, { ValidateListError } from '../../../../typed-formik-form/validation/getListValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { Ferieland, Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Ferieuttak;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n    land = 'land',\n}\n\ninterface FormValues extends Omit<Ferieuttak, 'fom' | 'tom'> {\n    fom: string;\n    tom: string;\n}\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues, ValidationError>();\n\nconst mapFerieuttakToFormValues = (ferieuttak: Ferieuttak): FormValues => ({\n    ...ferieuttak,\n    land: [...(ferieuttak.land || [])],\n    fom: dateToISOString(ferieuttak.fom),\n    tom: dateToISOString(ferieuttak.tom),\n});\n\nconst mapFormValuesToFerieuttak = (values: Partial<FormValues>): Ferieuttak | undefined => {\n    const fom = ISOStringToDate(values.fom);\n    const tom = ISOStringToDate(values.tom);\n    if (fom && tom) {\n        return {\n            ...values,\n            land: [...(values.land || [])],\n            fom,\n            tom,\n        };\n    }\n    return undefined;\n};\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak,\n    alleFerieuttak = [],\n    onSubmit,\n    onCancel,\n}) => {\n    const onFormikSubmit = (formValues: Partial<FormValues>) => {\n        const ferieuttak = mapFormValuesToFerieuttak(formValues);\n        if (ferieuttak && isFerieuttak(ferieuttak)) {\n            onSubmit(ferieuttak);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n    const intl = useIntl();\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n    const initialValues = ferieuttak ? mapFerieuttakToFormValues(ferieuttak) : undefined;\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues || {}}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getIntlFormErrorHandler(intl, 'ferieForm')}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={FerieuttakFormFields.land}\n                            legend={'Hvilket land'}\n                            checkboxes={[\n                                {\n                                    value: Ferieland.Norge,\n                                    label: 'Norge',\n                                },\n                                {\n                                    value: Ferieland.Sverige,\n                                    label: 'Sverige',\n                                },\n                                {\n                                    value: Ferieland.Danmark,\n                                    label: 'Danmark',\n                                },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                switch (error) {\n                                    case undefined:\n                                        return undefined;\n                                    case ValidateListError.listIsEmpty:\n                                        return 'listIsEmpty';\n                                }\n                            }}\n                        />\n                        <Box margin=\"xl\">\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    minDate,\n                                    maxDate: maxDate || formik.values.tom,\n                                    disabledDateRanges: alleFerieuttak\n                                        .filter((f) => (ferieuttak ? ferieuttak.id !== f.id : true))\n                                        .map((f) => ({ from: f.fom, to: f.tom })),\n                                    validate: (value) => {\n                                        const error = getDateValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                        })(value);\n                                        return error;\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    minDate: minDate || formik.values.fom,\n                                    maxDate,\n                                    validate: getDateRangeValidator({\n                                        fromDate: ISOStringToDate(formik.values.fom),\n                                        min: minDate,\n                                        max: maxDate,\n                                        required: true,\n                                    }).validateToDate,\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </Box>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '../../../../typed-formik-form';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { TypedFormInputValidationProps } from '../../../../typed-formik-form/types';\n\ninterface Props<FieldName> extends TypedFormInputValidationProps<FieldName, string> {\n    name: FieldName;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldName>({ name, minDate, maxDate, validate, labels }: Props<FieldName>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldName, Ferieuttak, string>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate ? (value) => validate(value, name) : undefined}\n                sortFunc={sortItemsByFom}\n                maxItems={1}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        alleFerieuttak={allItems}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\nimport { Ferieuttak } from './ferieuttak-example';\n\nexport enum FormFields {\n    'nameGroup' = 'nameGroup',\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'dateinterval_from' = 'dateinterval_from',\n    'dateinterval_to' = 'dateinterval_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak',\n    'letters' = 'letters',\n    'fødselsnummer' = 'fødselsnummer',\n    'datastruktur' = 'objekt',\n    'barnetsFødselsnummer' = 'barnetsFødselsnummer',\n    'friends' = 'friends',\n}\n\nexport interface CompletedFormValues {\n    [FormFields.nameGroup]: string;\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: string;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: string;\n    [FormFields.daterange_to]?: string;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: Ferieuttak[];\n    [FormFields.letters]?: string[];\n    [FormFields.friends]: Friend[];\n    [FormFields.fødselsnummer]: string;\n    [FormFields.datastruktur]: {\n        navn: string;\n    };\n    [FormFields.barnetsFødselsnummer]: string;\n}\nexport interface Person {\n    name: string;\n}\nexport interface Friend extends Person {\n    siblings: Person[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","import React from 'react';\nimport { FieldArray } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { FormikInput } from '../../../../typed-formik-form';\nimport { getStringValidator } from '../../../../typed-formik-form/validation';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { hasValue } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport { Friend } from '../types';\n\ninterface Props {\n    fieldName: string;\n    friend: Friend;\n}\n\nconst Siblings: React.FunctionComponent<Props> = ({ fieldName, friend }) => {\n    const { siblings } = friend;\n    return (\n        <FieldArray\n            name={fieldName}\n            render={(arrayHelpers) => (\n                <div>\n                    {siblings &&\n                        siblings.length > 0 &&\n                        siblings.map((_sibling, index) => (\n                            <div key={index}>\n                                <Question>\n                                    <FormikInput\n                                        type=\"text\"\n                                        label=\"Søskens navn\"\n                                        name={`${fieldName}.${index}.name` as any}\n                                        validate={(values) => {\n                                            const error = getStringValidator({ required: true })(values);\n                                            if (error) {\n                                                const intlErr: ValidationError = {\n                                                    key: 'søskennavn.mangler',\n                                                    values: {\n                                                        navn: hasValue(friend.name) ? friend.name : ` venn ${index}`,\n                                                    },\n                                                };\n                                                return intlErr;\n                                            }\n                                        }}\n                                    />\n                                </Question>\n                            </div>\n                        ))}\n                    <Box>\n                        <Knapp htmlType=\"button\" mini={true} onClick={() => arrayHelpers.push('')}>\n                            Legg til søsken\n                        </Knapp>\n                    </Box>\n                </div>\n            )}\n        />\n    );\n};\n\nexport default Siblings;\n","import { Time, YesOrNo } from '../../../typed-formik-form';\n\nexport enum FormFields {\n    'jaNeiSpørsmål' = 'jaNeiSpørsmål',\n    'tall' = 'tall',\n    'tekst' = 'tekst',\n    'fødselsnummer' = 'fødselsnummer',\n    'dato' = 'dato',\n    'tidsperiode_fra' = 'tidsperiode_fra',\n    'tidsperiode_til' = 'tidsperiode_til',\n    'orgnummer' = 'orgnummer',\n    'liste' = 'liste',\n    'radio' = 'radio',\n    'select' = 'select',\n    'checked' = 'checked',\n    'time' = 'time',\n}\n\nexport interface FormValues {\n    [FormFields.jaNeiSpørsmål]?: YesOrNo;\n    [FormFields.tall]?: string;\n    [FormFields.tekst]?: string;\n    [FormFields.fødselsnummer]?: string;\n    [FormFields.dato]?: string;\n    [FormFields.tidsperiode_fra]?: string;\n    [FormFields.tidsperiode_til]?: string;\n    [FormFields.orgnummer]?: string;\n    [FormFields.liste]?: string[];\n    [FormFields.select]?: string;\n    [FormFields.radio]?: string;\n    [FormFields.checked]?: boolean;\n    [FormFields.time]?: Partial<Time>;\n}\n\nexport const initialValues = {};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FormikDateIntervalPicker, FormikFileInput, FormikInput, ISOStringToDate } from '../../../../typed-formik-form';\nimport FormikDateRangePicker from '../../../../typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker';\nimport FormikTimeInput from '../../../../typed-formik-form/components/formik-time-input/FormikTimeInput';\nimport { getTypedFormComponents } from '../../../../typed-formik-form/components/getTypedFormComponents';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n} from '../../../../typed-formik-form/validation';\nimport getRequiredFieldValidator from '../../../../typed-formik-form/validation/getRequiredFieldValidator';\nimport getTimeValidator from '../../../../typed-formik-form/validation/getTimeValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { validateAll } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport Tiles from '../../../components/tiles/Tiles';\nimport FerieuttakListAndDialog from '../ferieuttak-example/FerieuttakListAndDialog';\nimport { FormFields, FormValues } from '../types';\nimport Friends from './Friends';\n// import {\n//     OmsorgstilbudInlineForm,\n//     getDatoerForOmsorgstilbudPeriode,\n// } from '@navikt/sif-common-forms/lib/omsorgstilbud/OmsorgstilbudForm';\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst TypedFormExample = () => {\n    const { values } = useFormikContext<FormValues>();\n    const { setFieldValue } = useFormikContext<FormValues>();\n    const intl = useIntl();\n    const minDate = dayjs().subtract(2, 'month').toDate();\n    const maxDate = dayjs().add(1, 'month').toDate();\n    // const datoer = getDatoerForOmsorgstilbudPeriode(dayjs('2021-06-01').toDate(), dayjs('2021-06-04').toDate());\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            includeButtons={true}\n            formErrorHandler={getIntlFormErrorHandler(intl)}>\n            <Box margin=\"m\">\n                <FormikTimeInput\n                    name=\"abc\"\n                    label=\"Tor. 12.05.21\"\n                    timeInputLayout={{\n                        direction: 'horizontal',\n                        compact: false,\n                    }}\n                    validate={(time) => {\n                        const error = getTimeValidator({\n                            required: true,\n                            min: { hours: 0, minutes: 1 },\n                            max: { hours: 7, minutes: 30 },\n                        })(time);\n                        return error\n                            ? {\n                                  key: error,\n                                  values: { dag: 'Torsdag 12. 10. 2000' },\n                                  keepKeyUnaltered: true,\n                              }\n                            : undefined;\n                    }}\n                />\n            </Box>\n            <Box margin=\"m\">\n                <FormikTimeInput\n                    name=\"abc\"\n                    label=\"Tor. 12.05.21\"\n                    timeInputLayout={{\n                        direction: 'horizontal',\n                        compact: true,\n                    }}\n                />\n            </Box>\n            <Box margin=\"m\">\n                <FormikTimeInput\n                    name=\"abc\"\n                    label=\"Tor. 12.05.21\"\n                    timeInputLayout={{\n                        direction: 'vertical',\n                        compact: true,\n                    }}\n                />\n            </Box>\n\n            {1 + 1 === 3 && (\n                <>\n                    {/* <OmsorgstilbudInlineForm fieldName={`enkeltdager`} datoer={datoer} /> */}\n                    <Question>\n                        <Box margin=\"m\">\n                            <FormikTimeInput\n                                name=\"abc\"\n                                label=\"Tor. 12.05.21\"\n                                timeInputLayout={{\n                                    direction: 'vertical',\n                                    compact: false,\n                                }}\n                                validate={(time) => {\n                                    const error = getTimeValidator({\n                                        required: true,\n                                        min: { hours: 0, minutes: 1 },\n                                        max: { hours: 7, minutes: 30 },\n                                    })(time);\n                                    return error\n                                        ? {\n                                              key: error,\n                                              values: { dag: 'Torsdag 12. 10. 2000' },\n                                              keepKeyUnaltered: true,\n                                          }\n                                        : undefined;\n                                }}\n                            />\n                        </Box>\n                        <Box margin=\"m\">\n                            <FormikTimeInput\n                                name=\"abc\"\n                                label=\"Tor. 12.05.21\"\n                                timeInputLayout={{\n                                    direction: 'vertical',\n                                }}\n                                validate={(time) => {\n                                    const error = getTimeValidator({\n                                        required: true,\n                                        min: { hours: 0, minutes: 1 },\n                                        max: { hours: 7, minutes: 30 },\n                                    })(time);\n                                    return error\n                                        ? {\n                                              key: error,\n                                              values: { dag: 'Torsdag 12. 10. 2000' },\n                                              keepKeyUnaltered: true,\n                                          }\n                                        : undefined;\n                                }}\n                            />\n                        </Box>\n                    </Question>\n                    <Question>\n                        <Form.YesOrNoQuestion\n                            legend={'Har du kids'}\n                            name={FormFields.hasKids}\n                            validate={(value) => {\n                                const err = getYesOrNoValidator()(value);\n                                if (err) {\n                                    return {\n                                        key: err,\n                                        values: { question: 'spørsmålet om antall barn' },\n                                        keepKeyUnaltered: false,\n                                    };\n                                }\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikDateRangePicker\n                            legend=\"DateRangePicker\"\n                            disableWeekend={true}\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            fromInputProps={{\n                                name: FormFields.daterange_from,\n                                label: 'Fra',\n                            }}\n                            toInputProps={{\n                                name: FormFields.daterange_to,\n                                label: 'Til',\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            name={FormFields.fødselsnummer}\n                            label=\"Fødselsnummer\"\n                            validate={(value) =>\n                                validateAll<ValidationError>([\n                                    () => getStringValidator({ minLength: 2 })(value),\n                                    () => getFødselsnummerValidator({ required: true })(value),\n                                ])\n                            }\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            name={'datastruktur.navn' as any}\n                            label=\"Datastrukturnavn\"\n                            validate={(value) => {\n                                const error = getStringValidator({ minLength: 2, required: true })(value);\n                                if (error) {\n                                    return {\n                                        key: 'abc',\n                                        values: { s: 2 },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            type=\"text\"\n                            label=\"Fornavn\"\n                            name={FormFields.firstname}\n                            validate={getRequiredFieldValidator()}\n                        />\n                    </Question>{' '}\n                    <Question>\n                        <Form.Input\n                            name={FormFields.barnetsFødselsnummer}\n                            label=\"Barnets fødselsnummer\"\n                            validate={(value) => {\n                                const error = getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: values.fødselsnummer ? [values.fødselsnummer] : undefined,\n                                })(value);\n                                if (error === ValidateFødselsnummerError.fødselsnummerIsNotAllowed) {\n                                    return {\n                                        key: 'fødselsnummer.fødselsnummerIsNotAllowed',\n                                        values: {\n                                            info: ' (du har tastet inn ditt eget fødselsnummer)',\n                                        },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Box margin=\"xl\">\n                        <Box margin=\"l\" padBottom=\"l\">\n                            <Undertittel>Venner</Undertittel>\n                        </Box>\n                        <Question>\n                            <Friends fieldName=\"friends\" friends={values.friends || []} />\n                        </Question>\n                    </Box>\n                    <Question>\n                        <FerieuttakListAndDialog\n                            name={FormFields.ferieuttak}\n                            labels={{\n                                addLabel: 'Legg til',\n                                modalTitle: 'Ferieuttak',\n                                listTitle: 'Ferieuttak',\n                            }}\n                            minDate={dayjs().subtract(1, 'year').toDate()}\n                            maxDate={dayjs().add(1, 'year').toDate()}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CheckboxPanelGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            checkboxes={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                if (error === ValidateListError.listIsEmpty) {\n                                    return {\n                                        key: error,\n                                        values: { value: 'inserted value' },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker\n                            name={FormFields.birthdate}\n                            label=\"Fødselsdato\"\n                            validate={getDateValidator({ required: true })}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" useAlpha3Code={true} />\n                    </Question>\n                    <Question>\n                        <Tiles columns={2}>\n                            <Form.Input\n                                name={FormFields.firstname}\n                                label=\"Fornavn\"\n                                validate={getRequiredFieldValidator()}\n                            />\n                            <Form.Input\n                                name={FormFields.lastname}\n                                label=\"Etternavn\"\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </Tiles>\n                    </Question>\n                    <Question>\n                        <div style={{ display: 'flex', flex: 'flex-start' }}>\n                            <FormikTimeInput name={FormFields.time} label=\"Tidspunkt\" />\n                        </div>\n                    </Question>\n                    <Question>\n                        <FormikDateIntervalPicker\n                            legend=\"DateIntervalPicker (test)\"\n                            fromDatepickerProps={{\n                                name: FormFields.dateinterval_from,\n                                label: 'Fra',\n                                maxDate: ISOStringToDate(values.daterange_to),\n                                validate: getRequiredFieldValidator(),\n                            }}\n                            toDatepickerProps={{\n                                name: FormFields.dateinterval_to,\n                                label: 'Til',\n                                minDate: ISOStringToDate(values.daterange_from),\n                                validate: getRequiredFieldValidator(),\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikFileInput\n                            name={FormFields.files}\n                            label=\"Legg til filer\"\n                            acceptedExtensions={'tsx'}\n                            onFilesSelect={() => null}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            label=\"Oppgi hvor mange timer i snitt per uke, har barnet tilsyn?\"\n                            name={FormFields.firstname}\n                            suffixStyle=\"text\"\n                            suffix=\"Timer\"\n                            bredde=\"S\"\n                            maxLength={5}\n                            validate={(value) => {\n                                const error = getNumberValidator({ min: 0, max: 20000 })(value);\n                                if (error === ValidateNumberError.numberIsTooLarge) {\n                                    return {\n                                        key: error,\n                                        values: { max: 20000 },\n                                    };\n                                }\n                                if (error === ValidateNumberError.numberIsTooSmall) {\n                                    return {\n                                        key: error,\n                                        values: { min: 0 },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikInput type=\"tel\" label=\"Et tall\" name={'number'} />\n                    </Question>\n                    <Question>\n                        <Form.RadioGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            radios={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={getRequiredFieldValidator()}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" />\n                    </Question>\n                    <Knapp\n                        htmlType=\"button\"\n                        onClick={() => {\n                            setFieldValue(FormFields.birthdate, '2000-10-2');\n                        }}>\n                        Sett ugyldig dato\n                    </Knapp>\n                </>\n            )}\n        </Form.Form>\n    );\n};\n\nexport default TypedFormExample;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport TypedFormExample from './typed-form-example/TypedFormExample';\nimport { FormValues } from './types';\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            id: '1',\n            fom: new Date(),\n            tom: dayjs().add(1, 'month').toDate(),\n            land: [],\n        },\n        {\n            id: '2',\n            fom: dayjs().add(1, 'month').toDate(),\n            tom: dayjs().add(2, 'month').toDate(),\n            land: [],\n        },\n    ],\n    friends: [],\n    letters: [],\n};\n\nconst FormikExample = () => {\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>TypedFormExample</h2>\n                <p>Skjemaet her er mest brukt som arbeidsflate for å teste komponentene under utvikling.</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={() => (\n                    <Panel>\n                        <TypedFormExample />\n                    </Panel>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport Box from '../box/Box';\nimport './validationErrorList.less';\n\ninterface ValidationErrorInfo {\n    info: string;\n    example?: string;\n}\n\nexport type ValidationErrors = {\n    [key: string]: ValidationErrorInfo;\n};\n\ninterface Props {\n    errors: ValidationErrors;\n    title: string;\n}\n\nconst ValidationErrorList = ({ errors, title }: Props) => {\n    return (\n        <Box margin=\"xl\">\n            {title && <Element tag=\"h4\">{title}</Element>}\n            <Box margin=\"m\">\n                <table className=\"validationErrorList\">\n                    <thead>\n                        <tr>\n                            <th>Feil</th>\n                            <th>Beskrivelse</th>\n                            <th>Eksempel</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.keys(errors).map((key) => {\n                            return (\n                                <tr key={key}>\n                                    <th>\n                                        <code>{key}</code>\n                                    </th>\n                                    <td key=\"info\">{errors[key].info}</td>\n                                    <td key=\"example\">{errors[key].example}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </Box>\n        </Box>\n    );\n};\n\nexport default ValidationErrorList;\n","import React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Tabs from 'nav-frontend-tabs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport Box from '../../components/box/Box';\nimport { hasValue } from '../../../typed-formik-form/validation/validationUtils';\n\ninterface Props {\n    title: string;\n    functionName?: string;\n    code?: string;\n}\n\nconst ValideringPanel: React.FunctionComponent<Props> = ({ title, children, code }) => {\n    const [activePanel, setActivePanel] = useState(0);\n    return (\n        <div style={{ marginBottom: '4rem' }}>\n            <Systemtittel tag=\"h3\">{title}</Systemtittel>\n            <Box margin=\"l\">\n                {hasValue(code) && (\n                    <Tabs\n                        tabs={[{ label: 'Eksempel' }, { label: 'Kode' }]}\n                        onChange={(_evt, idx) => setActivePanel(idx)}\n                    />\n                )}\n                {activePanel === 0 && <>{children}</>}\n                {activePanel === 1 && (\n                    <SyntaxHighlighter language=\"typescript\" style={docco}>\n                        {code}\n                    </SyntaxHighlighter>\n                )}\n            </Box>\n        </div>\n    );\n};\nexport default ValideringPanel;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(utc);\ndayjs.extend(isBetween);\n\nimport { ApiStringDate } from '../types/ApiStringDate';\n\nconst apiDateFormat = 'YYYY-MM-DD';\nconst prettyDateFormat = 'DD.MM.YYYY';\nconst prettyDateFormatExtended = 'DD. MMM YYYY';\n\nexport const formatDateToApiFormat = (date: Date): ApiStringDate => {\n    const apiFormattedDate = dayjs(date).format(apiDateFormat);\n    return apiFormattedDate;\n};\nexport const prettifyDate = (date: Date): string => dayjs(date).format(prettyDateFormat);\nexport const prettifyDateExtended = (date: Date) => dayjs(date).format(prettyDateFormatExtended);\nexport const apiStringDateToDate = (date: ApiStringDate): Date => dayjs(date, apiDateFormat).toDate();\n\nexport const isMoreThan3YearsAgo = (date: Date) => dayjs(date).isBefore(date3YearsAgo);\n\nexport const dateToISOFormattedDateString = (date?: Date) => (date ? dayjs.utc(date).format(apiDateFormat) : undefined);\n\nexport const date10MonthsAgo = dayjs().subtract(10, 'month').startOf('day').toDate();\n\nexport const date1YearAgo = dayjs().subtract(1, 'year').startOf('day').toDate();\n\nexport const date4YearsAgo = dayjs().subtract(4, 'year').startOf('day').toDate();\n\nexport const date3YearsAgo = dayjs().subtract(3, 'year').startOf('day').toDate();\n\nexport const date4WeeksAgo = dayjs().subtract(4, 'week').startOf('day').toDate();\n\nexport const date1YearFromNow = dayjs().add(1, 'year').endOf('day').toDate();\n\nexport const dateToday = dayjs().toDate();\n\nexport const sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\nexport const sortOpenDateRange = (d1: OpenDateRange, d2: OpenDateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport interface OpenDateRange {\n    from: Date;\n    to?: Date;\n}\n\nexport const dateRangesCollide = (ranges: DateRange[]): boolean => {\n    if (ranges.length > 0) {\n        const sortedDates = ranges.sort(sortDateRange);\n        const hasOverlap = ranges.find((d, idx) => {\n            if (idx < sortedDates.length - 1) {\n                return dayjs(d.to).isAfter(sortedDates[idx + 1].from);\n            }\n            return false;\n        });\n        return hasOverlap !== undefined;\n    }\n    return false;\n};\n\nexport const dateRangesExceedsRange = (ranges: DateRange[], allowedRange: DateRange): boolean => {\n    if (ranges.length === 0) {\n        return false;\n    }\n    const sortedRanges = ranges.sort(sortDateRange);\n    const from = sortedRanges[0].from;\n    const to = sortedRanges[sortedRanges.length - 1].to;\n\n    if (\n        !dayjs(from).isBetween(allowedRange.from, allowedRange.to, 'day', '[]') ||\n        !dayjs(to).isBetween(allowedRange.from, allowedRange.to, 'day', '[]')\n    ) {\n        return true;\n    }\n    return false;\n};\n\ninterface ItemWithFomTom {\n    fom: Date;\n    tom: Date;\n}\n\ninterface ItemWithFom {\n    fom: Date;\n}\n\nexport const sortItemsByFomTom = (a: ItemWithFomTom, b: ItemWithFomTom) =>\n    sortDateRange({ from: a.fom, to: a.fom }, { from: b.fom, to: b.tom });\n\nexport const sortItemsByFom = (a: ItemWithFom, b: ItemWithFom) => sortOpenDateRange({ from: a.fom }, { from: b.fom });\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { getTypedFormComponents } from '../../../typed-formik-form';\nimport datepickerUtils from '../../../typed-formik-form/components/formik-datepicker/datepickerUtils';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport {\n    getCheckedValidator,\n    getDateRangeValidator,\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateCheckedError,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '../../../typed-formik-form/validation';\nimport getIntlFormErrorHandler from '../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../typed-formik-form/validation/types';\nimport Box from '../../components/box/Box';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport ValidationErrorList from '../../components/validation-errors/ValidationErrorList';\nimport { FormFields, FormValues } from './types';\nimport ValideringPanel from './ValideringPanel';\nimport { dateToday } from '../../utils/dateUtils';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport getTimeValidator, { ValidateTimeError } from '../../../typed-formik-form/validation/getTimeValidator';\n\nconst initialValues: FormValues = {\n    liste: [],\n};\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst ValideringExample = () => {\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>Validering</h2>\n                <p>sif-common-formik komponenter med validering</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={(formik) => {\n                    const fromDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_fra);\n                    const toDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_til);\n                    return (\n                        <Form.Form\n                            submitButtonLabel=\"Ok\"\n                            includeValidationSummary={true}\n                            includeButtons={true}\n                            formErrorHandler={getIntlFormErrorHandler(intl)}>\n                            <ValideringPanel\n                                title=\"Ja/Nei\"\n                                code={`\nexport enum ValidateYesOrNoError {\nyesOrNoIsUnanswered = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult =\n| ValidateYesOrNoError.yesOrNoIsUnanswered\n| undefined;\n\nconst error = getYesOrNoValidator()(value);\n                    `}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.jaNeiSpørsmål}\n                                        legend=\"Har du søkt om andre ytelser i perioden du søker for?\"\n                                        validate={getYesOrNoValidator()}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateYesOrNoError.yesOrNoIsUnanswered]: {\n                                            info: 'spørsmål er ikke besvart',\n                                            example:\n                                                'Du må svare ja eller nei på om du har søkt andre ytelser i perioden du søker for',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n\n                            <ValideringPanel\n                                title=\"Fritekst\"\n                                code={`\nexport enum ValidateStringError {\n    stringHasNoValue = 'stringHasNoValue',\n    stringIsNotAString = 'stringIsNotAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateStringError.stringHasNoValue\n    | ValidateStringError.stringIsNotAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ntype Options = {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst error = getStringValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.tekst}\n                                        label=\"Hva er navnet på dagen i dag? Bruk mellom 5 og 20 tegn\"\n                                        bredde=\"L\"\n                                        validate={getStringValidator({\n                                            required: true,\n                                            maxLength: 20,\n                                            minLength: 5,\n                                        })}></Form.Input>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateStringError.stringHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Skriv inn hvilken dag det er i dag',\n                                        },\n                                        [ValidateStringError.stringIsNotAString]: {\n                                            info: 'feil type data',\n                                            example: 'Navnet på dagen i dag er ikke gyldig',\n                                        },\n                                        [ValidateStringError.stringIsTooLong]: {\n                                            info: 'for lang tekst',\n                                            example: 'Navnet på dagen i dag kan ikke inneholde flere enn 20 tegn.',\n                                        },\n                                        [ValidateStringError.stringIsTooShort]: {\n                                            info: 'for kort tekst',\n                                            example: 'Navnet på dagen i dag må inneholde minst 5 tegn',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Tall\"\n                                code={`\nexport enum ValidateNumberError {\n    numberHasNoValue = 'numberHasNoValue',\n    numberHasInvalidFormat = 'numberHasInvalidFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateNumberError.numberHasNoValue\n    | ValidateNumberError.numberHasInvalidFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst error = getNumberValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.NumberInput\n                                        name={FormFields.tall}\n                                        label=\"Hva er næringsinntekten for virksomheten?\"\n                                        bredde=\"S\"\n                                        validate={getNumberValidator({\n                                            required: true,\n                                            min: 1999,\n                                            max: 2021,\n                                        })}></Form.NumberInput>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateNumberError.numberHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Du må oppgi næringsinntekt for virksomheten',\n                                        },\n                                        [ValidateNumberError.numberHasInvalidFormat]: {\n                                            info: 'verdien er ikke et tall',\n                                            example:\n                                                'Du må oppgi et gyldig tall for næringsinntekten i virksomheten. Et gyldig tall inneholder kun siffer.',\n                                        },\n                                        [ValidateNumberError.numberIsTooSmall]: {\n                                            info: 'for lavt tall',\n                                            example: `Tallet du har oppgitt som næringsinntekt for virksomheten er for lavt. Tallet kan ikke være lavere enn 0.`,\n                                        },\n                                        [ValidateNumberError.numberIsTooLarge]: {\n                                            info: 'for stort tall',\n                                            example: `Tallet du har oppgitt som næringsinntekt for virksomheten er for høyt. Tallet kan ikke være høyere enn 99999999.`,\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Dato\"\n                                code={`\nexport enum ValidateDateError {\n    dateHasNoValue = 'dateHasNoValue',\n    dateHasInvalidFormat = 'dateHasInvalidFormat',\n    dateIsBeforeMin = 'dateIsBeforeMin',\n    dateIsAfterMax = 'dateIsAfterMax',\n    dateIsNotWeekday = 'dateIsNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateDateError.dateHasNoValue\n    | ValidateDateError.dateHasInvalidFormat\n    | ValidateDateError.dateIsBeforeMin\n    | ValidateDateError.dateIsAfterMax\n    | ValidateDateError.dateIsNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst error = getDateValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.DatePicker\n                                        name={FormFields.dato}\n                                        label={\n                                            'Når startet du i arbeidslivet? Dersom dette var en lørdag eller søndag, velg påfølgende mandag.'\n                                        }\n                                        showYearSelector={true}\n                                        validate={getDateValidator({\n                                            required: true,\n                                            min: new Date(2015, 0, 1),\n                                            max: dateToday,\n                                            onlyWeekdays: true,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateDateError.dateHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example:\n                                                'Du må oppgi dato for når du begynte i arbeidslivet. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                        [ValidateDateError.dateHasInvalidFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Du må oppgi dato for når du begynte i arbeidslivet i et gyldig format. Gyldig format er dd.mm.åååå.',\n                                        },\n                                        [ValidateDateError.dateIsBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: `Datoen for når du begynte i arbeidslivet kan ikke være før ${prettifyDate(\n                                                new Date(2015, 0, 1)\n                                            )}. Skriv inn eller velg dato fra datovelgeren.`,\n                                        },\n                                        [ValidateDateError.dateIsAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example:\n                                                'Datoen for når du begynte i arbeidslivet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Periodevelger\"\n                                code={`\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface Options extends DateValidationOptions {\n    fromDate?: Date;\n    toDate?: Date;\n}\n\nconst errorFromDate = getDateRangeValidator(options).validateFromDate(value);\nconst errorToDate = getDateRangeValidator(options).validateToDate(value);\n                                `}>\n                                <Panel>\n                                    <Form.DateRangePicker\n                                        legend=\"Når startet og avsluttet du virksomheten?\"\n                                        fromInputProps={{\n                                            label: 'Startdato',\n                                            name: FormFields.tidsperiode_fra,\n                                            dayPickerProps: { initialMonth: new Date(2021, 0, 1) },\n                                            validate: getDateRangeValidator({\n                                                min: new Date(2021, 0, 1),\n                                                max: new Date(2021, 11, 31),\n                                                toDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }).validateFromDate,\n                                        }}\n                                        toInputProps={{\n                                            label: 'Sluttdato',\n                                            name: FormFields.tidsperiode_til,\n                                            dayPickerProps: { initialMonth: new Date(2021, 11, 31) },\n                                            validate: getDateRangeValidator({\n                                                min: new Date(2000, 0, 1),\n                                                max: dateToday,\n                                                fromDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }).validateToDate,\n                                        }}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger - Startdato\"\n                                    errors={{\n                                        [ValidateDateError.dateHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example:\n                                                'Du må oppgi hvilken dato du startet virksomheten. Skriv inn eller velg startdato fra datovelgeren.',\n                                        },\n                                        [ValidateDateError.dateHasInvalidFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Du må oppgi startdato for virksomheten i et gyldig format. Gyldig format er dd.mm.ååå.',\n                                        },\n                                        [ValidateDateError.dateIsBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: `Startdatoen for når du startet virksomheten kan ikke være før ${prettifyDate(\n                                                new Date(2000, 0, 1)\n                                            )}. Skriv inn eller velg startdato fra datovelgeren.`,\n                                        },\n                                        [ValidateDateError.dateIsAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example:\n                                                'Startdatoen for når du startet virksomhetem må være før dagens dato. Skriv inn eller velg startdato fra datovelgeren.',\n                                        },\n                                        [ValidateDateRangeError.fromDateIsAfterToDate]: {\n                                            info: 'fra-dato er etter til-dato',\n                                            example:\n                                                'Startdatoen for når du startet virksomheten må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                    }}\n                                />\n                                <Box margin=\"xl\">\n                                    <ValidationErrorList\n                                        title=\"Feilmeldinger - Sluttdato\"\n                                        errors={{\n                                            [ValidateDateError.dateHasNoValue]: {\n                                                info: 'ingen verdi',\n                                                example:\n                                                    'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n                                            },\n                                            [ValidateDateError.dateHasInvalidFormat]: {\n                                                info: 'ugyldig verdi',\n                                                example:\n                                                    'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n                                            },\n                                            [ValidateDateError.dateIsBeforeMin]: {\n                                                info: 'dato er for tidlig',\n                                                example: `Sluttdatoen for når du avsluttet virksomheten kan ikke være før ${prettifyDate(\n                                                    new Date(2000, 0, 1)\n                                                )}. Skriv inn eller velg sluttdato fra datovelgeren.`,\n                                            },\n                                            [ValidateDateError.dateIsAfterMax]: {\n                                                info: 'dato er for sen',\n                                                example:\n                                                    'Sluttdatoen for når du avsluttet virksomhetem må være før dagens dato. Skriv inn eller velg sluttdato fra datovelgeren.',\n                                            },\n                                            [ValidateDateRangeError.toDateIsBeforeFromDate]: {\n                                                info: 'fra-dato er etter til-dato',\n                                                example:\n                                                    'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n                                            },\n                                        }}\n                                    />\n                                </Box>\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Norsk fødselsnummer/D-nummer\"\n                                code={`\nexport enum ValidateFødselsnummerError {\n    fødselsnummerHasNoValue = 'fødselsnummerHasNoValue',\n    fødselsnummerIsNot11Chars = 'fødselsnummerIsNot11Chars',\n    fødselsnummerIsInvalid = 'fødselsnummerIsInvalid',\n    fødselsnummerIsNotAllowed = 'fødselsnummerIsNotAllowed',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateFødselsnummerError.fødselsnummerHasNoValue\n    | ValidateFødselsnummerError.fødselsnummerIsNotAllowed\n    | ValidateFødselsnummerError.fødselsnummerIsNot11Chars\n    | ValidateFødselsnummerError.fødselsnummerIsInvalid\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    /** Andre fødselsnumre som ikke er gyldig - f.eks søkers fødselsnummer */\n    disallowedValues?: string[];\n}\n\nconst error = getFødselsnummerValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.fødselsnummer}\n                                        bredde=\"M\"\n                                        description={\n                                            'Eksempelfødselsnummeret \"19081988075\" er ditt eget, og er ikke tillatt'\n                                        }\n                                        label=\"Hva er barnets fødselsnummer / D-nummer?\"\n                                        validate={getFødselsnummerValidator({\n                                            required: true,\n                                            disallowedValues: ['19081988075'],\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example: 'Skriv inn barnets fødselsnummer',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Du har oppgitt et ugyldig fødselsnummer som ikke består av 11 siffer. Et gyldig fødselsnummer består av 11 siffer.',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]: {\n                                            info: 'ikke tillatt fødselsnummer',\n                                            example:\n                                                'Du har oppgitt ditt eget fødselsnummer som barnets fødselsnummer. Skriv inn barnets fødselsnummer.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Organisasjonsnummer\"\n                                code={`\nexport enum ValidateOrgNumberError {\n    orgNumberHasNoValue = 'orgNumberHasNoValue',\n    orgNumberHasInvalidFormat = 'orgNumberHasInvalidFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateOrgNumberError.orgNumberHasNoValue\n    | ValidateOrgNumberError.orgNumberHasInvalidFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst error = getOrgNumberValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.orgnummer}\n                                        legend=\"Hva er NAVs organisasjonsnummer\"\n                                        validate={getOrgNumberValidator({ required: true })}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateOrgNumberError.orgNumberHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example:\n                                                'Skriv inn organisasjonsnummeret. Et gyldig organsisasjonsnummer inneholder 9 siffer',\n                                        },\n                                        [ValidateOrgNumberError.orgNumberHasInvalidFormat]: {\n                                            info: 'ugyldig orgnummer',\n                                            example:\n                                                'Du har oppgitt et ugyldig organisasjonsnummer. Oppgi et gyldig organsisasjonsnummer som inneholder 9 siffer.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Flervalgsliste\"\n                                code={`\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ntype ListValidationResult = undefined | ValidateListError;\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst error = getListValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.CheckboxPanelGroup\n                                        name={FormFields.liste}\n                                        legend=\"Velg dine 2 eller 3 favorittfrukter\"\n                                        checkboxes={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getListValidator({\n                                            required: true,\n                                            minItems: 2,\n                                            maxItems: 3,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateListError.listIsEmpty]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Velg dine 2 eller 3 favorittfrukter. Huk av i listen.',\n                                        },\n                                        [ValidateListError.listHasTooFewItems]: {\n                                            info: 'for få valgt',\n                                            example: 'Du har valgt for få frukter. Du må velge minst 2 frukter.',\n                                        },\n                                        [ValidateListError.listHasTooManyItems]: {\n                                            info: 'for mange valgt',\n                                            example:\n                                                'Du har valgt for mange frukter. Du kan ikke velge flere enn 3 frukter.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Enkeltvalg - radioknapper\"\n                                code={`\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst error = getRequiredFieldValidator()(value);\n`}>\n                                <Panel>\n                                    <Form.RadioPanelGroup\n                                        name={FormFields.radio}\n                                        legend=\"Velg din éne favorittfrukt\"\n                                        radios={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Du må velge din éne favorittfrukt. Huk av i listen.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Enkeltvalg i liste\"\n                                code={`\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst error = getRequiredFieldValidator()(value);\n`}>\n                                <p>Samme valideringslogikk som for en radioliste</p>\n                                <Panel>\n                                    <Form.CountrySelect\n                                        name={FormFields.select}\n                                        label=\"Hvilket land er virksomheten registrert i?\"\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ikke valgt',\n                                            example:\n                                                'Du må velge hvilket land virksomheten din er registrert i. Velg land fra listen.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Avkrysningsvalg\"\n                                code={`\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\ntype CheckedValidationResult = ValidateCheckedError | undefined;\n\nconst error = getCheckedValidator()(value);\n                            `}>\n                                <Panel>\n                                    <Form.Checkbox\n                                        name={FormFields.checked}\n                                        label=\"Kryss av for at du bare må krysse av denne checkboxen\"\n                                        validate={getCheckedValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateCheckedError.notChecked]: {\n                                            info: 'ikke valgt',\n                                            example: 'Du må krysse av for at du bare må gjøre det',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n\n                            <ValideringPanel\n                                title=\"TimeInput\"\n                                code={`\nexport enum ValidateTimeError {\n    timeHasNoValue = 'timeHasNoValue',\n    hoursAreInvalid = 'hoursAreInvalid',\n    hoursAreNegative = 'hoursAreNegative',\n    minutesAreInvalid = 'minutesAreInvalid',\n    minutesAreNegative = 'minutesAreNegative',\n    tooManyHours = 'tooManyHours',\n    tooManyMinutes = 'tooManyMinutes',\n    durationIsTooLong = 'durationIsTooLong',\n    durationIsTooShort = 'durationIsTooShort',\n}\n\ntype TimeValidationResult =\n    | undefined\n    | ValidateTimeError.timeHasNoValue\n    | ValidateTimeError.hoursAreInvalid\n    | ValidateTimeError.hoursAreNegative\n    | ValidateTimeError.minutesAreInvalid\n    | ValidateTimeError.minutesAreNegative\n    | ValidateTimeError.durationIsTooLong\n    | ValidateTimeError.durationIsTooShort\n    | ValidateTimeError.tooManyHours\n    | ValidateTimeError.tooManyMinutes;\n\ntype TimeRange = {\n    hours: number;\n    minutes: number;\n};\n\ninterface Options {\n    required?: boolean;\n    min?: TimeRange;\n    max?: TimeRange;\n}\n\nconst error = getTimeValidator()(value);\n                    `}>\n                                <Panel>\n                                    <Form.TimeInput\n                                        name={FormFields.time}\n                                        label=\"Hvor lenge var barnet i tilsyn 12.10.2020\"\n                                        validate={(time) => {\n                                            const error = getTimeValidator({\n                                                required: true,\n                                                min: { hours: 0, minutes: 1 },\n                                                max: { hours: 7, minutes: 30 },\n                                            })(time);\n                                            return error\n                                                ? {\n                                                      key: error,\n                                                      values: { dag: 'Torsdag 12.10.2000' },\n                                                      keepKeyUnaltered: true,\n                                                  }\n                                                : undefined;\n                                        }}></Form.TimeInput>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateTimeError.timeHasNoValue]: {\n                                            info: 'spørsmål er ikke besvart',\n                                            example: 'Du må fylle ut timer og minutter',\n                                        },\n                                        [ValidateTimeError.hoursAreInvalid]: {\n                                            info: 'ugyldig verdi i feltet for antall timer',\n                                            example: 'Antall timer er ikke et gyldig tall',\n                                        },\n                                        [ValidateTimeError.hoursAreNegative]: {\n                                            info: 'antall timer har negativ verdi',\n                                            example: 'Antall timer kan ikke være mindre enn 0',\n                                        },\n                                        [ValidateTimeError.minutesAreInvalid]: {\n                                            info: 'ugyldig verdi i feltet for antall minutter',\n                                            example: 'Antall minutter er ikke et gyldig tall',\n                                        },\n                                        [ValidateTimeError.minutesAreNegative]: {\n                                            info: 'antall minutter har negativ verdi',\n                                            example: 'Antall minutter kan ikke være mindre enn 0',\n                                        },\n                                        [ValidateTimeError.tooManyHours]: {\n                                            info: 'antall timer over 23',\n                                            example: 'Antall timer kan ikke overstige 23',\n                                        },\n                                        [ValidateTimeError.tooManyMinutes]: {\n                                            info: 'antall minutter over 59',\n                                            example: 'Antall minutter kan ikke overstige 59',\n                                        },\n                                        [ValidateTimeError.durationIsTooLong]: {\n                                            info: 'for lang tid',\n                                            example: 'Angitt varighet kan ikke være mer enn {maks}',\n                                        },\n                                        [ValidateTimeError.durationIsTooShort]: {\n                                            info: 'for kort tid',\n                                            example: 'Angitt varighet må være minst {min}',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default ValideringExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"@navikt/sif-common-formik\">\n            <h2>Typed formik wrapper for nav-frontend-skjema + validering</h2>\n            <p>\n                Sett av skjema-komponenter laget for team brukerdialog i sykdom-i-familien. Komponentene gjør det\n                enklere og raskere å sette opp skjemaløsninger hvor en bruker typescript, formik og nav-frontend-skjema,\n                og som sørger for at oppførsel og utéendet blir likt på tvers av brukerdialogene. For flere detaljer, se\n                kode.\n            </p>\n\n            <h3>Validering</h3>\n            <p>\n                Det er laget et sett med valideringsfunksjoner som en kan bruke sammen med skjemakomponentene. Disse\n                finner du på{' '}\n                <a href=\"#validering\" className=\"lenke\">\n                    denne siden\n                </a>\n                .{' '}\n            </p>\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport ValideringExample from '../examples/validering-example/ValideringExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'formik-example',\n        title: 'TypedFormExample',\n        renderContent: () => <FormikExample />,\n    },\n    {\n        path: 'validering',\n        title: 'Validering',\n        renderContent: () => <ValideringExample />,\n    },\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = () => {\n    const {\n        location: { pathname },\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent: React.FunctionComponent<Props> = ({ history }) => {\n    const {\n        location: { pathname },\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <nav className=\"asideContent\">\n                <LeftMenu />\n            </nav>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\nconst DevPage = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel tag=\"h1\">sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import React from 'react';\nimport '@formatjs/intl-pluralrules/locale-data/en';\nimport '@formatjs/intl-pluralrules/locale-data/nb';\nimport '@formatjs/intl-pluralrules/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Input } from 'nav-frontend-skjema';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport { getNumberFromNumberInputValue } from '../../utils/numberInputUtils';\nimport { hasValue } from '../../validation/validationUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined, isValidTime: boolean) => void;\n\nexport type TimeInputLayout = 'vertical' | 'horizontal';\n\nexport interface TimeInputLayoutProps {\n    direction?: TimeInputLayout;\n    compact?: boolean;\n    justifyContent?: 'left' | 'center' | 'right';\n    placeholders?: {\n        hours: string;\n        minutes: string;\n    };\n}\n\ninterface TimeInputProps extends TimeInputLayoutProps {\n    time?: Time | Partial<Time> | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    className?: string;\n    onChange: TimeInputChangeFunc;\n}\n\nconst bem = bemUtils('timeInput');\n\nexport const isValidTime = (time: Partial<Time>): time is Time => {\n    const hours = getNumberFromNumberInputValue(time.hours || '0');\n    const minutes = getNumberFromNumberInputValue(time.minutes || '0');\n    return hours !== undefined && minutes !== undefined;\n};\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    onChange(time, isValidTime(time));\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    direction: layout = 'normal',\n    compact = true,\n    justifyContent = 'center',\n    placeholders,\n    onChange,\n    className,\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n    return (\n        <div\n            className={bem.classNames(\n                bem.block,\n                bem.modifier(layout),\n                bem.modifier(`content-${justifyContent}`),\n                bem.modifierConditional('compact', compact),\n                bem.modifierConditional('withValue', hasValue(time.hours) || hasValue(time.minutes)),\n                bem.modifierConditional('withHours', hasValue(time.hours)),\n                bem.modifierConditional('withMinutes', hasValue(time.minutes)),\n                className\n            )}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <Input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"text\"\n                        autoComplete={'off'}\n                        inputMode={'numeric'}\n                        pattern={'[0-9]*'}\n                        placeholder={placeholders?.hours}\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={stateTime?.hours || ''}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = { ...stateTime, hours: evt.target.value };\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <Input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"text\"\n                        autoComplete={'off'}\n                        inputMode={'numeric'}\n                        placeholder={placeholders?.minutes}\n                        pattern={'[0-9]*'}\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={stateTime?.minutes || ''}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = { ...stateTime, minutes: evt.target.value };\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","const elementSelector = [\n    'a[href]',\n    'select:not([disabled])',\n    'input:not([disabled])',\n    'textarea:not([disabled])',\n    '[tabindex]',\n    'button:not([disabled])',\n];\n\nfunction nodelistToArray(nodes: NodeList): HTMLElement[] {\n    const arr: HTMLElement[] = [];\n    for (let i = nodes.length; i--; ) {\n        arr.unshift(nodes.item(i) as HTMLElement);\n    }\n    return arr;\n}\n\nconst tabEnabledSelectors = [`[tabIndex='0']`].concat(elementSelector);\nconst allTabIndexEnabledSelectors = [`[tabIndex]`].concat(elementSelector);\n\nexport function getFocusableElements(el: Element, onlyTabReachable = true): HTMLElement[] | undefined {\n    if (!el) {\n        return undefined;\n    }\n    if (onlyTabReachable) {\n        return nodelistToArray(el.querySelectorAll(tabEnabledSelectors.join(',')));\n    } else {\n        return nodelistToArray(el.querySelectorAll(allTabIndexEnabledSelectors.join(',')));\n    }\n}\n\nexport function focusFirstElement(el: Element) {\n    const elements = getFocusableElements(el);\n    if (elements && elements.length > 0) {\n        (elements[0] as HTMLElement).focus();\n    } else {\n        (el as HTMLElement).focus();\n    }\n}\n\nexport function focusLastElement(el: Element) {\n    const elements = getFocusableElements(el);\n    if (elements && elements.length > 0) {\n        (elements[elements.length - 1] as HTMLElement).focus();\n    } else {\n        (el as HTMLElement).focus();\n    }\n}\n","import React, { useRef } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\n\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput, { TimeInputLayoutProps } from './TimeInput';\nimport { focusFirstElement } from '../../utils/focusUtils';\nimport bemUtils from '../../utils/bemUtils';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n    timeInputLayout?: TimeInputLayoutProps;\n}\n\nexport type FormikTimeInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nconst bem = bemUtils('formikTimeInput');\n\nfunction FormikTimeInput<FieldName, ErrorType>({\n    label,\n    name,\n    validate,\n    feil,\n    timeInputLayout,\n    ...restProps\n}: FormikTimeInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const ref = useRef<any>();\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemagruppeQuestion\n                        tag={'div'}\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional(\n                                timeInputLayout?.direction,\n                                timeInputLayout?.direction !== undefined\n                            )\n                        )}\n                        ref={ref}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        id={name as any}\n                        onFocus={(evt) => {\n                            if (evt.target.id === ref.current.props.id) {\n                                focusFirstElement(evt.target);\n                            }\n                        }}\n                        legend={label}>\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            {...timeInputLayout}\n                            justifyContent=\"left\"\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element, Feilmelding } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport './formikInputGroup.less';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<ErrorType, FieldName> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikInputGroup<ErrorType, FieldName>({\n    legend,\n    name,\n    feil,\n    children,\n    validate,\n    className,\n    ...restProps\n}: FormikInputGroupProps<ErrorType, FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const isRenderableErrorMsgType = ['string', 'object'].includes(typeof feilProp);\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        className={`${className ? className : ''} singleInputWrapper`}>\n                        {children}\n                        {/** Må sette inn denne selv pga feil på SkjemaGruppe påvirker styling av alle elementer i gruppen*/}\n                        <div\n                            aria-live=\"polite\"\n                            className={`formikInputGroup__error ${\n                                isRenderableErrorMsgType ? 'formikInputGroup__error--with-message' : ''\n                            }`}>\n                            <div tabIndex={-1} id={field.name} className=\"focusable-feilmelding\">\n                                {isRenderableErrorMsgType && (\n                                    <div>\n                                        <Feilmelding>{feilProp}</Feilmelding>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps, Label, SkjemaelementFeilmelding } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport { guid } from 'nav-frontend-js-utils';\nimport './formikInput.less';\nimport bemUtils from '../../utils/bemUtils';\n\nexport interface InputWithSuffix {\n    suffix?: string;\n    suffixStyle?: 'box' | 'text';\n}\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nconst bem = bemUtils('formikInput');\n\nfunction FormikInput<FieldName, ErrorType>({\n    name,\n    feil,\n    id = guid(),\n    suffix,\n    suffixStyle = 'box',\n    label,\n    description,\n    validate,\n    autoComplete,\n    ...restProps\n}: FormikInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const harFeil = feilProp !== undefined;\n                const feilMessageId = `feil-${id}`;\n                if (suffix === undefined) {\n                    return (\n                        <Input\n                            {...restProps}\n                            {...field}\n                            id={id}\n                            description={description}\n                            label={label}\n                            autoComplete={autoComplete || 'off'}\n                            feil={feilProp}\n                            value={field.value === undefined ? '' : field.value}\n                        />\n                    );\n                }\n                return (\n                    <div\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional('withSuffix', suffix !== undefined),\n                            bem.modifier(`suffixStyle--${suffixStyle}`),\n                            bem.modifierConditional('fullbredde', restProps.bredde === 'fullbredde')\n                        )}>\n                        <Label htmlFor={id}>{label}</Label>\n                        {description && <div className=\"skjemaelement__description\">{description}</div>}\n                        <div className={bem.element('inputWrapper')}>\n                            <Input\n                                {...restProps}\n                                {...field}\n                                id={id}\n                                autoComplete={autoComplete || 'off'}\n                                feil={harFeil}\n                                aria-errormessage={feilMessageId}\n                                value={field.value === undefined ? '' : field.value}\n                            />\n                            {suffix && (\n                                <span className={bem.element('suffix', suffixStyle)} aria-hidden={true}>\n                                    {suffix}\n                                </span>\n                            )}\n                        </div>\n                        <SkjemaelementFeilmelding id={`feil-${id}`}>\n                            {getFeilPropForFormikInput({ field, form, context, feil })}\n                        </SkjemaelementFeilmelding>\n                    </div>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(_evt, value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        radios={radios.map((rb) => {\n                            return {\n                                name: `${name}`,\n                                autoComplete: 'off',\n                                'aria-invalid': undefined,\n                                ...rb,\n                            };\n                        })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","export const getNumberFromNumberInputValue = (inputValue: string | undefined): number | undefined => {\n    if (inputValue === undefined || inputValue === '' || Array.isArray(inputValue)) {\n        return undefined;\n    }\n    if (typeof inputValue === 'number' && isNaN(inputValue)) {\n        return undefined;\n    }\n    const value = `${inputValue}`.replace(/\\,/g, '.');\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n        return undefined;\n    }\n    return numValue;\n};\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCheckbox<FieldName, ErrorType>({\n    name,\n    validate,\n    afterOnChange,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        autoComplete=\"off\"\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return fieldValues.includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value),\n                            autoComplete: 'off',\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(_evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    Omit<TypedFormInputValidationProps<FieldName, ErrorType>, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName, ErrorType>({\n    children,\n    name,\n    feil,\n    validate,\n    inputProps,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        inputProps={{ ...inputProps, autoComplete: 'off' }}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    return countries.getName(alphaCode, locale);\n};\n\nexport const getCountries = () => countries;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport FormikInputGroup from '../formik-input-group/FormikInputGroup';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName, ErrorType>\n    extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    legend?: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    toDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    description?: React.ReactNode;\n}\n\nfunction FormikDateIntervalPicker<FieldName, ErrorType>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    description,\n    validate,\n}: DateIntervalPickerProps<FieldName, ErrorType>) {\n    const name = `${fromDatepickerProps.name}_${toDatepickerProps.name}` as any;\n    return (\n        <FormikInputGroup\n            name={name}\n            validate={validate ? (value) => validate(value, name) : undefined}\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName, ErrorType> {...toDatepickerProps} />\n            </div>\n        </FormikInputGroup>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport FormikInput, { InputWithSuffix } from '../formik-input/FormikInput';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'type' | 'pattern' | 'inputMode' | 'min' | 'max'> {\n    name: FieldName;\n    integerValue?: boolean;\n}\n\nexport type FormikNumberInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nfunction FormikNumberInput<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    autoComplete,\n    bredde = 'S',\n    integerValue = false,\n    ...restProps\n}: FormikNumberInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <FormikInput\n                        {...restProps}\n                        {...field}\n                        type=\"text\"\n                        bredde={bredde}\n                        autoComplete={autoComplete || 'off'}\n                        inputMode={integerValue ? 'numeric' : 'text'}\n                        pattern={integerValue ? '[0-9]*' : undefined}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikNumberInput;\n","import React, { useContext } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Radio, RadioGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n}\n\nexport type FormikRadioGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    ...restProps\n}: FormikRadioGroupProps<FieldName, ErrorType>) {\n    const context = useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioGruppe {...restProps} feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {radios.map((rb, idx) => {\n                            const isSelected = field.value === rb.value;\n                            return (\n                                <Radio\n                                    key={idx}\n                                    {...rb}\n                                    name={name as any}\n                                    checked={isSelected}\n                                    autoComplete=\"off\"\n                                    onChange={(evt) => {\n                                        form.setFieldValue(field.name, evt.target.value);\n                                        if (context) {\n                                            context.onAfterFieldValueSet();\n                                        }\n                                    }}\n                                />\n                            );\n                        })}\n                    </RadioGruppe>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikSelect<FieldName, ErrorType>({\n    name,\n    children,\n    validate,\n    feil,\n    ...restProps\n}: FormikSelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        autoComplete=\"off\"\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikTextarea<FieldName, ErrorType>({\n    name,\n    validate,\n    feil,\n    ...restProps\n}: FormikTextareaProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        autoComplete=\"off\"\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","import React from 'react';\nimport { TypedFormInputValidationProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from '../formik-radio-panel-group/FormikRadioPanelGroup';\n\nexport interface FormikYesOrNoQuestionProps<FieldName, ErrorType>\n    extends Omit<FormikRadioPanelGroupProps<FieldName, ErrorType>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    useTwoColumns?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName, ErrorType>({\n    name,\n    includeDoNotKnowOption,\n    labels,\n    useTwoColumns = true,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName, ErrorType> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName, ErrorType>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : []),\n            ]}\n            {...restProps}\n            name={name}\n            useTwoColumns={includeDoNotKnowOption ? false : useTwoColumns}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps,\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps,\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, { FormikCountrySelectProps } from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps,\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDateRangePicker, { FormikDateRangePickerProps } from './formik-date-range-picker/FormikDateRangePicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikNumberInput, { FormikNumberInputProps } from './formik-number-input/FormikNumberInput';\nimport FormikRadioGroup, { FormikRadioGroupProps } from './formik-radio-group/FormikRadioGroup';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikTimeInput, { FormikTimeInputProps } from './formik-time-input/FormikTimeInput';\nimport FormikYesOrNoQuestion, { FormikYesOrNoQuestionProps } from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, { TypedFormikWrapperProps } from './typed-formik-wrapper/TypedFormikWrapper';\nimport '../styles/nav-frontend-skjema-extension.less';\n\nexport function getTypedFormComponents<FieldName, FormValues, ErrorType = string>() {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldName, ErrorType>) => (\n            <FormikCheckbox<FieldName, ErrorType> {...props} />\n        ),\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikCheckboxPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) => (\n            <FormikConfirmationCheckboxPanel<FieldName, ErrorType> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldName, ErrorType>) => (\n            <FormikCountrySelect<FieldName, ErrorType> {...props} />\n        ),\n        DatePicker: (props: FormikDatepickerProps<FieldName, ErrorType>) => (\n            <FormikDatepicker<FieldName, ErrorType> {...props} />\n        ),\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldName, ErrorType>) => (\n            <FormikDateIntervalPicker<FieldName, ErrorType> {...props} />\n        ),\n        DateRangePicker: (props: FormikDateRangePickerProps<FieldName, ErrorType>) => (\n            <FormikDateRangePicker<FieldName, ErrorType> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldName>) => <FormikFileInput<FieldName, ErrorType> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues, ErrorType>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldName, ErrorType>) => <FormikInput<FieldName, ErrorType> {...props} />,\n        NumberInput: (props: FormikNumberInputProps<FieldName, ErrorType>) => (\n            <FormikNumberInput<FieldName, ErrorType> {...props} />\n        ),\n        InputGroup: (props: FormikInputGroupProps<ErrorType, FieldName>) => (\n            <FormikInputGroup<ErrorType, FieldName> {...props} />\n        ),\n        RadioGroup: (props: FormikRadioGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioGroup<FieldName, ErrorType> {...props} />\n        ),\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldName, ErrorType>) => <FormikSelect<FieldName, ErrorType> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldName, ErrorType>) => (\n            <FormikTextarea<FieldName, ErrorType> {...props} />\n        ),\n        TimeInput: (props: FormikTimeInputProps<FieldName, ErrorType>) => (\n            <FormikTimeInput<FieldName, ErrorType> {...props} />\n        ),\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldName, ErrorType>) => (\n            <FormikYesOrNoQuestion<FieldName, ErrorType> {...props} />\n        ),\n    };\n}\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        const { current } = summaryEl;\n        if (current !== null) {\n            current.focus();\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            innerRef={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllFieldsWithErrors, getErrorForField } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const fieldsWithErrors =\n            !formik.isValid && getAllFieldsWithErrors(formik.errors, context.isHandledErrorTypeChecker);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = fieldsWithErrors\n            ? fieldsWithErrors.map((fieldName) => {\n                  const error = getErrorForField(fieldName, formik.errors);\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorHandler ? context.fieldErrorHandler(error, fieldName) : error,\n                      skjemaelementId: fieldName,\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import React from 'react';\n\nfunction UploadSvg(props: any) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <SkjemagruppeQuestion\n                feil={feil}\n                className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\" // eslint-disable-line\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </SkjemagruppeQuestion>\n        );\n    }\n}\n","import React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName, ErrorType>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick,\n}: FormikFileInputProps<FieldName> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (\n    onluEuAndEftaCountries: boolean,\n    locale: string,\n    useAlpha3Code = true\n): React.ReactNode[] => {\n    const lang = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n\n    const names: [string, any][] = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[0], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option\n                key={countryOptionValue[0]}\n                value={useAlpha3Code ? countries.alpha2ToAlpha3(countryOptionValue[0]) : countryOptionValue[0]}>\n                {countryOptionValue[1]}\n            </option>\n        ));\n};\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale,\n                this.props.useAlpha3Code\n            ),\n        };\n    }\n\n    getCountryOptions(locale: string): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, useAlpha3Code, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)} autoComplete=\"off\">\n                <option value=\"\" />\n                {this.getCountryOptions(locale || 'nb')}\n            </Select>\n        );\n    }\n}\n\nexport default CountrySelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCountrySelect<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    label,\n    useAlpha3Code = true,\n    showOnlyEuAndEftaCountries,\n}: FormikCountrySelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        {...field}\n                        label={label}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                        useAlpha3Code={useAlpha3Code}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(width))}>{children}</div>\n);\n\nexport default DialogFormWrapper;\n","import React from 'react';\nimport NFModal from 'nav-frontend-modal';\nimport './modal.less';\n\nexport interface ModalProps {\n    className?: string;\n    isOpen: boolean;\n    onRequestClose: () => void;\n    contentLabel: string;\n    shouldCloseOnOverlayClick?: boolean;\n}\n\nconst Modal: React.FunctionComponent<ModalProps> = ({\n    isOpen,\n    onRequestClose,\n    contentLabel,\n    className,\n    shouldCloseOnOverlayClick = false,\n    children,\n}) => (\n    <NFModal\n        className={`modal ${className ? className : ''}`}\n        isOpen={isOpen}\n        shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n        contentLabel={contentLabel}\n        onRequestClose={onRequestClose}>\n        <article className=\"modal__content\">{children}</article>\n    </NFModal>\n);\n\nexport default Modal;\n"],"sourceRoot":""}