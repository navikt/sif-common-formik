{"version":3,"sources":["dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","common/formik/form-components/formik-wrapper/FormikWrapper.tsx","dev/components/code/Code.tsx","dev/components/code/Comp.tsx","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","common/formik/components/button-row/ButtonRow.tsx","common/formik/components/validation-summary/ValidationErrorLink.tsx","common/formik/components/validation-summary/ValidationSummary.tsx","common/formik/utils/formikErrorUtils.ts","common/formik/form-components/formik-form/FormikForm.tsx","common/formik/components/country-select/CountrySelect.tsx","common/formik/components/label-with-info/LabelWithInfo.tsx","common/formik/form-components/inputs/formik-country-select/FormikCountrySelect.tsx","common/formik/components/custom-input/CustomInput.tsx","common/formik/form-components/inputs/formik-datepicker/datepickerUtils.ts","common/formik/form-components/inputs/formik-datepicker/FormikDatepicker.tsx","common/formik/form-components/inputs/formik-input/FormikInput.tsx","dev/components/tiles/Tiles.tsx","dev/modules/validation/fieldValidationRenderUtils.ts","dev/modules/visibility/QuestionVisibilityContext.ts","dev/modules/visibility/VisibilityBlock.tsx","common/formik/types/YesOrNo.ts","dev/modules/visibility/QuestionWrapper.tsx","dev/validation/mod11.ts","dev/validation/fødselsnummerValidator.ts","dev/validation/fieldValidations.ts","dev/validation/hasValue.ts","dev/examples/formik-example/types.ts","dev/modules/visibility/questions/Questions.ts","dev/validation/yesOrNoIsAnswered.ts","dev/examples/formik-example/config.ts","common/formik/form-components/getTypedFormComponents.tsx","dev/examples/formik-example/FormWithConfig.tsx","dev/examples/formik-example/FormikExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["appMessages","nb","nn","AppIntlProvider","locale","onError","children","messages","NAVLogo","props","className","width","viewBox","fill","fillRule","d","FormikWrapper","onSubmit","initialValues","renderFormContent","renderForm","restProps","formik","Code","style","isFormik","isLayout","margin","display","padding","backgroundColor","fontSize","fontFamily","undefined","Comp","title","actions","marginBottom","marginLeft","borderTopLeftRadius","borderTopRightRadius","border","borderTop","tag","bemUtils","cls","block","element","e","m","modifier","modifierConditional","condition","child","c","classNames","bem","bemHelper","Box","padBottom","textAlignCenter","PageIntro","ButtonRow","align","layout","React","map","knapp","index","key","ValidationErrorLink","onClick","href","evt","stopPropagation","preventDefault","stopClickEvent","ValidationSummary","errorMessages","summaryEl","useRef","useEffect","current","node","findDOMNode","focus","ref","tittel","feil","customFeilRender","elementById","document","getElementById","skjemaelementId","elementByName","getElementsByName","feilmelding","isValidationErrorsVisible","form","formikStatus","status","submitCount","stepSubmitCount","showErrors","flattenFieldArrayErrors","errors","allErrors","Object","keys","forEach","error","isFieldArrayErrors","err","idx","field","fieldArrayKey","getErrorsFromFieldArrayErrors","errorNode","findErrorNodeInObject","flatError","flatten","length","split","values","unflatten","FormikFormContext","createContext","FormikForm","onCancel","resetFormOnCancel","includeValidationSummary","labels","errorRender","includeButtons","handleSubmit","setStatus","resetForm","useState","formSubmitCount","numberOfErrors","message","push","getValidationSummaryErrors","noValidate","Provider","value","renderFieldError","context","elementName","getIn","getFieldValidationErrors","name","marginTop","type","htmlType","submitButton","cancelButton","countries","require","CountrySelect","countryOptionsCache","getCountryOptions","bind","updateCache","this","options","createCountryOptions","showOnlyEuAndEftaCountries","onChange","target","onluEuAndEftaCountries","localeToUse","entries","sort","a","b","localeCompare","filter","countryOptionValue","shouldFilter","filteredListEØSCountries","LabelWithInfo","info","FormikCountrySelect","label","validate","setFieldValue","CustomInput","dateToISOFormattedDateString","date","moment","utc","format","datepickerUtils","getDateStringFromValue","ISO_8601","isValid","toDate","getDateFromDateString","dateString","Date","parseDateLimitations","dateLimitations","maksDato","minDato","helgedagerIkkeTillatt","ugyldigeTidsperioder","t","fom","tom","FormikDatepicker","id","showYearSelector","fullscreenOverlay","fullScreenOnMobile","isWide","useMedia","minWidth","elementId","guid","plassering","inputName","htmlFor","input","placeholder","valgtDato","avgrensninger","visÅrVelger","kalender","FormikInput","Tiles","columns","renderFieldValidationError","intl","formatMessage","parsedValues","valueOrFunc","renderFieldValidationValues","QuestionVisibilityContext","VisibilityBlock","YesOrNo","fieldName","Consumer","visibility","isVisible","QuestionWrapper","FødselsnummerValidationErrorReason","FieldValidationErrors","hasValue","v","FormFields","fieldIsRequiredError","createFieldValidationError","påkrevd","validateRequiredField","isQuestionVisible","questions","question","payload","config","isIncluded","visibilityFilter","parentQuestion","isAnswered","yesOrNoIsAnswered","answer","YES","NO","FormConfig","birthdate","birthCountry","firstname","lastname","isOptional","hasKids","numberOfKids","isNaN","hasBeenAbroadWithKids","exampleFormQuestions","getVisbility","isQuestionAnswered","areAllQuestionsAnswered","allQuestionsHasAnswers","Form","Input","DatePicker","FormWithConfig","useIntl","FormikExample","view","setView","console","log","tabs","aktiv","Intro","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","to","DevContent","routeConfig","find","f","getRouteConfig","maxWidth","DevPage","App","Modal","setAppElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.e9f0eda9.chunk.js","sourcesContent":["export const appMessages = {\n    nb: {},\n    nn: {}\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules/dist/locale-data/en';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: string;\n}\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { Formik, FormikProps } from 'formik';\n\ninterface Props<FormValues> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\nfunction FormikWrapper<FormValues>(props: Props<FormValues> & Partial<FormikProps<FormValues>>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>> initialValues={initialValues} onSubmit={onSubmit} {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default FormikWrapper;\n","import React, { HTMLAttributes } from 'react';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n    isFormik?: boolean;\n    isLayout?: boolean;\n}\n\nconst Code: React.FunctionComponent<Props> = ({ children, style, isFormik, isLayout }) => (\n    <div style={{ margin: '.5rem 0', ...style }}>\n        <code\n            style={{\n                display: 'inline-block',\n                padding: '.25rem .5rem',\n                backgroundColor: isFormik ? '#E0DAE7' : '#E9E7E7',\n                fontSize: '.875rem',\n                ...(isLayout ? { fontFamily: 'cursive' } : undefined),\n                ...style\n            }}>\n            {children}\n        </code>\n    </div>\n);\n\nexport default Code;\n","import React from 'react';\nimport { Panel } from 'nav-frontend-paneler';\nimport { Element } from 'nav-frontend-typografi';\nimport Code from './Code';\n\ninterface Props {\n    title: string;\n    actions?: string;\n    isFormik?: boolean;\n    isLayout?: boolean;\n}\n\nconst Comp: React.FunctionComponent<Props> = ({ title, children, actions, isFormik, isLayout }) => (\n    <div>\n        <Code\n            isFormik={isFormik}\n            isLayout={isLayout}\n            style={{\n                marginBottom: '0px',\n                marginLeft: '.125rem',\n                borderTopLeftRadius: '.25rem',\n                borderTopRightRadius: '.25rem'\n            }}>\n            {title}\n        </Code>\n        <Panel border={true} style={{ padding: '1rem  1rem 1rem 1rem' }}>\n            {children}\n            {actions && (\n                <Panel\n                    style={{\n                        margin: '1rem -1rem -1rem -1rem',\n                        padding: '.5rem 1rem',\n                        borderTop: '1px dashed #B7B1A9'\n                    }}>\n                    <Element tag=\"span\">Actions:{` `}</Element>\n                    <Code style={{ display: 'inline-block', margin: 'none' }} isFormik={isFormik} isLayout={isLayout}>\n                        {actions}\n                    </Code>\n                </Panel>\n            )}\n        </Panel>\n    </div>\n);\n\nexport default Comp;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames\n});\n\nexport default bemUtils;\n","import * as React from 'react';\n\nimport bemHelper from '../../utils/bemUtils';\n\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && <Ingress tag=\"div\">{children}</Ingress>}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import * as React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    children: React.ReactNode;\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.StatelessComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef(null);\n    useEffect(() => {\n        if (summaryEl.current !== null) {\n            const node: any = findDOMNode(summaryEl.current);\n            if (node && node.focus) {\n                node.focus();\n            }\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            ref={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import flatten from 'flat';\nimport { FormikErrors, FormikProps, getIn } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\n\ninterface ErrorNodeInObject {\n    field: string;\n    error: {\n        key: string;\n        values: object;\n    };\n}\n\nexport const getFieldValidationErrors = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): FormikErrors<FormValues> | undefined => {\n    return getIn(errors, elementName);\n};\n\n// export const getFieldErrorMessage = (\n//     field: FieldInputProps<any>,\n//     form: FormikProps<any>,\n//     intl: IntlShape\n// ): React.ReactNode | undefined => {\n//     if (isValidationErrorsVisible(form)) {\n//         return getValidationErrorWithIntl(intl, form.errors, field.name);\n//     }\n//     return undefined;\n// };\n\nexport const isValidationErrorsVisible = (form: FormikProps<any>): boolean => {\n    if (form) {\n        const { status: formikStatus, submitCount } = form;\n        return formikStatus !== undefined && formikStatus.stepSubmitCount !== undefined\n            ? submitCount > formikStatus.stepSubmitCount\n            : formikStatus?.showErrors === true;\n    }\n    return true;\n};\n\nexport function resetFieldValue<T extends string, FormDataType>(\n    fieldName: T,\n    setFieldValue: (field: string, value: any) => void,\n    initialValues: FormDataType\n) {\n    setFieldValue(fieldName, initialValues[fieldName as string]);\n}\n\nexport function resetFieldValues<T extends string, FormDataType>(\n    fieldNames: T[],\n    setFieldValue: (field: string, value: any) => void,\n    initialValues: FormDataType\n) {\n    fieldNames.forEach((fieldName) => resetFieldValue(fieldName, setFieldValue, initialValues));\n}\n\nexport function flattenFieldArrayErrors<FormValues>(errors: FormValues): FormValues {\n    let allErrors: any = {};\n    Object.keys(errors).forEach((key) => {\n        const error = errors[key];\n        if (isFieldArrayErrors(error)) {\n            (error as FormValues[]).forEach((err, idx) => {\n                allErrors = {\n                    ...allErrors,\n                    ...getErrorsFromFieldArrayErrors(err, key, idx)\n                };\n            });\n        } else if (error.key) {\n            allErrors[key] = error;\n        } else if (typeof error === 'object') {\n            const errorNode = findErrorNodeInObject(key, error);\n            if (errorNode) {\n                allErrors[errorNode.field] = errorNode.error;\n            }\n        }\n    });\n    return allErrors;\n}\n\nconst findErrorNodeInObject = (key: string, error: object): undefined | ErrorNodeInObject => {\n    const flatError: object = flatten({ [key]: error });\n    const keys = Object.keys(flatError);\n    if (keys.length === 2) {\n        const field = keys[0].split('.key')[0];\n        return {\n            field,\n            error: {\n                key: flatError[keys[0]],\n                values: flatten.unflatten(flatError[keys[1]])\n            }\n        };\n    }\n    return undefined;\n};\n\nconst isFieldArrayErrors = (error: any): boolean => {\n    if (typeof error === 'object' && error.length && error.length > 0) {\n        return true;\n    }\n    return false;\n};\n\nfunction getErrorsFromFieldArrayErrors<FieldName>(field: FieldName, fieldArrayKey: string, index: number): {} {\n    const errors: any = {};\n    Object.keys(field).forEach((key) => {\n        errors[`${fieldArrayKey}.${index}.${key}`] = field[key];\n    });\n    return errors;\n}\n\n// export function getValidationSummaryErrorsWithIntl<FormValues>(\n//     formik: FormikProps<FormValues>,\n//     intl: IntlShape\n// ): FeiloppsummeringFeil[] | undefined {\n//     const { errors } = formik;\n//     if (errors) {\n//         const numberOfErrors = Object.keys(errors).length;\n//         const errorMessages: FeiloppsummeringFeil[] = [];\n\n//         if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n//             const allErrors = flattenFieldArrayErrors(errors);\n//             Object.keys(allErrors).forEach((key) => {\n//                 const error = allErrors[key];\n//                 const message = isFieldValidationError(error) ? renderFieldValidationError(intl, error) : error;\n//                 if (message && typeof message === 'string') {\n//                     errorMessages.push({\n//                         skjemaelementId: key,\n//                         feilmelding: message\n//                     });\n//                 }\n//             });\n\n//             if (errorMessages.length > 0) {\n//                 return errorMessages;\n//             }\n//         }\n//     }\n//     return undefined;\n// }\n\nexport function getValidationSummaryErrors<FormValues>(\n    formik: FormikProps<FormValues>\n): FeiloppsummeringFeil[] | undefined {\n    const { errors } = formik;\n    if (errors) {\n        const numberOfErrors = Object.keys(errors).length;\n        const errorMessages: FeiloppsummeringFeil[] = [];\n\n        if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n            const allErrors = flattenFieldArrayErrors(errors);\n            Object.keys(allErrors).forEach((key) => {\n                const message = allErrors[key];\n                if (message && typeof message === 'string') {\n                    errorMessages.push({\n                        skjemaelementId: key,\n                        feilmelding: message\n                    });\n                }\n            });\n            if (errorMessages.length > 0) {\n                return errorMessages;\n            }\n        }\n    }\n    return undefined;\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { FieldInputProps, FormikErrors, FormikProps } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport ButtonRow from '../../components/button-row/ButtonRow';\nimport ValidationSummary from '../../components/validation-summary/ValidationSummary';\nimport {\n    getFieldValidationErrors, getValidationSummaryErrors, isValidationErrorsVisible\n} from '../../utils/formikErrorUtils';\n\nexport type FormikErrorRender<FormValues, ErrorFormat = {}> = (\n    error: ErrorFormat | FormikErrors<FormValues>\n) => React.ReactNode | string;\n\nexport interface FormikFormProps<FormValues, ErrorFormat = FormikErrors<FormValues>> {\n    formik: FormikProps<FormValues>;\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    errorRender?: FormikErrorRender<FormValues, ErrorFormat>;\n    resetFormOnCancel?: boolean;\n    labels?: {\n        submitButton?: string;\n        cancelButton?: string;\n    };\n    onCancel?: () => void;\n}\n\ninterface FormikFormContextType {\n    errorRender?: FormikErrorRender<any>;\n    showErrors: boolean;\n    renderFieldError: (\n        field: FieldInputProps<any>,\n        form: FormikProps<any>,\n        context?: FormikFormContextType\n    ) => React.ReactNode | boolean | undefined;\n}\n\nexport const FormikFormContext = createContext<FormikFormContextType | undefined>(undefined);\n\nfunction FormikForm<FormValues, ErrorFormat = FormikErrors<FormValues>>({\n    formik,\n    children,\n    onCancel,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    labels,\n    errorRender,\n    includeButtons = true\n}: FormikFormProps<FormValues, ErrorFormat>) {\n    const { handleSubmit, submitCount, setStatus, resetForm } = formik;\n    const [formSubmitCount] = useState(submitCount);\n\n    useEffect(() => {\n        if (submitCount > formSubmitCount) {\n            setStatus({ showErrors: true });\n        } else {\n            setStatus({ showErrors: false });\n        }\n    }, [submitCount, setStatus, formSubmitCount]);\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        handleSubmit(evt);\n    };\n\n    const errorMessages = includeValidationSummary ? getValidationSummaryErrors(formik) : undefined;\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className}>\n            <FormikFormContext.Provider\n                value={{\n                    errorRender,\n                    showErrors: isValidationErrorsVisible(formik),\n                    renderFieldError: (field, form, context) => {\n                        if (context && context.showErrors) {\n                            const errors = getFieldValidationErrors(field.name, form.errors);\n                            if (errors) {\n                                return context.errorRender ? context.errorRender(errors) : true;\n                            }\n                        }\n                        return undefined;\n                    }\n                }}>\n                {children}\n                {errorMessages && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ValidationSummary errorMessages={errorMessages} />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout=\"stretch\">\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {labels?.submitButton || 'Submit'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type=\"flat\"\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {labels?.cancelButton || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n            </FormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default FormikForm;\n","import * as React from 'react';\nimport * as countries from 'i18n-iso-countries';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst isoCodeIndex = 0;\nconst countryNameIndex = 1;\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale\n            )\n        };\n    }\n\n    getCountryOptions(locale): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)}>\n                <option value=\"\" />\n                {this.getCountryOptions(locale)}\n            </Select>\n        );\n    }\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (onluEuAndEftaCountries: boolean, locale: string): React.ReactNode[] => {\n    const localeToUse = locale === 'en' ? 'nn' : 'nb';\n    return Object.entries(countries.getNames(localeToUse))\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], localeToUse))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[isoCodeIndex], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option key={countryOptionValue[isoCodeIndex]} value={countryOptionValue[isoCodeIndex]}>\n                {countryOptionValue[countryNameIndex]}\n            </option>\n        ));\n};\n\nexport const getCountryName = (isoCode: string, locale: string): string => {\n    const names = countries.getNames(locale);\n    return names[isoCode];\n};\n\nexport default CountrySelect;\n","import * as React from 'react';\nimport Hjelpetekst from 'nav-frontend-hjelpetekst';\nimport { Element } from 'nav-frontend-typografi';\nimport './labelWithInfo.less';\n\ninterface LabelWithHelperText {\n    children: React.ReactNode;\n    info?: React.ReactNode;\n}\n\nconst LabelWithInfo: React.FunctionComponent<LabelWithHelperText> = ({ children, info }) => {\n    if (!children) {\n        return null;\n    }\n    if (info === undefined) {\n        return <Element tag=\"span\">{children}</Element>;\n    }\n    return (\n        <Element tag=\"span\" className=\"labelWithInfo\">\n            {children}\n            {info && <Hjelpetekst className=\"labelWithInfo__info\">{info}</Hjelpetekst>}\n        </Element>\n    );\n};\n\nexport default LabelWithInfo;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport CountrySelect from '../../../components/country-select/CountrySelect';\nimport LabelWithInfo from '../../../components/label-with-info/LabelWithInfo';\nimport { FormikInputCommonProps } from '../../../types/FormikInputCommonProps';\nimport { FormikFormContext } from '../../formik-form/FormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName> = OwnProps<FieldName> & FormikInputCommonProps;\n\nfunction FormikCountrySelect<FieldName>({\n    label,\n    name,\n    feil,\n    validate,\n    info,\n    showOnlyEuAndEftaCountries\n}: FormikCountrySelectProps<FieldName>) {\n    const context = React.useContext(FormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...field}\n                        feil={context ? context.renderFieldError(field, form, context) : feil}\n                        onChange={(value) => form.setFieldValue(field.name, value)}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import React from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport './customInput.less';\n\nconst CustomInput: React.FunctionComponent<SkjemaGruppeProps> = ({ feil, children }) => (\n    <SkjemaGruppe className=\"singleInputWrapper\" tag=\"div\" feil={feil}>\n        {children}\n    </SkjemaGruppe>\n);\n\nexport default CustomInput;\n","import moment from 'moment';\nimport { DatovelgerAvgrensninger } from 'nav-datovelger';\nimport { DateLimitiations } from './FormikDatepicker';\n\nconst apiDateFormat = 'YYYY-MM-DD';\n\nexport const dateToISOFormattedDateString = (date?: Date) =>\n    date ? moment.utc(date).format(apiDateFormat) : undefined;\n\nconst parseDateLimitations = (dateLimitations: DateLimitiations): DatovelgerAvgrensninger => {\n    return {\n        maksDato: dateToISOFormattedDateString(dateLimitations.maksDato),\n        minDato: dateToISOFormattedDateString(dateLimitations.minDato),\n        helgedagerIkkeTillatt: dateLimitations.helgedagerIkkeTillatt,\n        ugyldigeTidsperioder:\n            dateLimitations.ugyldigeTidsperioder &&\n            dateLimitations.ugyldigeTidsperioder.map((t: { fom: Date; tom: Date }) => ({\n                fom: dateToISOFormattedDateString(t.fom)!,\n                tom: dateToISOFormattedDateString(t.tom)!\n            }))\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (moment(value, moment.ISO_8601, true).isValid()) {\n            date = moment(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOFormattedDateString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string): Date | undefined =>\n    dateString && dateString !== 'Invalid date' ? new Date(dateString) : undefined;\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations\n};\n\nexport default datepickerUtils;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport Datovelger from 'nav-datovelger/dist/datovelger/Datovelger';\nimport useMedia from 'use-media';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport CustomInput from '../../../components/custom-input/CustomInput';\nimport LabelWithInfo from '../../../components/label-with-info/LabelWithInfo';\nimport { FieldValidationError } from '../../../types/FieldValidationError';\nimport { FormikInputCommonProps } from '../../../types/FormikInputCommonProps';\nimport { FormikFormContext } from '../../formik-form/FormikForm';\nimport datepickerUtils from './datepickerUtils';\n\ninterface DateRange {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface DateLimitiations {\n    minDato?: Date;\n    maksDato?: Date;\n    ugyldigeTidsperioder?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n}\ninterface OwnProps<FieldName> {\n    id?: string;\n    name: FieldName;\n    label: string;\n    dateLimitations?: DateLimitiations;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    disabled?: boolean;\n    showYearSelector?: boolean;\n    feil?: FieldValidationError;\n    onChange?: (date: Date | undefined) => void;\n}\n\nexport type FormikDatepickerProps<FieldName> = OwnProps<FieldName> & FormikInputCommonProps;\n\nconst placeholder = 'dd.mm.åååå';\n\nfunction FormikDatepicker<FieldName>({\n    validate,\n    label,\n    dateLimitations,\n    name,\n    id,\n    info,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    onChange,\n    ...restProps\n}: FormikDatepickerProps<FieldName>) {\n    const context = React.useContext(FormikFormContext);\n    const isWide = useMedia({ minWidth: 736 });\n    const elementId = id || guid();\n    const plassering = fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullskjerm' : undefined;\n    const inputName = (name || '') as string;\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput feil={context ? context.renderFieldError(field, form, context) : feil}>\n                        <Label htmlFor={field.name}>\n                            <LabelWithInfo info={info}>{label}</LabelWithInfo>\n                        </Label>\n                        <Datovelger\n                            id={elementId}\n                            {...restProps}\n                            input={{ name: inputName, placeholder, id: elementId }}\n                            valgtDato={datepickerUtils.getDateStringFromValue(field.value)}\n                            avgrensninger={\n                                dateLimitations ? datepickerUtils.parseDateLimitations(dateLimitations) : undefined\n                            }\n                            visÅrVelger={showYearSelector}\n                            kalender={{\n                                plassering\n                            }}\n                            onChange={(dateString: string) => {\n                                const date = datepickerUtils.getDateFromDateString(dateString);\n                                if (field.value !== date) {\n                                    form.setFieldValue(field.name, date);\n                                    if (onChange) {\n                                        onChange(date);\n                                    }\n                                }\n                            }}\n                        />\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps } from 'nav-frontend-skjema';\nimport LabelWithInfo from '../../../components/label-with-info/LabelWithInfo';\nimport { FormikInputCommonProps } from '../../../types/FormikInputCommonProps';\nimport { FormikFormContext } from '../../formik-form/FormikForm';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikInputProps<FieldName> = OwnProps<FieldName> & FormikInputCommonProps;\n\nfunction FormikInput<FieldName>({ label, name, info, feil, validate, ...restProps }: FormikInputProps<FieldName>) {\n    const context = React.useContext(FormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Input\n                        {...restProps}\n                        {...field}\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        feil={context ? context.renderFieldError(field, form, context) : feil}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import * as React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\n\nconst Tiles: React.StatelessComponent<{ columns?: 1 | 2 | 3 | 'flex' }> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import { IntlShape } from 'react-intl';\nimport { FieldValidationError, FieldValidationResultValues } from './types';\n\nexport const isFieldValidationError = (error: any): error is FieldValidationError =>\n    typeof error === 'object' && error.key !== undefined;\n\nexport const renderFieldValidationValues = (\n    intl: IntlShape,\n    values?: FieldValidationResultValues\n): { [key: string]: string } | undefined => {\n    if (values === undefined) {\n        return undefined;\n    }\n    const parsedValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc !== undefined) {\n            parsedValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return parsedValues;\n};\n\nexport const renderFieldValidationError = (intl: IntlShape, error: FieldValidationError): string => {\n    return intl.formatMessage({ id: error.key }, renderFieldValidationValues(intl, error.values));\n};\n","import { createContext } from 'react';\nimport { QuestionVisibility } from './questions/Questions';\n\ninterface VisibilityContext<FieldName> {\n    visibility: QuestionVisibility<FieldName>;\n}\n\nexport const QuestionVisibilityContext = createContext<VisibilityContext<any> | undefined>(undefined);\n","import React from 'react';\nimport { QuestionVisibilityContext } from './QuestionVisibilityContext';\n\ninterface Props<FormFields> {\n    fieldName: FormFields;\n    children: React.ReactNode;\n}\n\nfunction VisibilityBlock<FormFields>({ fieldName, children }: Props<FormFields>) {\n    return (\n        <QuestionVisibilityContext.Consumer>\n            {(value) => <>{value?.visibility.isVisible(fieldName) && <>{children}</>}</>}\n        </QuestionVisibilityContext.Consumer>\n    );\n}\n\nexport default VisibilityBlock;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow'\n}\n","import React from 'react';\nimport VisibilityBlock from './VisibilityBlock';\n\ninterface Props {\n    fieldName: string;\n    children: React.ReactNode;\n}\n\nconst QuestionWrapper: React.FunctionComponent<Props> = ({ fieldName, children }) => (\n    <VisibilityBlock fieldName={fieldName}>\n        <div style={{ marginTop: '2rem' }}>{children}</div>\n    </VisibilityBlock>\n);\n\nexport default QuestionWrapper;\n","export const getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - mod % 11;\n    return result === 11 ? 0 : result;\n};\n","const fnrvalidator = require('@navikt/fnrvalidator');\n\nexport enum FødselsnummerValidationErrorReason {\n    MustConsistOf11Digits = 'fnr must consist of 11 digits',\n    InvalidDate = 'invalid date',\n    ChecksumsDontMatch = \"checksums don't match\"\n}\n\ninterface FnrValidationResult {\n    reasons?: FødselsnummerValidationErrorReason[];\n    status: 'valid' | 'invalid';\n}\n\nexport const fødselsnummerIsValid = (value: string): [boolean, FødselsnummerValidationErrorReason[]] => {\n    const { status, reasons }: FnrValidationResult = fnrvalidator.fnr(value);\n    if (status === 'valid') {\n        return [true, []];\n    } else {\n        return [false, reasons!];\n    }\n};\n","import { YesOrNo } from '../../common/formik/types/YesOrNo';\nimport { FieldValidationResult } from '../modules/validation/types';\nimport { erGyldigNorskOrgnummer } from './erGyldigNorskOrgnummer';\nimport { fødselsnummerIsValid, FødselsnummerValidationErrorReason } from './fødselsnummerValidator';\nimport { hasValue } from './hasValue';\n\nexport enum FieldValidationErrors {\n    'påkrevd' = 'common.fieldvalidation.påkrevd',\n    'fødselsnummer_11siffer' = 'common.fieldvalidation.fødselsnummer.11siffer',\n    'fødselsnummer_ugyldig' = 'common.fieldvalidation.fødselsnummer.ugyldig',\n    'orgnum_ugyldig' = 'common.fieldvalidation.orgnum.ugyldig'\n}\n\nexport const fieldIsRequiredError = () => createFieldValidationError(FieldValidationErrors.påkrevd);\n\nexport const validateFødselsnummer = (v: string): FieldValidationResult => {\n    const [isValid, reasons] = fødselsnummerIsValid(v);\n    if (!isValid) {\n        if (reasons.includes(FødselsnummerValidationErrorReason.MustConsistOf11Digits)) {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_11siffer);\n        } else {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_ugyldig);\n        }\n    }\n};\n\nexport const validateYesOrNoIsAnswered = (answer: YesOrNo): FieldValidationResult => {\n    if (answer === YesOrNo.UNANSWERED || answer === undefined) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredField = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateTruthyCheckbox = (value: any): FieldValidationResult => {\n    if (value !== true) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredList = (value: any): FieldValidationResult => {\n    if (!hasValue(value) || value?.length === 0) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredSelect = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const createFieldValidationError = <T extends string>(\n    key: T | undefined,\n    values?: any\n): FieldValidationResult => {\n    return key\n        ? {\n              key,\n              values\n          }\n        : undefined;\n};\n\nexport const validateOrgNumber = (orgnum: string, isNorwegian: boolean): FieldValidationResult => {\n    if (isNorwegian) {\n        if (!erGyldigNorskOrgnummer(orgnum)) {\n            return { key: FieldValidationErrors.orgnum_ugyldig };\n        }\n        return undefined;\n    }\n    return validateRequiredField(orgnum);\n};\n","export const hasValue = (v: any) => v !== '' && v !== undefined && v !== null;\n","import { YesOrNo } from '../../../common/formik/types/YesOrNo';\n\nexport enum FormFields {\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries'\n}\n\nexport interface CompletedFormValues {\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: Date;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","export type QuestionValue = string | number | Date | boolean | undefined;\n\nexport const questionValueIsOk = (value: QuestionValue) => {\n    return value !== undefined && value !== '';\n};\n\nexport interface QuestionConfig<Payload, QuestionKeys> {\n    [key: string]: {\n        parentQuestion?: QuestionKeys;\n        isIncluded?: (props: Payload) => boolean;\n        isAnswered: (props: Payload) => boolean;\n        isOptional?: (props: Payload) => boolean;\n        visibilityFilter?: (props: Payload) => boolean;\n        validate?: (props: Payload) => any;\n    };\n}\n\nconst isQuestionVisible = <Payload, QuestionKeys>(\n    questions: QuestionConfig<Payload, QuestionKeys>,\n    question: QuestionKeys,\n    payload: Payload\n): boolean => {\n    const config = questions[question as any];\n    if (!config) {\n        return false;\n    }\n    if (config.isIncluded && config.isIncluded(payload) === false) {\n        return false;\n    }\n    if (config.visibilityFilter && config.visibilityFilter(payload) === false) {\n        return false;\n    }\n    if (config.parentQuestion !== undefined) {\n        const parentQuestion = questions[config.parentQuestion as any];\n        return isQuestionVisible(questions, config.parentQuestion, payload) && parentQuestion.isAnswered(payload);\n    }\n    return true;\n};\n\nconst isQuestionAnswered = <Payload, QuestionKeys>(\n    questions: QuestionConfig<Payload, QuestionKeys>,\n    question: QuestionKeys,\n    payload: Payload\n): boolean => {\n    const config = questions[question as any];\n    if (!config || !config.isAnswered) {\n        return false;\n    }\n    return config.isAnswered(payload);\n};\n\nconst areAllQuestionsAnswered = <Payload, QuestionKeys>(\n    questions: QuestionConfig<Payload, QuestionKeys>,\n    payload: Payload\n): boolean => {\n    let allQuestionsHasAnswers = true;\n    Object.keys(questions).forEach((key) => {\n        const question = questions[key];\n        if (isQuestionVisible<Payload, QuestionKeys>(questions, key as any, payload)) {\n            const isOptional = question.isOptional !== undefined ? question.isOptional(payload) === true : false;\n            allQuestionsHasAnswers = allQuestionsHasAnswers === true && (question.isAnswered(payload) || isOptional);\n        }\n    });\n    return allQuestionsHasAnswers;\n};\n\nexport interface QuestionVisibility<QuestionKeys> {\n    isVisible: (key: QuestionKeys) => boolean;\n    isAnswered: (key: QuestionKeys) => boolean;\n    areAllQuestionsAnswered: () => boolean;\n}\n\nexport const Questions = <Payload, QuestionKeys>(questions: QuestionConfig<Payload, QuestionKeys>) => ({\n    getVisbility: (payload: Payload): QuestionVisibility<QuestionKeys> => ({\n        isVisible: (key: QuestionKeys) => isQuestionVisible(questions, key, payload),\n        isAnswered: (key: QuestionKeys) => isQuestionAnswered(questions, key, payload),\n        areAllQuestionsAnswered: () => areAllQuestionsAnswered(questions, payload)\n    })\n});\n","import { YesOrNo } from '../../common/formik/types/YesOrNo';\n\nexport const yesOrNoIsAnswered = (answer?: YesOrNo) => answer === YesOrNo.YES || answer === YesOrNo.NO;\n","import { QuestionConfig, Questions } from '../../modules/visibility/questions/Questions';\nimport { hasValue } from '../../validation/hasValue';\nimport { yesOrNoIsAnswered } from '../../validation/yesOrNoIsAnswered';\nimport { FormFields, FormValues } from './types';\n\nexport const FormConfig: QuestionConfig<FormValues, FormFields> = {\n    [FormFields.birthdate]: {\n        isAnswered: ({ birthdate }) => hasValue(birthdate)\n    },\n    [FormFields.birthCountry]: {\n        parentQuestion: FormFields.birthdate,\n        isAnswered: ({ birthCountry }) => hasValue(birthCountry)\n    },\n    [FormFields.firstname]: {\n        parentQuestion: FormFields.birthdate,\n        isAnswered: ({ firstname }) => hasValue(firstname)\n    },\n    [FormFields.lastname]: {\n        parentQuestion: FormFields.birthdate,\n        isAnswered: ({ lastname }) => hasValue(lastname),\n        isOptional: () => true\n    },\n    [FormFields.hasKids]: {\n        isAnswered: ({ hasKids }) => yesOrNoIsAnswered(hasKids)\n    },\n    [FormFields.numberOfKids]: {\n        parentQuestion: FormFields.hasKids,\n        isAnswered: ({ numberOfKids }) => numberOfKids !== undefined && !isNaN(numberOfKids) && numberOfKids >= 0\n    },\n    [FormFields.hasBeenAbroadWithKids]: {\n        parentQuestion: FormFields.hasKids,\n        isAnswered: ({ hasBeenAbroadWithKids }) => yesOrNoIsAnswered(hasBeenAbroadWithKids)\n    },\n    [FormFields.countries]: {\n        isAnswered: ({ countries }) => countries !== undefined && countries.length > 0\n    }\n};\n\nexport const exampleFormQuestions = Questions<FormValues, FormFields>(FormConfig);\n","import React from 'react';\nimport { FormikErrors } from 'formik';\nimport FormikForm, { FormikFormProps } from './formik-form/FormikForm';\nimport FormikCountrySelect, {\n    FormikCountrySelectProps\n} from './inputs/formik-country-select/FormikCountrySelect';\nimport FormikDatepicker, {\n    FormikDatepickerProps\n} from './inputs/formik-datepicker/FormikDatepicker';\nimport FormikInput, { FormikInputProps } from './inputs/formik-input/FormikInput';\n\nexport function getTypedFormComponents<FieldNames, FormValues, FieldValidationError = FormikErrors<FormValues>>() {\n    return {\n        Form: (props: FormikFormProps<FormValues, FieldValidationError>) => <FormikForm {...props} />,\n        Input: (props: FormikInputProps<FieldNames>) => <FormikInput<FieldNames> {...props} />,\n        DatePicker: (props: FormikDatepickerProps<FieldNames>) => <FormikDatepicker<FieldNames> {...props} />,\n        CountrySelect: (props: FormikCountrySelectProps<FieldNames>) => <FormikCountrySelect<FieldNames> {...props} />\n    };\n}\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { FormikProps } from 'formik';\nimport {\n    getTypedFormComponents\n} from '../../../common/formik/form-components/getTypedFormComponents';\nimport Tiles from '../../components/tiles/Tiles';\nimport {\n    isFieldValidationError, renderFieldValidationError\n} from '../../modules/validation/fieldValidationRenderUtils';\nimport { QuestionVisibilityContext } from '../../modules/visibility/QuestionVisibilityContext';\nimport QuestionWrapper from '../../modules/visibility/QuestionWrapper';\nimport VisibilityBlock from '../../modules/visibility/VisibilityBlock';\nimport { validateRequiredField } from '../../validation/fieldValidations';\nimport { exampleFormQuestions } from './config';\nimport { FormFields, FormValues } from './types';\n\ninterface Props {\n    formik: FormikProps<FormValues>;\n}\n\nconst { Input, DatePicker, CountrySelect, Form } = getTypedFormComponents<FormFields, FormValues>();\n\nconst FormWithConfig: React.FunctionComponent<Props> = ({ formik }) => {\n    const intl = useIntl();\n    return (\n        <QuestionVisibilityContext.Provider value={{ visibility: exampleFormQuestions.getVisbility(formik.values) }}>\n            <Form\n                formik={formik}\n                errorRender={(errors) => {\n                    if (isFieldValidationError(errors)) {\n                        return renderFieldValidationError(intl, errors);\n                    } else {\n                        return errors;\n                    }\n                }}>\n                <QuestionWrapper fieldName={FormFields.birthdate}>\n                    <DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" validate={validateRequiredField} />\n                </QuestionWrapper>\n\n                <QuestionWrapper fieldName={FormFields.birthCountry}>\n                    <CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" />\n                </QuestionWrapper>\n\n                <VisibilityBlock<FormFields> fieldName={FormFields.firstname}>\n                    <Tiles columns={2}>\n                        <QuestionWrapper fieldName={FormFields.firstname}>\n                            <Input name={FormFields.firstname} label=\"Fornavn\" validate={validateRequiredField} />\n                        </QuestionWrapper>\n                        <QuestionWrapper fieldName={FormFields.lastname}>\n                            <Input name={FormFields.lastname} label=\"Etternavn\" validate={validateRequiredField} />\n                        </QuestionWrapper>\n                    </Tiles>\n                </VisibilityBlock>\n            </Form>\n        </QuestionVisibilityContext.Provider>\n    );\n};\n\nexport default FormWithConfig;\n","import React, { useState } from 'react';\nimport { FormikProps } from 'formik';\nimport { Panel } from 'nav-frontend-paneler';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport FormikWrapper from '../../../common/formik/form-components/formik-wrapper/FormikWrapper';\nimport Code from '../../components/code/Code';\nimport Comp from '../../components/code/Comp';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport FormWithConfig from './FormWithConfig';\nimport { FormValues } from './types';\n\ninterface Props {}\n\nconst initialValues: FormValues = {};\n\nconst FormikExample: React.FunctionComponent<Props> = (props) => {\n    const [view, setView] = useState(1);\n    return (\n        <>\n            <PageIntro title=\"Skjemaeksempel\">\n                De mest brukte skjemakomponentene, og eksempel på hvordan en setter opp validering. Se kildekode for\n                hvordan det settes opp.\n            </PageIntro>\n            <Comp title=\"<FormikWrapper>\" isFormik={true}>\n                <FormikWrapper<Partial<FormValues>>\n                    initialValues={initialValues}\n                    onSubmit={(values) => {\n                        console.log('FormikWrapperSubmit', values);\n                    }}\n                    renderForm={(formik: FormikProps<FormValues>) => (\n                        <>\n                            <Tabs\n                                onChange={(evt, idx) => setView(idx)}\n                                tabs={[\n                                    {\n                                        label: 'Strukturoversikt',\n                                        aktiv: view === 0\n                                    },\n                                    {\n                                        label: 'Skjema med config',\n                                        aktiv: view === 1\n                                    }\n                                ]}\n                            />\n                            {view === 0 && (\n                                <Comp title=\"<Steg>\" isLayout={true}>\n                                    <Code isLayout={true}>Stegindikator</Code>\n                                    <Undertittel>\n                                        <em>Custom content</em>\n                                    </Undertittel>\n                                    <Comp title=\"<FormikForm>\" actions=\"onSubmit\" isFormik={true}>\n                                        <Panel>Skjemainputs</Panel>\n                                        <Code isFormik={true}>FormikFormValidationSummary</Code>\n                                        <Code isFormik={true}>FormikFormKnapperad</Code>\n                                    </Comp>\n                                    <p>\n                                        <em>Custom content</em>\n                                    </p>\n                                    <Code>FortsettSenere</Code>\n                                    <Code>AvbrytOgSlett</Code>\n                                </Comp>\n                            )}\n                            {view === 1 && <FormWithConfig formik={formik} />}\n                        </>\n                    )}\n                />\n            </Comp>\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\ninterface Props {}\n\nconst Intro: React.FunctionComponent<Props> = (props) => (\n    <>\n        <PageIntro title=\"sif-common-formik\">\n            Samling av komponenter som wrapper nav-frontend-skjema elementer med formik context.\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />\n    },\n    {\n        path: 'formik-example',\n        title: 'Skjemaeksempel',\n        renderContent: () => <FormikExample />\n    }\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu: React.FunctionComponent = () => {\n    const {\n        location: { pathname }\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ninterface Props {}\n\nconst DevContent: React.FunctionComponent<Props> = (props) => {\n    const history = useHistory();\n    const {\n        location: { pathname }\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <aside className=\"asideContent\">\n                <LeftMenu />\n            </aside>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default DevContent;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {}\n\nconst DevPage: React.FunctionComponent<Props> = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <BrowserRouter>\n                    <DevContent />\n                </BrowserRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}