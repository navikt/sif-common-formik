{"version":3,"sources":["typed-formik-form/components/formik-custom-input-wrapper/FormikCustomInputWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal/Modal.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","dev/components/tiles/Tiles.tsx","dev/modules/validation/fieldValidationRenderUtils.ts","dev/components/question/Question.tsx","dev/modules/visibility/QuestionVisibilityContext.ts","dev/modules/visibility/VisibilityBlock.tsx","dev/validation/fødselsnummerValidator.ts","dev/modules/visibility/ConditionalQuestion.tsx","dev/validation/fieldValidations.ts","dev/validation/hasValue.ts","dev/examples/formik-example/types.ts","dev/modules/visibility/questions/Questions.ts","dev/validation/yesOrNoIsAnswered.ts","dev/examples/formik-example/config.ts","dev/examples/formik-example/FormWithConfig.tsx","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","dev/examples/formik-example/FormWithTypedFormElements.tsx","dev/examples/formik-example/FormikExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","typed-formik-form/components/helpers/custom-input/CustomInput.tsx","typed-formik-form/types/index.ts","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/index.ts","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/utils/bemUtils.ts","typed-formik-form/components/helpers/label-with-info/LabelWithInfo.tsx"],"names":["bem","bemUtils","DialogFormWrapper","width","children","className","classNames","block","modifier","Modal","isOpen","onRequestClose","contentLabel","ModalFormAndList","items","listRenderer","formRenderer","labels","error","dialogWidth","onChange","React","useState","isVisible","modalState","setModalState","resetModal","selectedItem","undefined","modalTitle","onSubmit","values","id","filter","item","guid","onCancel","CustomInput","legend","listTitle","feil","tag","length","onEdit","onDelete","i","emptyListText","style","paddingBottom","marginTop","htmlType","onClick","addLabel","FormikModalFormAndList","name","sortFunc","onAfterChange","validate","context","useContext","TypedFormikFormContext","field","form","value","getAndRenderFieldErrorMessage","updatedValues","sort","setFieldValue","appMessages","nb","nn","AppIntlProvider","locale","onError","messages","NAVLogo","props","viewBox","fill","fillRule","d","cls","element","e","m","modifierConditional","condition","child","c","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","title","Tiles","columns","map","isIntlFieldValidationErrorType","key","renderIntlFieldValidationError","intl","formatMessage","parsedValues","Object","keys","forEach","valueOrFunc","renderIntlFieldValidationValues","Question","marginBottom","QuestionVisibilityContext","createContext","VisibilityBlock","FødselsnummerValidationErrorReason","fieldName","visibility","ConditionalQuestion","forField","require","FieldValidationErrors","hasValue","v","FormFields","fieldIsRequiredError","createFieldValidationError","påkrevd","validateRequiredField","validateRequiredList","isQuestionVisible","questions","question","payload","config","isIncluded","visibilityFilter","parentQuestion","isAnswered","yesOrNoIsAnswered","answer","YesOrNo","YES","NO","FormConfig","birthdate","birthCountry","firstname","lastname","isOptional","hasKids","numberOfKids","isNaN","hasBeenAbroadWithKids","countries","exampleFormQuestions","getVisbility","isQuestionAnswered","areAllQuestionsAnswered","allQuestionsHasAnswers","getTypedFormComponents","Input","DatePicker","CountrySelect","Form","FormWithConfig","formik","useIntl","Provider","submitButtonLabel","onValidSubmit","console","log","fieldErrorRenderer","errors","label","handleTimeChange","time","hours","minutes","getNewTime","stateTime","parseInt","TimeInput","maxHours","maxMinutes","layout","setStateTime","Math","min","hoursLabelId","minutesLabelId","htmlFor","type","max","maxLength","autoComplete","evt","newTime","target","onBlur","FormikTimeInput","info","restProps","getFeilPropForFormikInput","LabelWithInfo","FormWithTypedFormElements","includeValidationSummary","YesOrNoQuestion","fromDatepickerProps","daterange_from","toDatepickerProps","daterange_to","ferieuttak","ferie","idx","country","files","acceptedExtensions","onFilesSelect","initialValues","FormikExample","view","setView","TypedFormikWrapper","renderForm","tabs","aktiv","Intro","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","to","DevContent","routeConfig","find","f","getRouteConfig","maxWidth","DevPage","App","setAppElement","ReactDOM","render","document","getElementById","dateToISOFormattedDateString","date","moment","utc","format","datepickerUtils","getDateStringFromValue","ISO_8601","isValid","toDate","getDateFromDateString","dateString","Date","parseDateLimitations","dateLimitations","maksDato","minDato","helgedagerIkkeTillatt","ugyldigeTidsperioder","t","fom","tom","FormikDatepicker","showYearSelector","fullscreenOverlay","fullScreenOnMobile","isWide","useMedia","minWidth","elementId","plassering","inputName","input","placeholder","valgtDato","avgrensninger","visÅrVelger","kalender","FormikCheckbox","afterOnChange","checked","newValue","ButtonRow","align","knapp","index","TypedFormikForm","oldProps","currentProps","resetFormOnCancel","cancelButtonLabel","includeButtons","useFormikContext","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValidating","formSubmitCount","ref","useRef","useEffect","current","showErrors","noValidate","isValidationErrorsVisible","getErrorsForField","createTypedFormikFormContext","FormikValidationErrorSummary","renderFormContent","setSubmitting","setTouched","setTimeout","Checkbox","CheckboxPanelGroup","ConfirmationCheckbox","DateIntervalPicker","FileInput","FormikWrapper","InputGroup","RadioPanelGroup","Select","Textarea","FormikRadioPanelGroup","radios","useTwoColumns","rb","isCheckboxChecked","fieldValues","includes","FormikCheckboxPanelGroup","checkboxes","cb","keyProp","el","push","FormikConfirmationCheckboxPanel","getCountries","FormikDateIntervalPicker","FormikInputGroup","getPatternForInputMode","inputMode","FormikInput","pattern","FormikSelect","FormikTextarea","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","DO_NOT_KNOW","ValidationErrorLink","href","stopPropagation","preventDefault","stopClickEvent","ValidationSummary","errorMessages","summaryEl","node","findDOMNode","focus","tittel","customFeilRender","elementById","skjemaelementId","elementByName","getElementsByName","feilmelding","allErrors","getAllErrors","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fileSelectHandler","bind","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","Array","from","this","dataTransfer","inputElement","which","click","multiple","inputId","role","tabIndex","onDragOver","onDrop","accept","FormikFileInput","arrayHelpers","countryOptionsCache","getCountryOptions","updateCache","options","createCountryOptions","showOnlyEuAndEftaCountries","onluEuAndEftaCountries","localeToUse","entries","getNames","a","b","localeCompare","countryOptionValue","shouldFilter","filteredListEØSCountries","FormikCountrySelect","elementName","getIn","formikStatus","status","stepSubmitCount","flattenFieldArrayErrors","isFieldArrayErrors","err","fieldArrayKey","getErrorsFromFieldArrayErrors","errorNode","findErrorNodeInObject","flatError","flatten","split","unflatten"],"mappings":"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","file":"static/js/main.d7e250eb.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { TypedFormInputCommonProps } from '../../types';\nimport CustomInput from '../helpers/custom-input/CustomInput';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> {\n    name: FieldName;\n    label?: React.ReactNode;\n    children: React.ReactNode;\n}\n\nexport type FormikCustomInputWrapperProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCustomInputWrapper<FieldName>({\n    label,\n    name,\n    info,\n    validate,\n    children\n}: FormikCustomInputWrapperProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput\n                        legend={(label = <LabelWithInfo info={info}>{label}</LabelWithInfo>)}\n                        feil={context ? context.getAndRenderFieldErrorMessage(field, form) : undefined}>\n                        {children}\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCustomInputWrapper;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(width))}>{children}</div>\n);\n\nexport default DialogFormWrapper;\n","import * as React from 'react';\nimport { default as NFModal } from 'nav-frontend-modal';\nimport './modal.less';\n\nexport interface ModalProps {\n    className?: string;\n    isOpen: boolean;\n    onRequestClose: () => void;\n    contentLabel: string;\n}\n\nconst Modal: React.FunctionComponent<ModalProps> = ({ isOpen, onRequestClose, contentLabel, className, children }) => (\n    <NFModal\n        className={`modal ${className ? className : ''}`}\n        isOpen={isOpen}\n        contentLabel={contentLabel}\n        onRequestClose={onRequestClose}>\n        <article className=\"modal__content\">{children}</article>\n    </NFModal>\n);\n\nexport default Modal;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport CustomInput from '../../helpers/custom-input/CustomInput';\nimport DialogFormWrapper, {\n    DialogFormWrapperWidths\n} from '../dialog-form-wrapper/DialogFormWrapper';\nimport Modal from '../modal/Modal';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    onChange\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({ onSubmit: handleOnSubmit, onCancel: resetModal, item: modalState.selectedItem })}\n                </DialogFormWrapper>\n            </Modal>\n            <CustomInput legend={labels.listTitle} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                <div style={{ marginTop: '1rem' }}>\n                    <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })}>\n                        {labels.addLabel}\n                    </Knapp>\n                </div>\n            </CustomInput>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { FormikValidateFunction, NavFrontendSkjemaFeil } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType> extends ModalFormAndListProps<ItemType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    validate?: FormikValidateFunction;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    validate\n}: FormikModalFormAndListProps<FieldName, ItemType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","export const appMessages = {\n    nb: {},\n    nn: {}\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules/dist/locale-data/en';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: string;\n}\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames\n});\n\nexport default bemUtils;\n","import * as React from 'react';\n\nimport bemHelper from '../../utils/bemUtils';\n\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import * as React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\n\nconst Tiles: React.StatelessComponent<{ columns?: 1 | 2 | 3 | 'flex' }> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import { IntlShape } from 'react-intl';\nimport { FieldValidationResultValues, IntlFieldValidationError } from './types';\n\nexport const isIntlFieldValidationErrorType = (error: any): error is IntlFieldValidationError =>\n    typeof error === 'object' && error.key !== undefined;\n\nexport const renderIntlFieldValidationValues = (\n    intl: IntlShape,\n    values?: FieldValidationResultValues\n): { [key: string]: string } | undefined => {\n    if (values === undefined) {\n        return undefined;\n    }\n    const parsedValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc !== undefined) {\n            parsedValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return parsedValues;\n};\n\nexport const renderIntlFieldValidationError = (intl: IntlShape, error: IntlFieldValidationError): string => {\n    return intl.formatMessage({ id: error.key }, renderIntlFieldValidationValues(intl, error.values));\n};\n","import React from 'react';\n\ninterface Props {}\n\nconst Question: React.FunctionComponent<Props> = (props) => (\n    <div style={{ marginBottom: '2rem' }}>{props.children}</div>\n);\n\nexport default Question;\n","import { createContext } from 'react';\nimport { QuestionVisibility } from './questions/Questions';\n\ninterface VisibilityContext<FieldName> {\n    visibility: QuestionVisibility<FieldName>;\n}\n\nexport const QuestionVisibilityContext = createContext<VisibilityContext<any> | undefined>(undefined);\n","import React, { useContext } from 'react';\nimport { QuestionVisibilityContext } from './QuestionVisibilityContext';\n\ninterface Props<FormFields> {\n    fieldName: FormFields;\n    children: React.ReactNode;\n}\n\nfunction VisibilityBlock<FormFields>({ fieldName, children }: Props<FormFields>) {\n    const { visibility } = useContext(QuestionVisibilityContext) || {};\n    return visibility && visibility.isVisible(fieldName) ? <>{children}</> : null;\n}\n\nexport default VisibilityBlock;\n","const fnrvalidator = require('@navikt/fnrvalidator');\n\nexport enum FødselsnummerValidationErrorReason {\n    MustConsistOf11Digits = 'fnr must consist of 11 digits',\n    InvalidDate = 'invalid date',\n    ChecksumsDontMatch = \"checksums don't match\"\n}\n\ninterface FnrValidationResult {\n    reasons?: FødselsnummerValidationErrorReason[];\n    status: 'valid' | 'invalid';\n}\n\nexport const fødselsnummerIsValid = (value: string): [boolean, FødselsnummerValidationErrorReason[]] => {\n    const { status, reasons }: FnrValidationResult = fnrvalidator.fnr(value);\n    if (status === 'valid') {\n        return [true, []];\n    } else {\n        return [false, reasons!];\n    }\n};\n","import React from 'react';\nimport Question from '../../components/question/Question';\nimport VisibilityBlock from './VisibilityBlock';\n\ninterface Props {\n    forField: string;\n    children: React.ReactNode;\n}\n\nconst ConditionalQuestion: React.FunctionComponent<Props> = ({ forField, children }) => (\n    <VisibilityBlock fieldName={forField}>\n        <Question>{children}</Question>\n    </VisibilityBlock>\n);\n\nexport default ConditionalQuestion;\n","import { YesOrNo } from '../../typed-formik-form';\nimport { FieldValidationResult } from '../modules/validation/types';\nimport { erGyldigNorskOrgnummer } from './erGyldigNorskOrgnummer';\nimport { fødselsnummerIsValid, FødselsnummerValidationErrorReason } from './fødselsnummerValidator';\nimport { hasValue } from './hasValue';\n\nexport enum FieldValidationErrors {\n    'påkrevd' = 'common.fieldvalidation.påkrevd',\n    'fødselsnummer_11siffer' = 'common.fieldvalidation.fødselsnummer.11siffer',\n    'fødselsnummer_ugyldig' = 'common.fieldvalidation.fødselsnummer.ugyldig',\n    'orgnum_ugyldig' = 'common.fieldvalidation.orgnum.ugyldig'\n}\n\nexport const fieldIsRequiredError = () => createFieldValidationError(FieldValidationErrors.påkrevd);\n\nexport const validateFødselsnummer = (v: string): FieldValidationResult => {\n    const [isValid, reasons] = fødselsnummerIsValid(v);\n    if (!isValid) {\n        if (reasons.includes(FødselsnummerValidationErrorReason.MustConsistOf11Digits)) {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_11siffer);\n        } else {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_ugyldig);\n        }\n    }\n};\n\nexport const validateYesOrNoIsAnswered = (answer: YesOrNo): FieldValidationResult => {\n    if (answer === YesOrNo.UNANSWERED || answer === undefined) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredField = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateTruthyCheckbox = (value: any): FieldValidationResult => {\n    if (value !== true) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredList = (value: any): FieldValidationResult => {\n    if (!hasValue(value) || value?.length === 0) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredSelect = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const createFieldValidationError = <T extends string>(\n    key: T | undefined,\n    values?: any\n): FieldValidationResult => {\n    return key\n        ? {\n              key,\n              values\n          }\n        : undefined;\n};\n\nexport const validateOrgNumber = (orgnum: string, isNorwegian: boolean): FieldValidationResult => {\n    if (isNorwegian) {\n        if (!erGyldigNorskOrgnummer(orgnum)) {\n            return { key: FieldValidationErrors.orgnum_ugyldig };\n        }\n        return undefined;\n    }\n    return validateRequiredField(orgnum);\n};\n","export const hasValue = (v: any) => v !== '' && v !== undefined && v !== null;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\n\nexport enum FormFields {\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak'\n}\n\nexport interface MockFerieuttak {\n    country: string;\n}\n\nexport interface CompletedFormValues {\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: Date;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: Date;\n    [FormFields.daterange_to]?: Date;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: MockFerieuttak[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","export type QuestionValue = string | number | Date | boolean | undefined;\n\nexport const questionValueIsOk = (value: QuestionValue) => {\n    return value !== undefined && value !== '';\n};\n\nexport interface QuestionConfig<Payload, QuestionKeys> {\n    [key: string]: {\n        parentQuestion?: QuestionKeys;\n        isIncluded?: (props: Payload) => boolean;\n        isAnswered: (props: Payload) => boolean;\n        isOptional?: (props: Payload) => boolean;\n        visibilityFilter?: (props: Payload) => boolean;\n        validate?: (props: Payload) => any;\n    };\n}\n\nconst isQuestionVisible = <Payload, QuestionKeys>(\n    questions: QuestionConfig<Payload, QuestionKeys>,\n    question: QuestionKeys,\n    payload: Payload\n): boolean => {\n    const config = questions[question as any];\n    if (!config) {\n        return false;\n    }\n    if (config.isIncluded && config.isIncluded(payload) === false) {\n        return false;\n    }\n    if (config.visibilityFilter && config.visibilityFilter(payload) === false) {\n        return false;\n    }\n    if (config.parentQuestion !== undefined) {\n        const parentQuestion = questions[config.parentQuestion as any];\n        return isQuestionVisible(questions, config.parentQuestion, payload) && parentQuestion.isAnswered(payload);\n    }\n    return true;\n};\n\nconst isQuestionAnswered = <Payload, QuestionKeys>(\n    questions: QuestionConfig<Payload, QuestionKeys>,\n    question: QuestionKeys,\n    payload: Payload\n): boolean => {\n    const config = questions[question as any];\n    if (!config || !config.isAnswered) {\n        return false;\n    }\n    return config.isAnswered(payload);\n};\n\nconst areAllQuestionsAnswered = <Payload, QuestionKeys>(\n    questions: QuestionConfig<Payload, QuestionKeys>,\n    payload: Payload\n): boolean => {\n    let allQuestionsHasAnswers = true;\n    Object.keys(questions).forEach((key) => {\n        const question = questions[key];\n        if (isQuestionVisible<Payload, QuestionKeys>(questions, key as any, payload)) {\n            const isOptional = question.isOptional !== undefined ? question.isOptional(payload) === true : false;\n            allQuestionsHasAnswers = allQuestionsHasAnswers === true && (question.isAnswered(payload) || isOptional);\n        }\n    });\n    return allQuestionsHasAnswers;\n};\n\nexport interface QuestionVisibility<QuestionKeys> {\n    isVisible: (key: QuestionKeys) => boolean;\n    isAnswered: (key: QuestionKeys) => boolean;\n    areAllQuestionsAnswered: () => boolean;\n}\n\nexport const Questions = <Payload, QuestionKeys>(questions: QuestionConfig<Payload, QuestionKeys>) => ({\n    getVisbility: (payload: Payload): QuestionVisibility<QuestionKeys> => ({\n        isVisible: (key: QuestionKeys) => isQuestionVisible(questions, key, payload),\n        isAnswered: (key: QuestionKeys) => isQuestionAnswered(questions, key, payload),\n        areAllQuestionsAnswered: () => areAllQuestionsAnswered(questions, payload)\n    })\n});\n","import { YesOrNo } from '../../typed-formik-form/types';\n\nexport const yesOrNoIsAnswered = (answer?: YesOrNo) => answer === YesOrNo.YES || answer === YesOrNo.NO;\n","import { QuestionConfig, Questions } from '../../modules/visibility/questions/Questions';\nimport { hasValue } from '../../validation/hasValue';\nimport { yesOrNoIsAnswered } from '../../validation/yesOrNoIsAnswered';\nimport { FormFields, FormValues } from './types';\n\nexport const FormConfig: QuestionConfig<FormValues, FormFields> = {\n    [FormFields.birthdate]: {\n        isAnswered: ({ birthdate }) => hasValue(birthdate)\n    },\n    [FormFields.birthCountry]: {\n        parentQuestion: FormFields.birthdate,\n        isAnswered: ({ birthCountry }) => hasValue(birthCountry)\n    },\n    [FormFields.firstname]: {\n        parentQuestion: FormFields.birthdate,\n        isAnswered: ({ firstname }) => hasValue(firstname)\n    },\n    [FormFields.lastname]: {\n        parentQuestion: FormFields.birthdate,\n        isAnswered: ({ lastname }) => hasValue(lastname),\n        isOptional: () => true\n    },\n    [FormFields.hasKids]: {\n        isAnswered: ({ hasKids }) => yesOrNoIsAnswered(hasKids)\n    },\n    [FormFields.numberOfKids]: {\n        parentQuestion: FormFields.hasKids,\n        isAnswered: ({ numberOfKids }) => numberOfKids !== undefined && !isNaN(numberOfKids) && numberOfKids >= 0\n    },\n    [FormFields.hasBeenAbroadWithKids]: {\n        parentQuestion: FormFields.hasKids,\n        isAnswered: ({ hasBeenAbroadWithKids }) => yesOrNoIsAnswered(hasBeenAbroadWithKids)\n    },\n    [FormFields.countries]: {\n        isAnswered: ({ countries }) => countries !== undefined && countries.length > 0\n    }\n};\n\nexport const exampleFormQuestions = Questions<FormValues, FormFields>(FormConfig);\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { FormikProps } from 'formik';\nimport {\n    getTypedFormComponents\n} from '../../../typed-formik-form/components/getTypedFormComponents';\nimport Tiles from '../../components/tiles/Tiles';\nimport {\n    isIntlFieldValidationErrorType, renderIntlFieldValidationError\n} from '../../modules/validation/fieldValidationRenderUtils';\nimport ConditionalQuestion from '../../modules/visibility/ConditionalQuestion';\nimport { QuestionVisibilityContext } from '../../modules/visibility/QuestionVisibilityContext';\nimport VisibilityBlock from '../../modules/visibility/VisibilityBlock';\nimport { validateRequiredField } from '../../validation/fieldValidations';\nimport { exampleFormQuestions } from './config';\nimport { FormFields, FormValues } from './types';\n\ninterface Props {\n    formik: FormikProps<FormValues>;\n}\n\nconst { Input, DatePicker, CountrySelect, Form } = getTypedFormComponents<FormFields, FormValues>();\n\nconst FormWithConfig: React.FunctionComponent<Props> = ({ formik }) => {\n    const intl = useIntl();\n    return (\n        <QuestionVisibilityContext.Provider value={{ visibility: exampleFormQuestions.getVisbility(formik.values) }}>\n            <Form\n                submitButtonLabel=\"Ok\"\n                onValidSubmit={() => console.log('sdf')}\n                fieldErrorRenderer={(errors) => {\n                    if (isIntlFieldValidationErrorType(errors)) {\n                        return renderIntlFieldValidationError(intl, errors);\n                    } else {\n                        return true;\n                    }\n                }}>\n                <ConditionalQuestion forField={FormFields.birthdate}>\n                    <DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" validate={validateRequiredField} />\n                </ConditionalQuestion>\n\n                <ConditionalQuestion forField={FormFields.birthCountry}>\n                    <CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" />\n                </ConditionalQuestion>\n\n                <VisibilityBlock<FormFields> fieldName={FormFields.firstname}>\n                    <Tiles columns={2}>\n                        <ConditionalQuestion forField={FormFields.firstname}>\n                            <Input name={FormFields.firstname} label=\"Fornavn\" validate={validateRequiredField} />\n                        </ConditionalQuestion>\n                        <ConditionalQuestion forField={FormFields.lastname}>\n                            <Input name={FormFields.lastname} label=\"Etternavn\" validate={validateRequiredField} />\n                        </ConditionalQuestion>\n                    </Tiles>\n                </VisibilityBlock>\n            </Form>\n        </QuestionVisibilityContext.Provider>\n    );\n};\n\nexport default FormWithConfig;\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined) => void;\n\ninterface TimeInputProps {\n    time?: Time | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    onChange: TimeInputChangeFunc;\n    layout?: 'normal' | 'compact';\n}\n\nconst bem = bemUtils('timeInput');\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    if ((time.hours === undefined || isNaN(time.hours)) && (time.minutes === undefined || isNaN(time.minutes))) {\n        onChange(undefined);\n    } else {\n        onChange(time);\n    }\n};\n\nconst getNewTime = (\n    stateTime: Partial<Time> | undefined = {},\n    values: { hours?: string; minutes?: string }\n): Partial<Time> => {\n    if (values.hours !== undefined) {\n        const hours = parseInt(values.hours, 10);\n        if (!isNaN(hours)) {\n            return {\n                ...stateTime,\n                hours\n            };\n        }\n        return stateTime.minutes ? { ...stateTime, hours: undefined } : { hours: undefined };\n    }\n    if (values.minutes !== undefined) {\n        const minutes = parseInt(values.minutes, 10);\n        if (!isNaN(minutes)) {\n            return {\n                ...stateTime,\n                minutes\n            };\n        }\n        return stateTime.hours ? { ...stateTime, minutes: undefined } : { minutes: undefined };\n    }\n\n    return stateTime;\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    onChange,\n    layout = 'compact'\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const hours =\n        !stateTime || stateTime.hours === undefined || isNaN(stateTime.hours)\n            ? ''\n            : Math.min(stateTime.hours, maxHours);\n    const minutes =\n        !stateTime || stateTime.minutes === undefined || isNaN(stateTime.minutes)\n            ? ''\n            : Math.min(stateTime.minutes, maxMinutes);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(layout))}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"number\"\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={hours}\n                        autoComplete=\"off\"\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { hours: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"number\"\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={minutes}\n                        autoComplete=\"off\"\n                        onBlur={(evt: React.FocusEvent<HTMLInputElement>) => {\n                            if (evt.target.value === '' || evt.target.value === '0') {\n                                const newTime = {\n                                    ...stateTime,\n                                    minutes: stateTime && stateTime.hours !== undefined ? 0 : undefined\n                                };\n                                setStateTime(newTime);\n                                handleTimeChange(newTime, onChange);\n                            }\n                        }}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { minutes: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps, Label } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport CustomInput from '../helpers/custom-input/CustomInput';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput from './TimeInput';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n}\n\nexport type FormikTimeInputProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikTimeInput<FieldName>({\n    label,\n    name,\n    validate,\n    info,\n    feil,\n    ...restProps\n}: FormikTimeInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>\n                            <LabelWithInfo info={info}>{label}</LabelWithInfo>\n                        </Label>\n\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                            }}\n                        />\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    FormikDateIntervalPicker, FormikFileInput, FormikModalFormAndList\n} from '../../../typed-formik-form';\nimport FormikTimeInput from '../../../typed-formik-form/components/formik-time-input/FormikTimeInput';\nimport {\n    getTypedFormComponents\n} from '../../../typed-formik-form/components/getTypedFormComponents';\nimport Question from '../../components/question/Question';\nimport Tiles from '../../components/tiles/Tiles';\nimport {\n    isIntlFieldValidationErrorType, renderIntlFieldValidationError\n} from '../../modules/validation/fieldValidationRenderUtils';\nimport { validateRequiredField, validateRequiredList } from '../../validation/fieldValidations';\nimport { FormFields, FormValues, MockFerieuttak } from './types';\n\ninterface Props {}\n\nconst Form = getTypedFormComponents<FormFields, FormValues>();\n\nconst FormWithTypedFormElements: React.FunctionComponent<Props> = () => {\n    const intl = useIntl();\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            fieldErrorRenderer={(error) => {\n                if (isIntlFieldValidationErrorType(error)) {\n                    return renderIntlFieldValidationError(intl, error);\n                }\n                return error;\n            }}>\n            <Question>\n                <Form.DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" validate={validateRequiredField} />\n            </Question>\n            <Question>\n                <Form.CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" />\n            </Question>\n            <Question>\n                <Tiles columns={2}>\n                    <Form.Input name={FormFields.firstname} label=\"Fornavn\" validate={validateRequiredField} />\n                    <Form.Input name={FormFields.lastname} label=\"Etternavn\" validate={validateRequiredField} />\n                </Tiles>\n            </Question>\n            <Question>\n                <Form.YesOrNoQuestion legend=\"Har du barn?\" name={FormFields.hasKids} />\n            </Question>\n            <FormikTimeInput name={FormFields.time} label=\"Tidspunkt\" />\n            <FormikDateIntervalPicker\n                legend=\"Tidsrom\"\n                fromDatepickerProps={{\n                    name: FormFields.daterange_from,\n                    label: 'Fra',\n                    validate: validateRequiredField\n                }}\n                toDatepickerProps={{\n                    name: FormFields.daterange_to,\n                    label: 'Til',\n                    validate: validateRequiredField\n                }}\n            />\n            <Question>\n                <FormikModalFormAndList<FormFields, MockFerieuttak>\n                    name={FormFields.ferieuttak}\n                    feil={'heysan'}\n                    labels={{\n                        addLabel: 'Legg til',\n                        modalTitle: 'Ferieuttak',\n                        listTitle: 'Ferieuttak'\n                    }}\n                    formRenderer={() => <p>sdf</p>}\n                    listRenderer={({ items }) => (\n                        <div>\n                            {items.map((ferie, idx) => (\n                                <li key={idx}>{ferie.country}</li>\n                            ))}\n                        </div>\n                    )}\n                    validate={validateRequiredList}\n                />\n            </Question>\n            <Question>\n                <FormikFileInput\n                    name={FormFields.files}\n                    label=\"Vedlegg\"\n                    acceptedExtensions={'tsx'}\n                    onFilesSelect={() => null}\n                    feil={true}\n                />\n            </Question>\n        </Form.Form>\n    );\n};\n\nexport default FormWithTypedFormElements;\n","import React, { useState } from 'react';\nimport { FormikProps } from 'formik';\nimport Tabs from 'nav-frontend-tabs';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport Comp from '../../components/code/Comp';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport FormWithConfig from './FormWithConfig';\nimport FormWithTypedFormElements from './FormWithTypedFormElements';\nimport { FormValues } from './types';\n\ninterface Props {}\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            country: 'Sverige'\n        },\n        {\n            country: 'Danmark'\n        }\n    ]\n};\n\nconst FormikExample: React.FunctionComponent<Props> = (props) => {\n    const [view, setView] = useState(0);\n    return (\n        <>\n            <PageIntro title=\"Skjemaeksempel\">\n                De mest brukte skjemakomponentene, og eksempel på hvordan en setter opp validering. Se kildekode for\n                hvordan det settes opp.\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={(formik: FormikProps<FormValues>) => (\n                    <>\n                        <Tabs\n                            onChange={(evt, idx) => setView(idx)}\n                            tabs={[\n                                {\n                                    label: 'Typed form components',\n                                    aktiv: view === 0\n                                },\n                                {\n                                    label: 'Skjema med config',\n                                    aktiv: view === 1\n                                }\n                            ]}\n                        />\n                        {view === 0 && <FormWithTypedFormElements />}\n                        {view === 1 && <FormWithConfig formik={formik} />}\n                    </>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\ninterface Props {}\n\nconst Intro: React.FunctionComponent<Props> = (props) => (\n    <>\n        <PageIntro title=\"sif-common-formik\">\n            Samling av komponenter som wrapper nav-frontend-skjema elementer med formik context.\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />\n    },\n    {\n        path: 'formik-example',\n        title: 'Skjemaeksempel',\n        renderContent: () => <FormikExample />\n    }\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu: React.FunctionComponent = () => {\n    const {\n        location: { pathname }\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ninterface Props {}\n\nconst DevContent: React.FunctionComponent<Props> = (props) => {\n    const history = useHistory();\n    const {\n        location: { pathname }\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <aside className=\"asideContent\">\n                <LeftMenu />\n            </aside>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default DevContent;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {}\n\nconst DevPage: React.FunctionComponent<Props> = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <BrowserRouter>\n                    <DevContent />\n                </BrowserRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport LabelWithInfo from '../label-with-info/LabelWithInfo';\nimport './customInput.less';\n\ninterface Props extends SkjemaGruppeProps {\n    info?: React.ReactNode;\n}\n\nconst CustomInput: React.FunctionComponent<Props> = ({ legend, feil, info, tag, children, className }) => (\n    <SkjemaGruppe\n        className={`${className} singleInputWrapper`}\n        tag={tag ? tag : legend ? 'fieldset' : 'div'}\n        feil={feil}\n        legend={legend ? <LabelWithInfo info={info}>{legend}</LabelWithInfo> : undefined}>\n        {children}\n    </SkjemaGruppe>\n);\n\nexport default CustomInput;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow'\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n}\n\nexport type FormikValidateFunction = (value: any) => any;\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputCommonProps {\n    validate?: FormikValidateFunction;\n    info?: React.ReactNode;\n}\n","import moment from 'moment';\nimport { DatovelgerAvgrensninger } from 'nav-datovelger';\nimport { DateLimitiations } from './FormikDatepicker';\n\nconst apiDateFormat = 'YYYY-MM-DD';\n\nexport const dateToISOFormattedDateString = (date?: Date) =>\n    date ? moment.utc(date).format(apiDateFormat) : undefined;\n\nconst parseDateLimitations = (dateLimitations: DateLimitiations): DatovelgerAvgrensninger => {\n    return {\n        maksDato: dateToISOFormattedDateString(dateLimitations.maksDato),\n        minDato: dateToISOFormattedDateString(dateLimitations.minDato),\n        helgedagerIkkeTillatt: dateLimitations.helgedagerIkkeTillatt,\n        ugyldigeTidsperioder:\n            dateLimitations.ugyldigeTidsperioder &&\n            dateLimitations.ugyldigeTidsperioder.map((t: { fom: Date; tom: Date }) => ({\n                fom: dateToISOFormattedDateString(t.fom)!,\n                tom: dateToISOFormattedDateString(t.tom)!\n            }))\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (moment(value, moment.ISO_8601, true).isValid()) {\n            date = moment(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOFormattedDateString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string): Date | undefined =>\n    dateString && dateString !== 'Invalid date' ? new Date(dateString) : undefined;\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations\n};\n\nexport default datepickerUtils;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport Datovelger from 'nav-datovelger/dist/datovelger/Datovelger';\nimport useMedia from 'use-media';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport CustomInput from '../helpers/custom-input/CustomInput';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport './datepicker.less';\n\ninterface DateRange {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface DateLimitiations {\n    minDato?: Date;\n    maksDato?: Date;\n    ugyldigeTidsperioder?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n}\ninterface OwnProps<FieldName> {\n    id?: string;\n    name: FieldName;\n    label: string;\n    dateLimitations?: DateLimitiations;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    disabled?: boolean;\n    showYearSelector?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    onChange?: (date: Date | undefined) => void;\n}\n\nexport type FormikDatepickerProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nconst placeholder = 'dd.mm.åååå';\n\nfunction FormikDatepicker<FieldName>({\n    validate,\n    label,\n    dateLimitations,\n    name,\n    id,\n    info,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    onChange,\n    ...restProps\n}: FormikDatepickerProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMedia({ minWidth: 736 });\n    const elementId = id || guid();\n    const plassering = fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullskjerm' : undefined;\n    const inputName = (name || '') as string;\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>\n                            <LabelWithInfo info={info}>{label}</LabelWithInfo>\n                        </Label>\n                        <Datovelger\n                            id={elementId}\n                            {...restProps}\n                            input={{ name: inputName, placeholder, id: elementId }}\n                            valgtDato={datepickerUtils.getDateStringFromValue(field.value)}\n                            avgrensninger={\n                                dateLimitations ? datepickerUtils.parseDateLimitations(dateLimitations) : undefined\n                            }\n                            visÅrVelger={showYearSelector}\n                            kalender={{\n                                plassering\n                            }}\n                            onChange={(dateString: string) => {\n                                const date = datepickerUtils.getDateFromDateString(dateString);\n                                if (field.value !== date) {\n                                    form.setFieldValue(field.name, date);\n                                    if (onChange) {\n                                        onChange(date);\n                                    }\n                                }\n                            }}\n                        />\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCheckbox<FieldName>({\n    name,\n    label,\n    validate,\n    afterOnChange,\n    info,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import * as React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    children: React.ReactNode;\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.StatelessComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikErrors, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { NavFrontendSkjemaFeil } from '../../types';\nimport { getErrorsForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\n\nexport type FormikErrorRender<FormValues> = (error: FormikErrors<FormValues>) => NavFrontendSkjemaFeil;\n\nexport interface TypedFormikFormProps<FormValues> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    fieldErrorRenderer?: FormikErrorRender<FormValues>;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n}\n\nexport interface TypedFormikFormContextType {\n    showErrors: boolean;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    fieldErrorRenderer?: FormikErrorRender<any>;\n}\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\nexport const userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues>({\n    children,\n    onCancel,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    fieldErrorRenderer,\n    onValidSubmit,\n    includeButtons = true\n}: TypedFormikFormProps<FormValues>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount] = useState(submitCount);\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        handleSubmit(evt);\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            fieldErrorRenderer,\n            showErrors,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const errors = getErrorsForField(field.name, form.errors);\n                    if (errors) {\n                        return fieldErrorRenderer ? fieldErrorRenderer(errors) : true;\n                    }\n                }\n                return undefined;\n            }\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className}>\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type=\"flat\"\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import React from 'react';\nimport { Formik, FormikProps } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\nfunction TypedFormikWrapper<FormValues>(props: TypedFormikWrapperProps<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","import React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, {\n    FormikCountrySelectProps\n} from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikRadioPanelGroup, {\n    FormikRadioPanelGroupProps\n} from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikYesOrNoQuestion, {\n    FormikYesOrNoQuestionProps\n} from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, {\n    TypedFormikWrapperProps\n} from './typed-formik-wrapper/TypedFormikWrapper';\n\nexport function getTypedFormComponents<FieldNames, FormValues>() {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldNames>) => <FormikCheckbox<FieldNames> {...props} />,\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldNames>) => (\n            <FormikCheckboxPanelGroup<FieldNames> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldNames>) => (\n            <FormikConfirmationCheckboxPanel<FieldNames> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldNames>) => <FormikCountrySelect<FieldNames> {...props} />,\n        DatePicker: (props: FormikDatepickerProps<FieldNames>) => <FormikDatepicker<FieldNames> {...props} />,\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldNames>) => (\n            <FormikDateIntervalPicker<FieldNames> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldNames>) => <FormikFileInput<FieldNames> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldNames>) => <FormikInput<FieldNames> {...props} />,\n        InputGroup: (props: FormikInputGroupProps<FieldNames>) => <FormikInputGroup<FieldNames> {...props} />,\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldNames>) => (\n            <FormikRadioPanelGroup<FieldNames> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldNames>) => <FormikSelect<FieldNames> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldNames>) => <FormikTextarea<FieldNames> {...props} />,\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldNames>) => (\n            <FormikYesOrNoQuestion<FieldNames> {...props} />\n        )\n    };\n}\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikRadioPanelGroup<FieldName>({\n    name,\n    validate,\n    legend,\n    radios,\n    info,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt, value) => form.setFieldValue(field.name, value)}\n                        radios={radios.map((rb) => ({\n                            name: `${name}`,\n                            ...rb\n                        }))}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","export { default as TypedFormikForm, TypedFormikFormContext } from './components/typed-formik-form/TypedFormikForm';\nexport { default as TypedFormikWrapper } from './components/typed-formik-wrapper/TypedFormikWrapper';\nexport { default as FormikValidationErrorSummary } from './components/formik-validation-error-summary/FormikValidationErrorSummary';\nexport { default as FormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCustomInputWrapper } from './components/formik-custom-input-wrapper/FormikCustomInputWrapper';\nexport { default as TypedFormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCheckboxPanelGroup } from './components/formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nexport { default as FormikConfirmationCheckboxPanel } from './components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nexport { default as FormikCountrySelect } from './components/formik-country-select/FormikCountrySelect';\nexport { default as FormikDateIntervalPicker } from './components/formik-date-interval-picker/FormikDateIntervalPicker';\nexport { default as FormikDatepicker } from './components/formik-datepicker/FormikDatepicker';\nexport { default as FormikFileInput } from './components/formik-file-input/FormikFileInput';\nexport { default as FormikInput } from './components/formik-input/FormikInput';\nexport { default as FormikInputGroup } from './components/formik-input-group/FormikInputGroup';\nexport { default as FormikModalFormAndList } from './components/formik-modal-form-and-list/FormikModalFormAndList';\nexport { default as FormikRadioPanelGroup } from './components/formik-radio-panel-group/FormikRadioPanelGroup';\nexport { default as FormikSelect } from './components/formik-select/FormikSelect';\nexport { default as FormikTextarea } from './components/formik-textarea/FormikTextarea';\nexport { default as FormikYesOrNoQuestion } from './components/formik-yes-or-no-question/FormikYesOrNoQuestion';\n\nexport * from './types';\nexport * from './utils/countryUtils';\nexport * from './utils/formikUtils';\nexport * from './utils/typedFormErrorUtils';\nexport * from './components/getTypedFormComponents';\nexport * from './components/formik-modal-form-and-list/types';\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return fieldValues.includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    info,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value)\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName> = OwnProps<FieldName> &\n    Omit<TypedFormInputCommonProps, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName>({\n    children,\n    name,\n    feil,\n    validate,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (isoCode: string, locale: string): string => {\n    const names = countries.getNames(locale);\n    return names[isoCode];\n};\n\nexport const getCountries = () => countries;\n","import * as React from 'react';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName> {\n    legend: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName>;\n    toDatepickerProps: FormikDatepickerProps<FieldName>;\n    info?: string;\n}\n\nfunction FormikDateIntervalPicker<FieldName>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    info\n}: DateIntervalPickerProps<FieldName>) {\n    return (\n        <SkjemaGruppe legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>} className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName> {...toDatepickerProps} />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikInputGroup<FieldName>({\n    name,\n    legend,\n    feil,\n    children,\n    info,\n    validate,\n    ...restProps\n}: FormikInputGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {children}\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ntype InputMode = 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n    inputmode?: InputMode;\n}\n\nconst getPatternForInputMode = (inputMode?: InputMode): string | undefined => {\n    switch (inputMode) {\n        case 'numeric':\n            return '[0-9]*';\n        default:\n            return undefined;\n    }\n};\n\nexport type FormikInputProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikInput<FieldName>({\n    label,\n    name,\n    info,\n    feil,\n    validate,\n    inputMode,\n    ...restProps\n}: FormikInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Input\n                        {...restProps}\n                        {...field}\n                        inputMode={inputMode}\n                        pattern={getPatternForInputMode(inputMode)}\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikSelect<FieldName>({\n    label,\n    name,\n    children,\n    validate,\n    info,\n    feil,\n    ...restProps\n}: FormikSelectProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikTextarea<FieldName>({\n    label,\n    name,\n    validate,\n    info,\n    feil,\n    ...restProps\n}: FormikTextareaProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                        }}\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","import * as React from 'react';\nimport { TypedFormInputCommonProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, {\n    FormikRadioPanelGroupProps\n} from '../formik-radio-panel-group/FormikRadioPanelGroup';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\n\nexport interface FormikYesOrNoQuestionProps<FieldName> extends Omit<FormikRadioPanelGroupProps<FieldName>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName>({\n    legend,\n    name,\n    includeDoNotKnowOption,\n    labels,\n    info,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName> & TypedFormInputCommonProps) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : [])\n            ]}\n            {...restProps}\n            legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n            name={name}\n            useTwoColumns={true}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef(null);\n    useEffect(() => {\n        if (summaryEl.current !== null) {\n            const node: any = findDOMNode(summaryEl.current);\n            if (node && node.focus) {\n                node.focus();\n            }\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            ref={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllErrors } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const allErrors = !formik.isValid && getAllErrors(formik);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = allErrors\n            ? Object.keys(allErrors).map((key) => {\n                  const error = allErrors[key];\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorRenderer ? context.fieldErrorRenderer(error) : error,\n                      skjemaelementId: key\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import * as React from 'react';\n\nfunction UploadSvg(props) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import * as React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport CustomInput from '../../helpers/custom-input/CustomInput';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <CustomInput feil={feil} className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\"\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </CustomInput>\n        );\n    }\n}\n","import * as React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick\n}: FormikFileInputProps<FieldName> & TypedFormInputCommonProps) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import * as React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst isoCodeIndex = 0;\nconst countryNameIndex = 1;\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale\n            )\n        };\n    }\n\n    getCountryOptions(locale): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)}>\n                <option value=\"\" />\n                {this.getCountryOptions(locale)}\n            </Select>\n        );\n    }\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (onluEuAndEftaCountries: boolean, locale: string): React.ReactNode[] => {\n    const localeToUse = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n    return Object.entries(countries.getNames(localeToUse))\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], localeToUse))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[isoCodeIndex], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option key={countryOptionValue[isoCodeIndex]} value={countryOptionValue[isoCodeIndex]}>\n                {countryOptionValue[countryNameIndex]}\n            </option>\n        ));\n};\n\nexport default CountrySelect;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCountrySelect<FieldName>({\n    label,\n    name,\n    feil,\n    validate,\n    info,\n    showOnlyEuAndEftaCountries\n}: FormikCountrySelectProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => form.setFieldValue(field.name, value)}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import flatten from 'flat';\nimport { FieldInputProps, FormikErrors, FormikProps, getIn } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { NavFrontendSkjemaFeil } from '../types';\n\n// import { FeiloppsummeringFeil } from 'nav-frontend-skjema';\n// import { FormikErrorRender } from '../components/typed-formik-form/TypedFormikForm';\n\ninterface ErrorNodeInObject {\n    field: string;\n    error: {\n        key: string;\n        values: object;\n    };\n}\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorsForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): FormikErrors<FormValues> | undefined => {\n    return getIn(errors, elementName);\n};\n\nexport const isValidationErrorsVisible = (form: FormikProps<any>): boolean => {\n    if (form) {\n        const { status: formikStatus, submitCount } = form;\n        return formikStatus !== undefined && formikStatus.stepSubmitCount !== undefined\n            ? submitCount > formikStatus.stepSubmitCount\n            : formikStatus?.showErrors === true;\n    }\n    return true;\n};\n\nexport function flattenFieldArrayErrors<FormValues>(errors: FormValues): FormValues {\n    let allErrors: any = {};\n    Object.keys(errors).forEach((key) => {\n        const error = errors[key];\n        if (isFieldArrayErrors(error)) {\n            (error as FormValues[]).forEach((err, idx) => {\n                allErrors = {\n                    ...allErrors,\n                    ...getErrorsFromFieldArrayErrors(err, key, idx)\n                };\n            });\n        } else if (error.key) {\n            allErrors[key] = error;\n        } else if (typeof error === 'object') {\n            const errorNode = findErrorNodeInObject(key, error);\n            if (errorNode) {\n                allErrors[errorNode.field] = errorNode.error;\n            }\n        }\n    });\n    return allErrors;\n}\n\nconst findErrorNodeInObject = (key: string, error: object): undefined | ErrorNodeInObject => {\n    const flatError: object = flatten({ [key]: error });\n    const keys = Object.keys(flatError);\n    if (keys.length === 2) {\n        const field = keys[0].split('.key')[0];\n        return {\n            field,\n            error: {\n                key: flatError[keys[0]],\n                values: flatten.unflatten(flatError[keys[1]])\n            }\n        };\n    }\n    return undefined;\n};\n\nconst isFieldArrayErrors = (error: any): boolean => {\n    if (typeof error === 'object' && error.length && error.length > 0) {\n        return true;\n    }\n    return false;\n};\n\nfunction getErrorsFromFieldArrayErrors<FieldName>(field: FieldName, fieldArrayKey: string, index: number): {} {\n    const errors: any = {};\n    Object.keys(field).forEach((key) => {\n        errors[`${fieldArrayKey}.${index}.${key}`] = field[key];\n    });\n    return errors;\n}\n\nexport function getAllErrors<FormValues>(formik: FormikProps<FormValues>): FormikErrors<FormValues> | undefined {\n    const { errors } = formik;\n    if (errors) {\n        const numberOfErrors = Object.keys(errors).length;\n        if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n            return flattenFieldArrayErrors(errors);\n        }\n    }\n    return undefined;\n}\n\n// export function getValidationSummaryErrorsWithIntl<FormValues>(\n//     formik: FormikProps<FormValues>,\n//     intl: IntlShape\n// ): FeiloppsummeringFeil[] | undefined {\n//     const { errors } = formik;\n//     if (errors) {\n//         const numberOfErrors = Object.keys(errors).length;\n//         const errorMessages: FeiloppsummeringFeil[] = [];\n\n//         if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n//             const allErrors = flattenFieldArrayErrors(errors);\n//             Object.keys(allErrors).forEach((key) => {\n//                 const error = allErrors[key];\n//                 const message = isFieldValidationError(error) ? renderFieldValidationError(intl, error) : error;\n//                 if (message && typeof message === 'string') {\n//                     errorMessages.push({\n//                         skjemaelementId: key,\n//                         feilmelding: message\n//                     });\n//                 }\n//             });\n\n//             if (errorMessages.length > 0) {\n//                 return errorMessages;\n//             }\n//         }\n//     }\n//     return undefined;\n// }\n\n// export const getFieldErrorMessage = (\n//     field: FieldInputProps<any>,\n//     form: FormikProps<any>,\n//     intl: IntlShape\n// ): React.ReactNode | undefined => {\n//     if (isValidationErrorsVisible(form)) {\n//         return getValidationErrorWithIntl(intl, form.errors, field.name);\n//     }\n//     return undefined;\n// };\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames\n});\n\nexport default bemUtils;\n","import * as React from 'react';\nimport Hjelpetekst from 'nav-frontend-hjelpetekst';\nimport { Element } from 'nav-frontend-typografi';\nimport './labelWithInfo.less';\n\ninterface LabelWithHelperText {\n    children: React.ReactNode;\n    info?: React.ReactNode;\n}\n\nconst LabelWithInfo: React.FunctionComponent<LabelWithHelperText> = ({ children, info }) => {\n    if (!children) {\n        return null;\n    }\n    if (info === undefined) {\n        return <Element tag=\"span\">{children}</Element>;\n    }\n    return (\n        <Element tag=\"span\" className=\"labelWithInfo\">\n            {children}\n            {info && <Hjelpetekst className=\"labelWithInfo__info\">{info}</Hjelpetekst>}\n        </Element>\n    );\n};\n\nexport default LabelWithInfo;\n"],"sourceRoot":""}