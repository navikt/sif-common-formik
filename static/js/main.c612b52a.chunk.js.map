{"version":3,"sources":["typed-formik-form/components/formik-date-range-picker/dateRangePickerUtils.ts","typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker.tsx","typed-formik-form/components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo.tsx","typed-formik-form/components/helpers/label-with-info/LabelWithInfo.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/index.ts","typed-formik-form/components/helpers/skjemagruppe-question/SkjemagruppeQuestion.tsx","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/types/index.ts","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","typed-formik-form/validation/getCheckedValidator.ts","typed-formik-form/validation/getDateValidator.ts","typed-formik-form/validation/validationUtils.ts","typed-formik-form/validation/getDateRangeValidator.ts","typed-formik-form/validation/getRequiredFieldValidator.ts","typed-formik-form/validation/getFødselsnummerValidator.ts","typed-formik-form/validation/getListValidator.ts","typed-formik-form/validation/getNumberValidator.ts","typed-formik-form/validation/getOrgNumberValidator.ts","typed-formik-form/validation/getStringValidator.ts","typed-formik-form/validation/getYesOrNoValidator.ts","typed-formik-form/validation/types.ts","typed-formik-form/validation/intlFormErrorHandler.ts","typed-formik-form/validation/fallbackValidationMessages.ts","dev/components/app-intl-provider/messages.ts","dev/examples/formik-example/ferieuttak-example/ferieuttakMessages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","dev/examples/formik-example/ferieuttak-example/types.ts","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","dev/components/question/Question.tsx","dev/components/tiles/Tiles.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakForm.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakListAndDialog.tsx","dev/examples/formik-example/types.ts","dev/examples/formik-example/typed-form-example/Siblings.tsx","dev/examples/validering-example/types.ts","dev/examples/formik-example/typed-form-example/TypedFormExample.tsx","dev/examples/formik-example/FormikExample.tsx","dev/components/validation-errors/ValidationErrorList.tsx","dev/examples/validering-example/ValideringPanel.tsx","dev/examples/validering-example/ValideringExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/utils/bemUtils.ts","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-number-input/FormikNumberInput.tsx","typed-formik-form/components/formik-radio-group/FormikRadioGroup.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal/Modal.tsx"],"names":["dayjs","extend","isSameOrBefore","minMax","sortDateRange","d1","d2","from","sortDateRangeByToDate","to","findClosestDateAfterDate","fromDate","dates","dayjss","map","d","filter","m","isAfter","length","min","toDate","undefined","getClosestDateRangeBeforeDate","date","ranges","rangesBeforeDate","dateRange","isBefore","getRangesEndingBeforeDate","sort","reverse","getClosestDateRangeAfterDate","rangesAfterDate","getRangesStartingAfterDate","getFollowingDate","allowRangesToStartAndStopOnSameDate","subtract","getMaxDateForRangeStart","maxDate","otherRanges","dateRanges","follwingDateRange","followingRangeeDate","getMaxDateForRangeEnd","baseDate","followingDate","getPreceedingDate","add","getMinDateForRangeStart","minDate","preceedingDateRange","preceedingDate","max","findClosestDateBeforeDate","getMinDateForRangeEnd","findClosestDateBeforeOrEqualDate","FormikDateRangePicker","props","legend","fromInputProps","toInputProps","description","disableWeekend","disabledDateRanges","showYearSelector","fullScreenOnMobile","fullscreenOverlay","locale","values","useFormikContext","ISOStringToDate","name","fromDateLimitations","toDateLimitations","tag","className","FormikDatepicker","ModalFormAndList","items","listRenderer","formRenderer","labels","error","dialogWidth","maxItems","onChange","React","useState","isVisible","modalState","setModalState","resetModal","selectedItem","showListTitle","Modal","isOpen","contentLabel","modalTitle","onRequestClose","DialogFormWrapper","width","onSubmit","id","item","guid","onCancel","allItems","SkjemagruppeQuestion","listTitle","feil","onEdit","onDelete","i","emptyListText","style","paddingBottom","marginTop","htmlType","onClick","mini","addLabel","FormikModalFormAndList","sortFunc","onAfterChange","validate","context","useContext","TypedFormikFormContext","value","field","form","getAndRenderFieldErrorMessage","updatedValues","setFieldValue","onAfterFieldValueSet","ButtonRow","children","align","layout","cls","Children","knapp","index","createContext","TypedFormikForm","oldProps","currentProps","resetFormOnCancel","includeValidationSummary","submitButtonLabel","cancelButtonLabel","includeButtons","runDelayedFormValidation","cancelButtonType","formErrorHandler","onValidSubmit","noButtonsContentRenderer","cleanup","formik","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValid","isValidating","formSubmitCount","setFormSubmitCout","hasCleanedUp","counter","cleanupState","setCleanupState","ref","useRef","useEffect","current","showErrors","evt","stopPropagation","preventDefault","setValues","runCleanup","noValidate","autoComplete","Provider","isValidationErrorsVisible","fieldErrorHandler","fieldName","isHandledErrorTypeChecker","isHandledErrorTypeFunc","getErrorForField","errors","status","setTimeout","validateForm","createTypedFormikFormContext","FormikValidationErrorSummary","type","getFeilPropForFormikInput","elementName","fieldErrors","getIn","Array","isArray","getAllFieldsWithErrors","allErrors","errorObjectChecker","getFieldsWithErrors","keys","parentKey","createFieldKey","Object","forEach","key","err","idx","isObject","push","isoStringFormat","dateToISOString","format","dateString","getDateFromDateString","isISODateString","Date","datepickerUtils","getDateStringFromValue","parseDateLimitations","invalidDateRanges","weekendsNotSelectable","getLocaleToUse","label","inputTitle","placeholder","restProps","isWide","useMedia","minWidth","elementId","position","inputName","intl","useIntl","isInvalid","htmlFor","inputId","inputProps","title","limitations","calendarSettings","YesOrNo","TypedFormikWrapper","initialValues","renderFormContent","renderForm","setSubmitting","setTouched","ValidateCheckedError","ValidateDateError","getCheckedValidator","notChecked","hasValue","isSameOrAfter","isoWeek","ValidateDateRangeError","getDateValidator","options","required","onlyWeekdays","getRequiredFieldValidator","invalidDateFormat","dateBeforeMin","dateAfterMax","isoWeekday","dateNotWeekday","ValidateRequiredFieldError","getDateRangeValidator","validateFromDate","dateError","fromDateIsAfterToDate","validateToDate","toDateIsBeforeFromDate","ValidateFødselsnummerError","noValue","ValidateListError","getFødselsnummerValidator","disallowedValues","result","fnrvalidator","fnr","reasons","includes","fødselsnummerNot11Chars","invalidFødselsnummer","some","f","disallowedFødselsnummer","ValidateNumberError","getListValidator","minItems","numItems","listIsEmpty","listHasTooFewItems","listHasTooManyItems","ValidateOrgNumberError","getNumberFromStringInput","inputValue","isNaN","replace","numValue","Number","getNumberValidator","numberValue","invalidNumberFormat","numberIsTooSmall","numberIsTooLarge","ValidateStringError","isValidOrgNumber","test","charAt","strValue","checkNbr","mod","parseInt","getMod11","getOrgNumberValidator","isValidFormat","invalidOrgNumberFormat","ValidateYesOrNoError","getStringValidator","minLength","maxLength","notAString","stringIsTooShort","stringIsTooLong","getYesOrNoValidator","YES","NO","DO_NOT_KNOW","yesOrNoIsUnanswered","isIntlErrorObject","createFieldErrorIntlKey","errorPrefix","getFieldErrorHandler","formatMessage","keepKeyUnaltered","getIntlFormErrorHandler","fallbackValidationIntlKeys","fallbackValidationMessages","nb","nn","appMessages","ferieuttakMessages","require","allMessages","ferieMessages","AppIntlProvider","onError","messages","NAVLogo","Ferieland","viewBox","fill","fillRule","bemUtils","block","element","e","modifier","modifierConditional","condition","child","c","classNames","bem","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","Question","marginBottom","FerieuttakFormFields","getTypedFormComponents","FerieuttakListAndDialog","FormFields","Form","TypedFormExample","YesOrNoQuestion","hasKids","question","Input","fødselsnummer","validations","validateFunc","validationResult","validateAll","ferieuttak","fom","tom","land","friends","letters","FormikExample","console","log","ValidationErrorList","info","example","ValideringPanel","code","activePanel","setActivePanel","tabs","_evt","language","docco","liste","ValideringExample","tidsperiode_fra","tidsperiode_til","jaNeiSpørsmål","tekst","bredde","NumberInput","tall","DatePicker","dato","DateRangePicker","dayPickerProps","initialMonth","orgnummer","CheckboxPanelGroup","checkboxes","RadioPanelGroup","radio","radios","CountrySelect","select","Checkbox","checked","Intro","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","withRouter","routeConfig","find","getRouteConfig","history","maxWidth","DevPage","App","setAppElement","ReactDOM","render","document","getElementById","FormikInputGroup","feilProp","isRenderableErrorMsgType","aria-live","tabIndex","FormikInput","suffix","suffixStyle","harFeil","feilMessageId","aria-errormessage","aria-hidden","FormikRadioPanelGroup","useTwoColumns","rb","handleTimeChange","time","hours","minutes","getNewTime","stateTime","TimeInput","maxHours","maxMinutes","setStateTime","Math","hoursLabelId","minutesLabelId","newTime","target","onBlur","FormikTimeInput","FormikCheckbox","afterOnChange","newValue","isCheckboxChecked","fieldValues","FormikCheckboxPanelGroup","cb","keyProp","el","FormikConfirmationCheckboxPanel","countries","getCountries","FormikDateIntervalPicker","fromDatepickerProps","toDatepickerProps","FormikNumberInput","integerValue","inputMode","pattern","FormikRadioGroup","isSelected","FormikSelect","FormikTextarea","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","ConfirmationCheckbox","DateIntervalPicker","FileInput","FormikWrapper","InputGroup","RadioGroup","Select","Textarea","ValidationErrorLink","href","stopClickEvent","ValidationSummary","errorMessages","summaryEl","focus","innerRef","tittel","customFeilRender","elementById","skjemaelementId","elementByName","getElementsByName","feilmelding","fieldsWithErrors","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fileSelectHandler","bind","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","files","this","onFilesSelect","dataTransfer","inputElement","which","click","multiple","acceptedExtensions","role","onDragOver","onDrop","accept","Component","FormikFileInput","arrayHelpers","filteredListEØSCountries","countryOptionValue","shouldFilter","createCountryOptions","onluEuAndEftaCountries","useAlpha3Code","lang","names","entries","getNames","a","b","localeCompare","alpha2ToAlpha3","countryOptionsCache","getCountryOptions","updateCache","showOnlyEuAndEftaCountries","FormikCountrySelect","shouldCloseOnOverlayClick"],"mappings":"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","file":"static/js/main.c612b52a.chunk.js","sourcesContent":["import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport minMax from 'dayjs/plugin/minMax';\nimport { DateRange } from '../../types';\nimport { DatepickerLimitiations } from '../formik-datepicker/FormikDatepicker';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(minMax);\n\nconst sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nconst sortDateRangeByToDate = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.to).isSameOrBefore(d2.to)) {\n        return -1;\n    }\n    return 1;\n};\nexport const getRangesStartingAfterDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.from).isAfter(date, 'day'));\n};\n\nexport const getRangesEndingBeforeDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.to).isBefore(date, 'day'));\n};\n\nexport const findClosestDateAfterDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isAfter(fromDate, 'day'));\n    return dayjss.length > 0 ? dayjs.min(dayjss).toDate() : undefined;\n};\n\nexport const findClosestDateBeforeDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const findClosestDateBeforeOrEqualDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isSameOrBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const getClosestDateRangeBeforeDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesBeforeDate = getRangesEndingBeforeDate(date, ranges).sort(sortDateRangeByToDate).reverse();\n    return rangesBeforeDate.length === 0 ? undefined : rangesBeforeDate[0];\n};\n\nexport const getClosestDateRangeAfterDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesAfterDate = getRangesStartingAfterDate(date, ranges).sort(sortDateRange);\n    return rangesAfterDate.length === 0 ? undefined : rangesAfterDate[0];\n};\n\nconst getFollowingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.from : dayjs(dateRange.from).subtract(1, 'day').toDate();\n};\n\nexport const getMaxDateForRangeStart = ({\n    fromDate,\n    toDate,\n    maxDate,\n    otherRanges: dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    otherRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!fromDate) {\n        return toDate || maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(fromDate, dateRanges);\n    const followingRangeeDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(toDate ? [toDate] : []),\n        ...(maxDate ? [maxDate] : []),\n        ...(followingRangeeDate ? [followingRangeeDate] : []),\n    ];\n    return findClosestDateAfterDate(fromDate, dates);\n};\nexport const getMaxDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    maxDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(baseDate, dateRanges);\n    const followingDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(maxDate ? [maxDate] : []), ...(followingDate ? [followingDate] : [])];\n    return findClosestDateAfterDate(baseDate, dates);\n};\n\nconst getPreceedingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.to : dayjs(dateRange.to).add(1, 'day').toDate();\n};\n\nexport const getMinDateForRangeStart = ({\n    toDate,\n    minDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!toDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(toDate, dateRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(minDate ? [minDate] : []), ...(preceedingDate ? [preceedingDate] : [])];\n    return findClosestDateBeforeDate(toDate, dates);\n};\n\nexport const getMinDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    minDate,\n    dateRanges: otherRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(baseDate, otherRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(fromDate ? [fromDate] : []),\n        ...(minDate ? [minDate] : []),\n        ...(preceedingDate ? [preceedingDate] : []),\n    ];\n    return findClosestDateBeforeOrEqualDate(baseDate, dates);\n};\n\ninterface DateRangePickerLimitations {\n    fromDateLimitations: DatepickerLimitiations;\n    toDateLimitations: DatepickerLimitiations;\n}\n\nexport const getDateRangePickerLimitations = (props: {\n    /** Selected from date */\n    fromDate?: Date;\n    /** Selected to date */\n    toDate?: Date;\n    /** Min allowed date */\n    minDate?: Date;\n    /** Max allowed date */\n    maxDate?: Date;\n    /** Other date ranges which become disabled in the datepicker */\n    dateRanges?: DateRange[];\n    /** Disallow selection of saturday and sunday */\n    disableWeekend?: boolean;\n    /** Allow one dateRange to start on the same date another ends */\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): DateRangePickerLimitations => {\n    return {\n        fromDateLimitations: {\n            minDate: getMinDateForRangeStart(props),\n            maxDate: getMaxDateForRangeStart(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n        toDateLimitations: {\n            minDate: getMinDateForRangeEnd(props),\n            maxDate: getMaxDateForRangeEnd(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n    };\n};\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { ISOStringToDate } from '../formik-datepicker/datepickerUtils';\nimport FormikDatepicker, {\n    DatePickerBaseProps,\n    DatepickerLimitiations,\n    DatePickerPresentationProps,\n} from '../formik-datepicker/FormikDatepicker';\nimport { getDateRangePickerLimitations } from './dateRangePickerUtils';\nimport './dateRangePicker.less';\n\ninterface OwnProps<FieldName, ErrorType> {\n    legend?: string;\n    description?: React.ReactNode;\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    locale?: string;\n    allowRangesToStartAndStopOnSameDate?: boolean;\n    fromInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n    toInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n}\n\nexport type FormikDateRangePickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nfunction FormikDateRangePicker<FieldName, ErrorType>({\n    legend,\n    fromInputProps,\n    toInputProps,\n    description,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    showYearSelector,\n    fullScreenOnMobile,\n    fullscreenOverlay,\n    allowRangesToStartAndStopOnSameDate,\n    locale,\n}: FormikDateRangePickerProps<FieldName, ErrorType>) {\n    const { values } = useFormikContext<any>();\n    const fromDate = ISOStringToDate(values[fromInputProps.name]);\n    const toDate = ISOStringToDate(values[toInputProps.name]);\n    const { fromDateLimitations, toDateLimitations } = getDateRangePickerLimitations({\n        fromDate,\n        toDate,\n        minDate,\n        maxDate,\n        dateRanges: disabledDateRanges,\n        disableWeekend,\n        allowRangesToStartAndStopOnSameDate,\n    });\n    return (\n        <SkjemaGruppe\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateRangePicker\">\n            <div className=\"dateRangePicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...fromInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...fromDateLimitations}\n                    {...locale}\n                />\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...toInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...toDateLimitations}\n                    {...locale}\n                />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateRangePicker;\n","import React from 'react';\nimport Alertstripe from 'nav-frontend-alertstriper';\nimport './unansweredQuestionsInfo.less';\n\nconst UnansweredQuestionsInfo: React.FunctionComponent = ({ children }) => (\n    <div className=\"unansweredQuestionsInfo\">\n        <Alertstripe type=\"info\" form=\"inline\">\n            {children}\n        </Alertstripe>\n    </div>\n);\n\nexport default UnansweredQuestionsInfo;\n","import React from 'react';\nimport Hjelpetekst from 'nav-frontend-hjelpetekst';\nimport { PopoverOrientering } from 'nav-frontend-popover';\nimport { Element } from 'nav-frontend-typografi';\nimport './labelWithInfo.less';\n\ninterface LabelWithHelperText {\n    info?: React.ReactNode;\n    infoPlassering?: PopoverOrientering;\n}\n\nconst LabelWithInfo: React.FunctionComponent<LabelWithHelperText> = ({\n    children,\n    info,\n    infoPlassering = PopoverOrientering.Over,\n}) => {\n    if (!children) {\n        return null;\n    }\n    if (info === undefined) {\n        return <Element tag=\"span\">{children}</Element>;\n    }\n\n    const partialPopoverProps: any = {\n        orientering: infoPlassering,\n    };\n    return (\n        <Element tag=\"span\" className=\"labelWithInfo\">\n            {children}\n            {info && (\n                <Hjelpetekst popoverProps={partialPopoverProps} className=\"labelWithInfo__info\">\n                    {info}\n                </Hjelpetekst>\n            )}\n        </Element>\n    );\n};\n\nexport default LabelWithInfo;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport DialogFormWrapper, { DialogFormWrapperWidths } from '../dialog-form-wrapper/DialogFormWrapper';\nimport Modal from '../modal/Modal';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    allItems?: ItemType[];\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    maxItems?: number;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    maxItems,\n    onChange,\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false,\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    const showListTitle = items.length > 0;\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({\n                        onSubmit: handleOnSubmit,\n                        onCancel: resetModal,\n                        item: modalState.selectedItem,\n                        allItems: items,\n                    })}\n                </DialogFormWrapper>\n            </Modal>\n            <SkjemagruppeQuestion legend={showListTitle ? labels.listTitle : undefined} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                {(maxItems === undefined || maxItems > items.length) && (\n                    <div\n                        style={showListTitle ? { marginTop: '1rem' } : undefined}\n                        className={'modalFormAndList__addButton'}>\n                        <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })} mini={true}>\n                            {labels.addLabel}\n                        </Knapp>\n                    </div>\n                )}\n            </SkjemagruppeQuestion>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType, ErrorType>\n    extends ModalFormAndListProps<ItemType>,\n        TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType, ErrorType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    maxItems,\n    validate,\n}: FormikModalFormAndListProps<FieldName, ItemType, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate ? (value) => validate(value, name) : undefined}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        maxItems={maxItems}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","import React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.FunctionComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport {\n    CancelButtonTypes,\n    CustomFormErrorHandler,\n    ErrorTypeChecker,\n    FieldErrorHandler,\n    NavFrontendSkjemaFeil,\n} from '../../types';\nimport { getErrorForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\n\nexport interface TypedFormikFormProps<FormValues, ErrorType> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    id?: string;\n    cancelButtonType?: CancelButtonTypes;\n    runDelayedFormValidation?: boolean;\n    formErrorHandler?: CustomFormErrorHandler<ErrorType>;\n    noButtonsContentRenderer?: () => React.ReactNode;\n    cleanup?: (values: FormValues) => FormValues;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n}\n\nexport type TypedFormikFormContextType = {\n    showErrors: boolean;\n    fieldErrorHandler?: FieldErrorHandler<any>;\n    isHandledErrorTypeChecker?: ErrorTypeChecker<any>;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    onAfterFieldValueSet: () => void;\n};\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\n\nconst userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues, ErrorType>({\n    children,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    id,\n    includeButtons = true,\n    runDelayedFormValidation,\n    cancelButtonType,\n    formErrorHandler,\n    onCancel,\n    onValidSubmit,\n    noButtonsContentRenderer,\n    cleanup,\n}: TypedFormikFormProps<FormValues, ErrorType>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount, setFormSubmitCout] = useState(submitCount);\n    const [cleanupState, setCleanupState] = useState({ hasCleanedUp: false, counter: 0 });\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid,\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                if (isValid) {\n                    setFormSubmitCout(submitCount);\n                }\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    useEffect(() => {\n        cleanupState.hasCleanedUp && handleSubmit();\n    }, [cleanupState, handleSubmit]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const runCleanup = (evt: React.FormEvent<HTMLFormElement>) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        formik.setValues(cleanup ? cleanup(formik.values) : formik.values);\n        setCleanupState({ hasCleanedUp: true, counter: cleanupState.counter + 1 });\n    };\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        setCleanupState({ ...cleanupState, hasCleanedUp: false });\n        if (cleanup !== undefined) {\n            runCleanup(evt);\n        } else {\n            handleSubmit(evt);\n        }\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            showErrors,\n            fieldErrorHandler: (error, fieldName) => {\n                return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, fieldName) : error;\n            },\n            isHandledErrorTypeChecker: formErrorHandler?.isHandledErrorTypeFunc,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const error = getErrorForField(field.name, form.errors);\n                    if (error) {\n                        return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, field.name) : error;\n                    }\n                }\n                return undefined;\n            },\n            onAfterFieldValueSet: () => {\n                if (runDelayedFormValidation && formik.status && formik.status.showErrors) {\n                    setTimeout(() => {\n                        formik.validateForm();\n                    });\n                }\n            },\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className} id={id} autoComplete=\"off\">\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && isValidationErrorsVisible(formik) && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type={cancelButtonType || 'flat'}\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n                {includeButtons === false && noButtonsContentRenderer && (\n                    <div style={{ marginTop: '2rem' }}>{noButtonsContentRenderer()}</div>\n                )}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import { FieldInputProps, FormikErrors, FormikProps, getIn, isObject } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { ErrorTypeChecker, NavFrontendSkjemaFeil } from '../types';\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context,\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): any | undefined => {\n    const fieldErrors: Array<string> | string = getIn(errors, elementName);\n    if (fieldErrors === null) {\n        return undefined;\n    }\n    if (Array.isArray(fieldErrors)) {\n        if (fieldErrors.length === 1 && fieldErrors[0] === null) {\n            /** Filter out fieldArray errors containing only null item */\n            return undefined;\n        }\n        if (fieldErrors.length >= 1) {\n            return fieldErrors[0];\n        }\n    } else {\n        return fieldErrors;\n    }\n};\n\nexport const isValidationErrorsVisible = (formik: FormikProps<any>): boolean => {\n    return formik?.status?.showErrors === true;\n};\n\nexport const getAllFieldsWithErrors = (allErrors: any, errorObjectChecker?: ErrorTypeChecker): string[] => {\n    const getFieldsWithErrors = (errors: any, keys: string[] = [], parentKey?: string): string[] => {\n        const createFieldKey = (fieldName: string): string => {\n            return parentKey ? `${parentKey}.${fieldName}` : fieldName;\n        };\n        if (errors) {\n            Object.keys(errors).forEach((key) => {\n                const error = errors[key];\n                if (Array.isArray(error)) {\n                    error.forEach((err, idx) => {\n                        getFieldsWithErrors(err, keys, createFieldKey(`${key}.${idx}`));\n                    });\n                } else {\n                    if (isObject(error)) {\n                        if (errorObjectChecker && errorObjectChecker(error)) {\n                            keys.push(createFieldKey(key));\n                            return;\n                        }\n                        return getFieldsWithErrors(error, keys, createFieldKey(`${key}`));\n                    }\n                    keys.push(createFieldKey(key));\n                }\n            });\n        }\n        return keys;\n    };\n    return getFieldsWithErrors(allErrors, []);\n};\n","import dayjs from 'dayjs';\nimport { DatepickerLimitations, DatepickerDateRange, isISODateString } from 'nav-datovelger';\nimport { DatepickerLimitiations } from './FormikDatepicker';\n\nconst isoStringFormat = 'YYYY-MM-DD';\n\nexport const dateToISOString = (date?: Date) => (date ? dayjs(date).format(isoStringFormat) : '');\nexport const ISOStringToDate = (dateString = ''): Date | undefined => getDateFromDateString(dateString);\n\nconst parseDateLimitations = ({\n    minDate,\n    maxDate,\n    disabledDateRanges = [],\n    disableWeekend,\n}: DatepickerLimitiations): DatepickerLimitations => {\n    const invalidDateRanges: DatepickerDateRange[] = disabledDateRanges.map((d) => ({\n        from: dateToISOString(d.from),\n        to: dateToISOString(d.to),\n    }));\n    return {\n        minDate: minDate ? dateToISOString(minDate) : undefined,\n        maxDate: maxDate ? dateToISOString(maxDate) : undefined,\n        weekendsNotSelectable: disableWeekend,\n        invalidDateRanges,\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (isISODateString(value) === false) {\n            return value;\n        }\n        if (dayjs(value, isoStringFormat, true).isValid()) {\n            date = dayjs(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string | undefined): Date | undefined => {\n    if (dateString === undefined) {\n        return undefined;\n    }\n    if (isISODateString(dateString)) {\n        return new Date(dateString);\n    }\n    return undefined;\n};\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations,\n};\n\nexport default datepickerUtils;\n","export { default as FormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCheckboxPanelGroup } from './components/formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nexport { default as FormikConfirmationCheckboxPanel } from './components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nexport { default as FormikCountrySelect } from './components/formik-country-select/FormikCountrySelect';\nexport { default as FormikDateIntervalPicker } from './components/formik-date-interval-picker/FormikDateIntervalPicker';\nexport { default as FormikDatepicker } from './components/formik-datepicker/FormikDatepicker';\nexport { default as FormikFileInput } from './components/formik-file-input/FormikFileInput';\nexport { default as FormikInput } from './components/formik-input/FormikInput';\nexport { default as FormikNumberInput } from './components/formik-number-input/FormikNumberInput';\nexport { default as FormikInputGroup } from './components/formik-input-group/FormikInputGroup';\nexport { default as FormikModalFormAndList } from './components/formik-modal-form-and-list/FormikModalFormAndList';\nexport { default as FormikModalFormAndInfo } from './components/formik-modal-form-and-list/FormikModalFormAndInfo';\nexport { default as FormikRadioPanelGroup } from './components/formik-radio-panel-group/FormikRadioPanelGroup';\nexport { default as FormikRadioGroup } from './components/formik-radio-group/FormikRadioGroup';\nexport { default as FormikSelect } from './components/formik-select/FormikSelect';\nexport { default as FormikTextarea } from './components/formik-textarea/FormikTextarea';\nexport { default as FormikTimeInput } from './components/formik-time-input/FormikTimeInput';\nexport { default as FormikValidationErrorSummary } from './components/formik-validation-error-summary/FormikValidationErrorSummary';\nexport { default as FormikYesOrNoQuestion } from './components/formik-yes-or-no-question/FormikYesOrNoQuestion';\n\nexport { default as TypedFormikForm, TypedFormikFormContext } from './components/typed-formik-form/TypedFormikForm';\nexport { default as TypedFormikWrapper } from './components/typed-formik-wrapper/TypedFormikWrapper';\n\nexport { default as UnansweredQuestionsInfo } from './components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo';\nexport { default as LabelWithInfo } from './components/helpers/label-with-info/LabelWithInfo';\nexport { default as SkjemagruppeQuestion } from './components/helpers/skjemagruppe-question/SkjemagruppeQuestion';\n\nexport * from './types';\nexport * from './utils/countryUtils';\nexport * from './utils/formikUtils';\nexport * from './utils/typedFormErrorUtils';\nexport * from './components/getTypedFormComponents';\nexport { ISOStringToDate, dateToISOString } from './components/formik-datepicker/datepickerUtils';\nexport * from './components/formik-modal-form-and-list/types';\nexport { getNumberFromNumberInputValue } from './utils/numberInputUtils';\n","import React from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\n\nconst SkjemagruppeQuestion: React.FunctionComponent<SkjemaGruppeProps> = ({\n    legend,\n    feil,\n    tag,\n    children,\n    className,\n}) => (\n    <SkjemaGruppe\n        className={`${className ? className : ''} singleInputWrapper`}\n        tag={tag ? tag : legend ? 'fieldset' : 'div'}\n        feil={feil}\n        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}>\n        {children}\n    </SkjemaGruppe>\n);\n\nexport default SkjemagruppeQuestion;\n","import React from 'react';\nimport { DayPickerProps } from 'react-day-picker';\nimport { useIntl } from 'react-intl';\nimport { Field, FieldProps } from 'formik';\nimport { CalendarPlacement, Datepicker, DatepickerChange } from 'nav-datovelger';\nimport useMedia from 'use-media';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { DateRange, NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport './datepicker.less';\n\nexport interface DatepickerLimitiations {\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDateRanges?: DateRange[];\n    disableWeekend?: boolean;\n}\n\nexport interface DatePickerBaseProps<FieldName, ErrorType> extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    label: string;\n    disabled?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    inputTitle?: string;\n    placeholder?: string;\n    dayPickerProps?: DayPickerProps;\n    invalidFormatError?: string;\n    locale?: 'nb' | 'nn' | 'en';\n    onChange?: (date: string) => void;\n}\nexport interface DatePickerPresentationProps {\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n}\ninterface OwnProps<FieldName, ErrorType> extends DatePickerBaseProps<FieldName, ErrorType> {\n    id?: string;\n    description?: React.ReactNode;\n}\n\nexport type FormikDatepickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nconst getLocaleToUse = (locale: string): 'nb' | 'nn' | 'en' | undefined => {\n    switch (locale) {\n        case 'nb':\n            return 'nb';\n        case 'nn':\n            return 'nn';\n        case 'en':\n            return 'en';\n        default:\n            return undefined;\n    }\n};\n\nfunction FormikDatepicker<FieldName, ErrorType>({\n    validate,\n    label,\n    name,\n    id,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    inputTitle,\n    onChange,\n    description,\n    placeholder,\n    locale,\n    ...restProps\n}: FormikDatepickerProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMedia({ minWidth: 736 });\n    const elementId = id || guid();\n    const position: CalendarPlacement | undefined =\n        fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullscreen' : undefined;\n    const inputName = (name || '') as string;\n    const intl = useIntl();\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps<string>) => {\n                const isInvalid = (feil || getFeilPropForFormikInput({ field, form, context, feil })) !== undefined;\n                const handleOnDatepickerChange: DatepickerChange = (dateString) => {\n                    if (field.value !== dateString) {\n                        form.setFieldValue(field.name, dateString);\n                        if (onChange) {\n                            onChange(dateString);\n                        }\n                        if (context) {\n                            context.onAfterFieldValueSet();\n                        }\n                    }\n                };\n\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={elementId}>{label}</Label>\n                        {description && <div className={'skjemaelement__description'}>{description}</div>}\n                        <Datepicker\n                            inputId={elementId}\n                            locale={getLocaleToUse(locale || intl.locale)}\n                            {...restProps}\n                            inputProps={{ name: inputName, placeholder, 'aria-invalid': isInvalid, title: inputTitle }}\n                            value={field.value}\n                            limitations={datepickerUtils.parseDateLimitations({\n                                minDate,\n                                maxDate,\n                                disableWeekend,\n                                disabledDateRanges,\n                            })}\n                            showYearSelector={showYearSelector}\n                            calendarSettings={{\n                                position,\n                            }}\n                            onChange={handleOnDatepickerChange}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow',\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n}\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport type CancelButtonTypes = 'standard' | 'hoved' | 'fare' | 'flat';\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputValidationProps<FieldName, ErrorType> {\n    validate?: (value: any, fieldName: FieldName) => ErrorType | undefined;\n}\n\nexport interface CustomFormErrorHandler<ErrorType> {\n    fieldErrorHandler: FieldErrorHandler<ErrorType>;\n    isHandledErrorTypeFunc?: ErrorTypeChecker<ErrorType>;\n}\n\nexport type FieldErrorHandler<ErrorType> = (error: ErrorType, fieldName: string) => string;\nexport type ErrorTypeChecker<ErrorType = any> = (error: ErrorType) => boolean;\n","import React from 'react';\nimport { Formik, FormikProps, FormikConfig } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\ntype Props<FormValues> = TypedFormikWrapperProps<FormValues> & FormikConfig<Partial<FormValues>>;\n\nfunction TypedFormikWrapper<FormValues>(props: Props<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\nconst getCheckedValidator = (): ValidationFunction<ValidateCheckedError | undefined> => (value: any) => {\n    if (value !== true) {\n        return ValidateCheckedError.notChecked;\n    }\n    return undefined;\n};\n\nexport default getCheckedValidator;\n","import dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport { getRequiredFieldValidator } from '.';\nimport { ValidationFunction } from './types';\nimport { ValidateRequiredFieldError } from './getRequiredFieldValidator';\nimport { hasValue } from './validationUtils';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isoWeek);\n\nexport enum ValidateDateError {\n    invalidDateFormat = 'invalidDateFormat',\n    dateBeforeMin = 'dateBeforeMin',\n    dateAfterMax = 'dateAfterMax',\n    dateNotWeekday = 'dateNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateRequiredFieldError.noValue\n    | ValidateDateError.invalidDateFormat\n    | ValidateDateError.dateBeforeMin\n    | ValidateDateError.dateAfterMax\n    | ValidateDateError.dateNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst getDateValidator = (options: DateValidationOptions = {}): ValidationFunction<DateValidationResult> => (\n    value: any\n) => {\n    const { required, min, max, onlyWeekdays } = options;\n    const date = datepickerUtils.getDateFromDateString(value);\n    if (required) {\n        const err = getRequiredFieldValidator()(value);\n        if (err) {\n            return err;\n        }\n    }\n\n    if (hasValue(value)) {\n        if (date === undefined) {\n            return ValidateDateError.invalidDateFormat;\n        }\n        if (min && dayjs(date).isBefore(min, 'day')) {\n            return ValidateDateError.dateBeforeMin;\n        }\n        if (max && dayjs(date).isAfter(max, 'day')) {\n            return ValidateDateError.dateAfterMax;\n        }\n        if (onlyWeekdays && dayjs(date).isoWeekday() > 5) {\n            return ValidateDateError.dateNotWeekday;\n        }\n    }\n    return undefined;\n};\n\nexport default getDateValidator;\n","import { ValidationError, ValidationResult } from './types';\n\nexport const hasValue = (value: any): boolean => value !== '' && value !== undefined && value !== null;\n\nexport const validateAll = <ErrorType = ValidationError>(\n    validations: Array<() => ValidationResult<ErrorType>>\n): ErrorType | undefined => {\n    let result: ValidationResult<ErrorType>;\n    validations.some((validateFunc) => {\n        const validationResult = validateFunc();\n        if (validationResult) {\n            result = validationResult;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\n","import dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport getDateValidator, { DateValidationOptions, DateValidationResult } from './getDateValidator';\nimport { ValidationFunction } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface FromDateOptions extends DateValidationOptions {\n    toDate?: Date;\n}\n\ninterface ToDateOptions extends DateValidationOptions {\n    fromDate?: Date;\n}\n\nconst validateFromDate = (options: FromDateOptions): ValidationFunction<DateRangeValidationResult> => (value: any) => {\n    const dateError = getDateValidator(options)(value);\n    if (dateError) {\n        return dateError;\n    }\n    const { toDate } = options;\n    const date = datepickerUtils.getDateFromDateString(value);\n    if (!date || !toDate) {\n        return undefined;\n    }\n\n    if (dayjs(date).isAfter(toDate, 'day')) {\n        return ValidateDateRangeError.fromDateIsAfterToDate;\n    }\n    return undefined;\n};\n\nconst validateToDate = (options: ToDateOptions): ValidationFunction<DateRangeValidationResult> => (value: any) => {\n    const dateError = getDateValidator(options)(value);\n    if (dateError) {\n        return dateError;\n    }\n    const { fromDate } = options;\n    const date = datepickerUtils.getDateFromDateString(value);\n    if (!date || !fromDate) {\n        return undefined;\n    }\n    if (dayjs(date).isBefore(fromDate, 'day')) {\n        return ValidateDateRangeError.toDateIsBeforeFromDate;\n    }\n    return undefined;\n};\n\nconst getDateRangeValidator = {\n    validateFromDate,\n    validateToDate,\n};\n\nexport default getDateRangeValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst getRequiredFieldValidator = (): ValidationFunction<RequiredFieldValidationResult> => (value: any) => {\n    if (hasValue(value) === false) {\n        return ValidateRequiredFieldError.noValue;\n    }\n    return undefined;\n};\n\nexport default getRequiredFieldValidator;\n","import fnrvalidator from '@navikt/fnrvalidator';\nimport getRequiredFieldValidator, { ValidateRequiredFieldError } from './getRequiredFieldValidator';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateFødselsnummerError {\n    fødselsnummerNot11Chars = 'fødselsnummerNot11Chars',\n    invalidFødselsnummer = 'invalidFødselsnummer',\n    disallowedFødselsnummer = 'disallowedFødselsnummer',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateRequiredFieldError.noValue\n    | ValidateFødselsnummerError.disallowedFødselsnummer\n    | ValidateFødselsnummerError.fødselsnummerNot11Chars\n    | ValidateFødselsnummerError.invalidFødselsnummer\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    disallowedValues?: string[];\n}\n\nconst getFødselsnummerValidator = (options: Options = {}): ValidationFunction<FødselsnummerValidationResult> => (\n    value: any\n) => {\n    const { required, disallowedValues } = options;\n    if (hasValue(value) === false && required === false) {\n        return undefined;\n    }\n    if (required) {\n        const err = getRequiredFieldValidator()(value);\n        if (err) {\n            return err;\n        }\n    }\n    if (hasValue(value)) {\n        const result = fnrvalidator.fnr(value);\n        if (result.status === 'invalid') {\n            /** Errors from @navikt/fnrvalidator */\n            const LENGTH_ERROR = 'fnr or dnr must consist of 11 digits';\n            const { reasons } = result;\n            if (reasons.includes(LENGTH_ERROR)) {\n                return ValidateFødselsnummerError.fødselsnummerNot11Chars;\n            }\n            return ValidateFødselsnummerError.invalidFødselsnummer;\n        }\n        if (disallowedValues) {\n            const equalsDisallowedValue = disallowedValues.some((f) => f === value);\n            if (equalsDisallowedValue) {\n                return ValidateFødselsnummerError.disallowedFødselsnummer;\n            }\n        }\n    }\n    return undefined;\n};\n\nexport default getFødselsnummerValidator;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst getListValidator = (options: Options): ValidationFunction<ValidateListError | undefined> => (value: any) => {\n    const { required = false, minItems = undefined, maxItems = undefined } = options;\n    if (Array.isArray(value)) {\n        const numItems = value.length;\n        if (required && numItems === 0) {\n            return ValidateListError.listIsEmpty;\n        }\n        if (minItems !== undefined && minItems > numItems) {\n            return ValidateListError.listHasTooFewItems;\n        }\n        if (maxItems !== undefined && maxItems < numItems) {\n            return ValidateListError.listHasTooManyItems;\n        }\n    }\n    if (required && !Array.isArray(value)) {\n        return ValidateListError.listIsEmpty;\n    }\n};\n\nexport default getListValidator;\n","import { ValidationFunction } from './types';\nimport { ValidateRequiredFieldError } from './getRequiredFieldValidator';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateNumberError {\n    invalidNumberFormat = 'invalidNumberFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateRequiredFieldError.noValue\n    | ValidateNumberError.invalidNumberFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst getNumberFromStringInput = (inputValue: string | undefined): number | undefined => {\n    if (inputValue === undefined || inputValue === '' || Array.isArray(inputValue)) {\n        return undefined;\n    }\n    if (typeof inputValue === 'number' && isNaN(inputValue)) {\n        return undefined;\n    }\n    const value = `${inputValue}`.replace(/\\,/g, '.');\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n        return undefined;\n    }\n    return numValue;\n};\n\nconst getNumberValidator = (options: Options = {}): ValidationFunction<NumberValidationResult> => (value: any) => {\n    const { required, min, max } = options;\n    const numberValue = getNumberFromStringInput(value);\n\n    if (hasValue(value) === false && required) {\n        return ValidateRequiredFieldError.noValue;\n    }\n\n    if (hasValue(value)) {\n        if (numberValue === undefined) {\n            return ValidateNumberError.invalidNumberFormat;\n        }\n        if (min !== undefined && numberValue < min) {\n            return ValidateNumberError.numberIsTooSmall;\n        }\n        if (max !== undefined && numberValue > max) {\n            return ValidateNumberError.numberIsTooLarge;\n        }\n    }\n    return undefined;\n};\n\nexport default getNumberValidator;\n","import getRequiredFieldValidator, { ValidateRequiredFieldError } from './getRequiredFieldValidator';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateOrgNumberError {\n    invalidOrgNumberFormat = 'invalidOrgNumberFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateRequiredFieldError.noValue\n    | ValidateOrgNumberError.invalidOrgNumberFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst isValidOrgNumber = (value: any): boolean => {\n    if (\n        value &&\n        typeof value === 'string' &&\n        value.length === 9 &&\n        /^[0-9]*$/.test(value) &&\n        (value.charAt(0) === '8' || value.charAt(0) === '9')\n    ) {\n        return getMod11(value) === parseInt(value.charAt(8), 10);\n    }\n    return false;\n};\n\nconst getOrgNumberValidator = (options: Options = {}): ValidationFunction<OrgNumberValidationResult> => (\n    value: any\n) => {\n    const { required } = options;\n    if (required) {\n        const err = getRequiredFieldValidator()(value);\n        if (err) {\n            return err;\n        }\n    }\n    const isValidFormat = isValidOrgNumber(value);\n    if (hasValue(value) && isValidFormat === false) {\n        return ValidateOrgNumberError.invalidOrgNumberFormat;\n    }\n};\n\nexport default getOrgNumberValidator;\n","import getRequiredFieldValidator, { ValidateRequiredFieldError } from './getRequiredFieldValidator';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateStringError {\n    notAString = 'notAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateRequiredFieldError.noValue\n    | ValidateStringError.notAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ninterface Options {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst getStringValidator = (options: Options = {}): ValidationFunction<StringValidationResult> => (value: any) => {\n    const { required, minLength, maxLength } = options;\n    if (required) {\n        const err = getRequiredFieldValidator()(value);\n        if (err) {\n            return err;\n        }\n    }\n    if (hasValue(value)) {\n        if (typeof value !== 'string') {\n            return ValidateStringError.notAString;\n        }\n        if (minLength !== undefined && value.length < minLength) {\n            return ValidateStringError.stringIsTooShort;\n        }\n        if (maxLength !== undefined && value.length > maxLength) {\n            return ValidateStringError.stringIsTooLong;\n        }\n    }\n};\n\nexport default getStringValidator;\n","import { YesOrNo } from '../types';\nimport { ValidationFunction } from './types';\n\nexport enum ValidateYesOrNoError {\n    'yesOrNoIsUnanswered' = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult = ValidateYesOrNoError.yesOrNoIsUnanswered | undefined;\n\nconst getYesOrNoValidator = (): ValidationFunction<YesOrNoValidationResult> => (value: any) => {\n    const isAnswered = value === YesOrNo.YES || value === YesOrNo.NO || value === YesOrNo.DO_NOT_KNOW;\n    return isAnswered ? undefined : ValidateYesOrNoError.yesOrNoIsUnanswered;\n};\n\nexport default getYesOrNoValidator;\n","export interface IntlErrorObject {\n    /** If passed in, the key is not transformed with field name and error */\n    key: string;\n    /** Values passed through to intl formatMessage */\n    values?: { [key: string]: any };\n    /** Set if error key is not to be altered by fieldErrorHandler */\n    keepKeyUnaltered?: boolean;\n}\n\nexport const isIntlErrorObject = (error: any): error is IntlErrorObject => {\n    return typeof error === 'object' && typeof error.key === 'string';\n};\n\nexport type ValidationError = string | IntlErrorObject;\n\nexport type ValidationResult<ValidationErrors> = ValidationErrors | undefined;\n\nexport type ValidationFunction<ValidationErrors> = (value: any) => ValidationResult<ValidationErrors>;\n","import { IntlShape } from 'react-intl';\nimport { CustomFormErrorHandler, FieldErrorHandler } from '../types';\nimport { isIntlErrorObject, ValidationError } from './types';\n\nconst createFieldErrorIntlKey = (error: string, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nconst getFieldErrorHandler = (intl: IntlShape, errorPrefix?: string): FieldErrorHandler<ValidationError> => (\n    error: ValidationError,\n    fieldName: string\n) => {\n    return isIntlErrorObject(error)\n        ? intl.formatMessage(\n              { id: error.keepKeyUnaltered ? error.key : createFieldErrorIntlKey(error.key, fieldName, errorPrefix) },\n              error.values\n          )\n        : intl.formatMessage({ id: createFieldErrorIntlKey(error, fieldName, errorPrefix) });\n};\n\nconst getIntlFormErrorHandler = (intl: IntlShape, errorPrefix?: string): CustomFormErrorHandler<ValidationError> => ({\n    fieldErrorHandler: getFieldErrorHandler(intl, errorPrefix),\n    isHandledErrorTypeFunc: isIntlErrorObject,\n});\n\nexport default getIntlFormErrorHandler;\n","import {\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '.';\n\nexport const fallbackValidationIntlKeys = {\n    noValue: `validation.fallback.${ValidateRequiredFieldError.noValue}`,\n    yesOrNoIsUnanswered: `validation.fallback.${ValidateYesOrNoError.yesOrNoIsUnanswered}`,\n    invalidFødselsnummer: `validation.fallback.${ValidateFødselsnummerError.invalidFødselsnummer}`,\n    fødselsnummerNot11Chars: `validation.fallback.${ValidateFødselsnummerError.fødselsnummerNot11Chars}`,\n    disallowedFødselsnummer: `validation.fallback.${ValidateFødselsnummerError.disallowedFødselsnummer}`,\n    invalidDateFormat: `validation.fallback.${ValidateDateError.invalidDateFormat}`,\n    dateBeforeMin: `validation.fallback.${ValidateDateError.dateBeforeMin}`,\n    dateAfterMax: `validation.fallback.${ValidateDateError.dateAfterMax}`,\n    fromDateIsAfterToDate: `validation.fallback.${ValidateDateRangeError.fromDateIsAfterToDate}`,\n    toDateIsBeforeFromDate: `validation.fallback.${ValidateDateRangeError.toDateIsBeforeFromDate}`,\n    listIsEmpty: `validation.fallback.${ValidateListError.listIsEmpty}`,\n    listHasTooFewItems: `validation.fallback.${ValidateListError.listHasTooFewItems}`,\n    listHasTooManyItems: `validation.fallback.${ValidateListError.listHasTooManyItems}`,\n    invalidNumberFormat: `validation.fallback.${ValidateNumberError.invalidNumberFormat}`,\n    numberIsTooLarge: `validation.fallback.${ValidateNumberError.numberIsTooLarge}`,\n    numberIsTooSmall: `validation.fallback.${ValidateNumberError.numberIsTooSmall}`,\n    notAString: `validation.fallback.${ValidateStringError.notAString}`,\n    stringIsTooLong: `validation.fallback.${ValidateStringError.stringIsTooLong}`,\n    stringIsTooShort: `validation.fallback.${ValidateStringError.stringIsTooShort}`,\n};\n\nexport const fallbackValidationMessages = {\n    nb: {\n        noValue: 'Feltet er påkrevd',\n        yesOrNoIsUnanswered: 'Feltet er påkrevd',\n        invalidFødselsnummer: 'Ugyldig fødselsnummer',\n        fødselsnummerNot11Chars: 'Fødselsnummeret må bestå av 11 siffer',\n        disallowedFødselsnummer: 'Fødselsnummeret du har fylt ut er ditt eget fødselsnummer',\n        invalidDateFormat: 'Ugyldig datoformat. Formatet må være dd.mm.åååå',\n        dateBeforeMin: 'Dato kan ikke være tidligere enn {dato}',\n        dateAfterMax: `Dato kan ikke være etter {dato}`,\n        fromDateIsAfterToDate: 'Fra-dato må være lik eller før til-dato',\n        toDateIsBeforeFromDate: 'Til-dato må være lik eller etter fra-dato',\n        listIsEmpty: 'Du har ikke lagt til noe i listen',\n        listHasTooFewItems: 'Du har lagt til for få',\n        listHasTooManyItems: 'Du har lagt til for mange',\n        invalidNumberFormat: 'Verdien er ikke et gyldig tall',\n        numberIsTooLarge: 'Tallet kan ikke være større enn {maks}',\n        numberIsTooSmall: 'Tallet kan ikke være mindre enn {min}',\n        notAString: 'Verdien er ikke en tekst',\n        stringIsTooLong: 'Teksten kan ikke inneholde flere enn {lengde} tegn',\n        stringIsTooShort: 'Teksten må være på minst {lengde} tegn',\n    },\n    nn: {\n        [fallbackValidationIntlKeys.noValue]: 'Du må fylle ut feltet',\n        [fallbackValidationIntlKeys.yesOrNoIsUnanswered]: 'Du må fylle ut feltet',\n        [fallbackValidationIntlKeys.invalidFødselsnummer]: 'Fødselsnummeret er ugyldig',\n        [fallbackValidationIntlKeys.fødselsnummerNot11Chars]: 'Fødselsnummeret må bestå av 11 siffer',\n        [fallbackValidationIntlKeys.disallowedFødselsnummer]:\n            'Fødselsnummeret du har fylt ut er ditt eige fødselsnummer',\n        [fallbackValidationIntlKeys.invalidDateFormat]: 'Ugyldig datoformat. Formatet må vere dd.mm.åååå',\n        [fallbackValidationIntlKeys.dateBeforeMin]: 'Datoen kan ikkje vere tidlegare enn {dato}',\n        [fallbackValidationIntlKeys.dateAfterMax]: `Datoen kan ikkje vere etter {dato}`,\n        [fallbackValidationIntlKeys.fromDateIsAfterToDate]: 'Frå-datoen kan ikkje vere seinare enn til-datoen',\n        [fallbackValidationIntlKeys.toDateIsBeforeFromDate]: 'Til-datoen kan ikkje vere tidlegare enn frå-datoen',\n        [fallbackValidationIntlKeys.listIsEmpty]: 'Du har ikkje lagt til noko i lista',\n        [fallbackValidationIntlKeys.listHasTooFewItems]: 'Du har lagt til for få i lista',\n        [fallbackValidationIntlKeys.listHasTooManyItems]: 'Du har lagt til for mange i lista',\n        [fallbackValidationIntlKeys.invalidNumberFormat]: 'Verdien er ikkje eit gyldig tal',\n        [fallbackValidationIntlKeys.numberIsTooLarge]: 'Talet kan ikkje vere større enn {maks}',\n        [fallbackValidationIntlKeys.numberIsTooSmall]: 'Talet kan ikkje vere mindre enn {min}',\n        [fallbackValidationIntlKeys.notAString]: 'Verdien er ikkje ein tekst',\n        [fallbackValidationIntlKeys.stringIsTooLong]: 'Teksten kan ikkje innehalde fleire enn {lengde} teikn',\n        [fallbackValidationIntlKeys.stringIsTooShort]: 'Teksten må vere på minst {lengde} teikn',\n    },\n};\n","import { fallbackValidationMessages } from '../../../typed-formik-form/validation/fallbackValidationMessages';\n\nexport const appMessages = {\n    nb: {\n        ...fallbackValidationMessages.nb,\n        'letters.listIsEmpty': 'Whooa {value}',\n        'hasKids.yesOrNoIsUnanswered': 'You have not answered {question}',\n        'fødselsnummer.disallowedFødselsnummer': 'Du kan ikke bruke dette fødselsnummeret',\n        'fødselsnummer.disallowedFødselsnummerCustom': 'Du kan ikke bruke dette fødselsnummeret {info}',\n        'søskennavn.mangler': 'Ett av søskenene til {navn} mangler navn',\n    },\n    nn: {\n        ...fallbackValidationMessages.nn,\n    },\n};\n","const ferieuttakMessages = {\n    nb: require('./ferieuttak.nb.json'),\n    nn: require('./ferieuttak.nn.json'),\n};\n\nexport default ferieuttakMessages;\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { appMessages } from './messages';\nimport ferieMessages from '../../examples/formik-example/ferieuttak-example/ferieuttakMessages';\nimport { MessageFileFormat } from '../../utils/devIntlUtils';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst allMessages: MessageFileFormat = {\n    nb: {\n        ...appMessages.nb,\n        ...ferieMessages.nb,\n    },\n    nn: {\n        ...appMessages.nn,\n        ...ferieMessages.nn,\n    },\n};\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? allMessages.nb : allMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    land: Ferieland[];\n}\n\nexport const isFerieuttak = (ferieuttak: Ferieuttak): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined && ferieuttak.land !== undefined;\n};\n\nexport enum Ferieland {\n    'Norge' = 'norge',\n    'Sverige' = 'sverige',\n    'Danmark' = 'danmark',\n}\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React from 'react';\nimport bemHelper from '../../utils/bemUtils';\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined,\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import React from 'react';\n\nconst Question: React.FunctionComponent = ({ children }) => <div style={{ marginBottom: '2rem' }}>{children}</div>;\n\nexport default Question;\n","import React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\ninterface Props {\n    columns?: 1 | 2 | 3 | 'flex';\n}\n\nconst Tiles: React.FunctionComponent<Props> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { dateToISOString, getTypedFormComponents, ISOStringToDate } from '../../../../typed-formik-form';\nimport { getDateRangeValidator } from '../../../../typed-formik-form/validation';\nimport getDateValidator from '../../../../typed-formik-form/validation/getDateValidator';\nimport getListValidator, { ValidateListError } from '../../../../typed-formik-form/validation/getListValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { Ferieland, Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Ferieuttak;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n    land = 'land',\n}\n\ninterface FormValues extends Omit<Ferieuttak, 'fom' | 'tom'> {\n    fom: string;\n    tom: string;\n}\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues, ValidationError>();\n\nconst mapFerieuttakToFormValues = (ferieuttak: Ferieuttak): FormValues => ({\n    ...ferieuttak,\n    land: [...(ferieuttak.land || [])],\n    fom: dateToISOString(ferieuttak.fom),\n    tom: dateToISOString(ferieuttak.tom),\n});\n\nconst mapFormValuesToFerieuttak = (values: Partial<FormValues>): Ferieuttak | undefined => {\n    const fom = ISOStringToDate(values.fom);\n    const tom = ISOStringToDate(values.tom);\n    if (fom && tom) {\n        return {\n            ...values,\n            land: [...(values.land || [])],\n            fom,\n            tom,\n        };\n    }\n    return undefined;\n};\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak,\n    alleFerieuttak = [],\n    onSubmit,\n    onCancel,\n}) => {\n    const onFormikSubmit = (formValues: Partial<FormValues>) => {\n        const ferieuttak = mapFormValuesToFerieuttak(formValues);\n        if (ferieuttak && isFerieuttak(ferieuttak)) {\n            onSubmit(ferieuttak);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n    const intl = useIntl();\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n    const initialValues = ferieuttak ? mapFerieuttakToFormValues(ferieuttak) : undefined;\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues || {}}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getIntlFormErrorHandler(intl, 'ferieForm')}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={FerieuttakFormFields.land}\n                            legend={'Hvilket land'}\n                            checkboxes={[\n                                {\n                                    value: Ferieland.Norge,\n                                    label: 'Norge',\n                                },\n                                {\n                                    value: Ferieland.Sverige,\n                                    label: 'Sverige',\n                                },\n                                {\n                                    value: Ferieland.Danmark,\n                                    label: 'Danmark',\n                                },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                switch (error) {\n                                    case undefined:\n                                        return undefined;\n                                    case ValidateListError.listIsEmpty:\n                                        return 'listIsEmpty';\n                                }\n                            }}\n                        />\n                        <Box margin=\"xl\">\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    minDate,\n                                    maxDate: maxDate || formik.values.tom,\n                                    disabledDateRanges: alleFerieuttak\n                                        .filter((f) => (ferieuttak ? ferieuttak.id !== f.id : true))\n                                        .map((f) => ({ from: f.fom, to: f.tom })),\n                                    validate: (value) => {\n                                        const error = getDateValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                        })(value);\n                                        return error;\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    minDate: minDate || formik.values.fom,\n                                    maxDate,\n                                    validate: getDateRangeValidator.validateToDate({\n                                        fromDate: ISOStringToDate(formik.values.fom),\n                                        min: minDate,\n                                        max: maxDate,\n                                        required: true,\n                                    }),\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </Box>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '../../../../typed-formik-form';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { TypedFormInputValidationProps } from '../../../../typed-formik-form/types';\n\ninterface Props<FieldName> extends TypedFormInputValidationProps<FieldName, string> {\n    name: FieldName;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldName>({ name, minDate, maxDate, validate, labels }: Props<FieldName>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldName, Ferieuttak, string>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate ? (value) => validate(value, name) : undefined}\n                sortFunc={sortItemsByFom}\n                maxItems={1}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        alleFerieuttak={allItems}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\nimport { Ferieuttak } from './ferieuttak-example';\n\nexport enum FormFields {\n    'nameGroup' = 'nameGroup',\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'dateinterval_from' = 'dateinterval_from',\n    'dateinterval_to' = 'dateinterval_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak',\n    'letters' = 'letters',\n    'fødselsnummer' = 'fødselsnummer',\n    'datastruktur' = 'objekt',\n    'barnetsFødselsnummer' = 'barnetsFødselsnummer',\n    'friends' = 'friends',\n}\n\nexport interface CompletedFormValues {\n    [FormFields.nameGroup]: string;\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: string;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: string;\n    [FormFields.daterange_to]?: string;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: Ferieuttak[];\n    [FormFields.letters]?: string[];\n    [FormFields.friends]: Friend[];\n    [FormFields.fødselsnummer]: string;\n    [FormFields.datastruktur]: {\n        navn: string;\n    };\n    [FormFields.barnetsFødselsnummer]: string;\n}\nexport interface Person {\n    name: string;\n}\nexport interface Friend extends Person {\n    siblings: Person[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","import React from 'react';\nimport { FieldArray } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { FormikInput } from '../../../../typed-formik-form';\nimport { getStringValidator } from '../../../../typed-formik-form/validation';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { hasValue } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport { Friend } from '../types';\n\ninterface Props {\n    fieldName: string;\n    friend: Friend;\n}\n\nconst Siblings: React.FunctionComponent<Props> = ({ fieldName, friend }) => {\n    const { siblings } = friend;\n    return (\n        <FieldArray\n            name={fieldName}\n            render={(arrayHelpers) => (\n                <div>\n                    {siblings &&\n                        siblings.length > 0 &&\n                        siblings.map((_sibling, index) => (\n                            <div key={index}>\n                                <Question>\n                                    <FormikInput\n                                        type=\"text\"\n                                        label=\"Søskens navn\"\n                                        name={`${fieldName}.${index}.name` as any}\n                                        validate={(values) => {\n                                            const error = getStringValidator({ required: true })(values);\n                                            if (error) {\n                                                const intlErr: ValidationError = {\n                                                    key: 'søskennavn.mangler',\n                                                    values: {\n                                                        navn: hasValue(friend.name) ? friend.name : ` venn ${index}`,\n                                                    },\n                                                };\n                                                return intlErr;\n                                            }\n                                        }}\n                                    />\n                                </Question>\n                            </div>\n                        ))}\n                    <Box>\n                        <Knapp htmlType=\"button\" mini={true} onClick={() => arrayHelpers.push('')}>\n                            Legg til søsken\n                        </Knapp>\n                    </Box>\n                </div>\n            )}\n        />\n    );\n};\n\nexport default Siblings;\n","import { YesOrNo } from '../../../typed-formik-form';\n\nexport enum FormFields {\n    'jaNeiSpørsmål' = 'jaNeiSpørsmål',\n    'tall' = 'tall',\n    'tekst' = 'tekst',\n    'fødselsnummer' = 'fødselsnummer',\n    'dato' = 'dato',\n    'tidsperiode_fra' = 'tidsperiode_fra',\n    'tidsperiode_til' = 'tidsperiode_til',\n    'orgnummer' = 'orgnummer',\n    'liste' = 'liste',\n    'radio' = 'radio',\n    'select' = 'select',\n    'checked' = 'checked',\n}\n\nexport interface FormValues {\n    [FormFields.jaNeiSpørsmål]?: YesOrNo;\n    [FormFields.tall]?: string;\n    [FormFields.tekst]?: string;\n    [FormFields.fødselsnummer]?: string;\n    [FormFields.dato]?: string;\n    [FormFields.tidsperiode_fra]?: string;\n    [FormFields.tidsperiode_til]?: string;\n    [FormFields.orgnummer]?: string;\n    [FormFields.liste]?: string[];\n    [FormFields.select]?: string;\n    [FormFields.radio]?: string;\n    [FormFields.checked]?: boolean;\n}\n\nexport const initialValues = {};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FormikDateIntervalPicker, FormikFileInput, FormikInput, ISOStringToDate } from '../../../../typed-formik-form';\nimport FormikDateRangePicker from '../../../../typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker';\nimport FormikTimeInput from '../../../../typed-formik-form/components/formik-time-input/FormikTimeInput';\nimport { getTypedFormComponents } from '../../../../typed-formik-form/components/getTypedFormComponents';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n} from '../../../../typed-formik-form/validation';\nimport getRequiredFieldValidator from '../../../../typed-formik-form/validation/getRequiredFieldValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { validateAll } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport Tiles from '../../../components/tiles/Tiles';\nimport FerieuttakListAndDialog from '../ferieuttak-example/FerieuttakListAndDialog';\nimport { FormFields, FormValues } from '../types';\nimport Friends from './Friends';\nimport { fallbackValidationIntlKeys } from '../../../../typed-formik-form/validation/fallbackValidationMessages';\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst TypedFormExample = () => {\n    const { values } = useFormikContext<FormValues>();\n    const { setFieldValue } = useFormikContext<FormValues>();\n    const intl = useIntl();\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            includeButtons={true}\n            formErrorHandler={getIntlFormErrorHandler(intl)}>\n            <Question>\n                <Form.YesOrNoQuestion\n                    legend={'Har du kids'}\n                    name={FormFields.hasKids}\n                    validate={(value) => {\n                        const err = getYesOrNoValidator()(value);\n                        if (err) {\n                            return {\n                                key: err,\n                                values: { question: 'spørsmålet om antall barn' },\n                                keepKeyUnaltered: false,\n                            };\n                        }\n                    }}\n                />\n            </Question>\n            <Question>\n                <Form.Input\n                    name={FormFields.fødselsnummer}\n                    label=\"Fødselsnummer\"\n                    validate={(value) =>\n                        validateAll<ValidationError>([\n                            () => getStringValidator({ minLength: 2 })(value),\n                            () => getFødselsnummerValidator({ required: true })(value),\n                        ])\n                    }\n                />\n            </Question>\n\n            {1 + 1 === 3 && (\n                <>\n                    <Question>\n                        <Form.Input\n                            name={'datastruktur.navn' as any}\n                            label=\"Datastrukturnavn\"\n                            validate={(value) => {\n                                const error = getStringValidator({ minLength: 2, required: true })(value);\n                                if (error) {\n                                    return {\n                                        key: 'abc',\n                                        values: { s: 2 },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            type=\"text\"\n                            label=\"Fornavn\"\n                            name={FormFields.firstname}\n                            validate={(value) =>\n                                getRequiredFieldValidator()(value)\n                                    ? {\n                                          key: fallbackValidationIntlKeys.noValue,\n                                      }\n                                    : undefined\n                            }\n                        />\n                    </Question>{' '}\n                    <Question>\n                        <Form.Input\n                            name={FormFields.barnetsFødselsnummer}\n                            label=\"Barnets fødselsnummer\"\n                            validate={(value) => {\n                                const error = getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: values.fødselsnummer ? [values.fødselsnummer] : undefined,\n                                })(value);\n                                if (error === ValidateFødselsnummerError.disallowedFødselsnummer) {\n                                    return {\n                                        key: 'fødselsnummer.disallowedFødselsnummerCustom',\n                                        values: {\n                                            info: ' (du har tastet inn ditt eget fødselsnummer)',\n                                        },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Box margin=\"xl\">\n                        <Box margin=\"l\" padBottom=\"l\">\n                            <Undertittel>Venner</Undertittel>\n                        </Box>\n                        <Question>\n                            <Friends fieldName=\"friends\" friends={values.friends || []} />\n                        </Question>\n                    </Box>\n                    <Question>\n                        <FerieuttakListAndDialog\n                            name={FormFields.ferieuttak}\n                            labels={{\n                                addLabel: 'Legg til',\n                                modalTitle: 'Ferieuttak',\n                                listTitle: 'Ferieuttak',\n                            }}\n                            minDate={dayjs().subtract(1, 'year').toDate()}\n                            maxDate={dayjs().add(1, 'year').toDate()}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CheckboxPanelGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            checkboxes={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                if (error === ValidateListError.listIsEmpty) {\n                                    return {\n                                        key: error,\n                                        values: { value: 'inserted value' },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker\n                            name={FormFields.birthdate}\n                            label=\"Fødselsdato\"\n                            validate={getDateValidator({ required: true })}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" useAlpha3Code={true} />\n                    </Question>\n                    <Question>\n                        <Tiles columns={2}>\n                            <Form.Input\n                                name={FormFields.firstname}\n                                label=\"Fornavn\"\n                                validate={getRequiredFieldValidator()}\n                            />\n                            <Form.Input\n                                name={FormFields.lastname}\n                                label=\"Etternavn\"\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </Tiles>\n                    </Question>\n                    <Question>\n                        <div style={{ display: 'flex', flex: 'flex-start' }}>\n                            <FormikTimeInput name={FormFields.time} label=\"Tidspunkt\" />\n                        </div>\n                    </Question>\n                    <Question>\n                        <FormikDateIntervalPicker\n                            legend=\"DateIntervalPicker (test)\"\n                            fromDatepickerProps={{\n                                name: FormFields.dateinterval_from,\n                                label: 'Fra',\n                                maxDate: ISOStringToDate(values.daterange_to),\n                                validate: getRequiredFieldValidator(),\n                            }}\n                            toDatepickerProps={{\n                                name: FormFields.dateinterval_to,\n                                label: 'Til',\n                                minDate: ISOStringToDate(values.daterange_from),\n                                validate: getRequiredFieldValidator(),\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikDateRangePicker\n                            legend=\"DateRangePicker\"\n                            disableWeekend={true}\n                            minDate={dayjs().subtract(4, 'month').toDate()}\n                            maxDate={dayjs().add(4, 'month').toDate()}\n                            fromInputProps={{\n                                name: FormFields.daterange_from,\n                                label: 'Fra',\n                            }}\n                            toInputProps={{\n                                name: FormFields.daterange_to,\n                                label: 'Til',\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikFileInput\n                            name={FormFields.files}\n                            label=\"Legg til filer\"\n                            acceptedExtensions={'tsx'}\n                            onFilesSelect={() => null}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            label=\"Oppgi hvor mange timer i snitt per uke, har barnet tilsyn?\"\n                            name={FormFields.firstname}\n                            suffixStyle=\"text\"\n                            suffix=\"Timer\"\n                            bredde=\"S\"\n                            maxLength={5}\n                            validate={(value) => {\n                                const error = getNumberValidator({ min: 0, max: 20000 })(value);\n                                if (error === ValidateNumberError.numberIsTooLarge) {\n                                    return {\n                                        key: error,\n                                        values: { max: 20000 },\n                                    };\n                                }\n                                if (error === ValidateNumberError.numberIsTooSmall) {\n                                    return {\n                                        key: error,\n                                        values: { min: 0 },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikInput type=\"tel\" label=\"Et tall\" name={'number'} />\n                    </Question>\n                    <Question>\n                        <Form.RadioGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            radios={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={getRequiredFieldValidator()}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" />\n                    </Question>\n                    <Knapp\n                        htmlType=\"button\"\n                        onClick={() => {\n                            setFieldValue(FormFields.birthdate, '2000-10-2');\n                        }}>\n                        Sett ugyldig dato\n                    </Knapp>\n                </>\n            )}\n        </Form.Form>\n    );\n};\n\nexport default TypedFormExample;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport TypedFormExample from './typed-form-example/TypedFormExample';\nimport { FormValues } from './types';\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            id: '1',\n            fom: new Date(),\n            tom: dayjs().add(1, 'month').toDate(),\n            land: [],\n        },\n        {\n            id: '2',\n            fom: dayjs().add(1, 'month').toDate(),\n            tom: dayjs().add(2, 'month').toDate(),\n            land: [],\n        },\n    ],\n    friends: [],\n    letters: [],\n};\n\nconst FormikExample = () => {\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>TypedFormExample</h2>\n                Siden setter opp TypedFormikWrapper og setter type med generics. Se <code>TypedFormExample</code>. En\n                kan også bruke <code>getTypedFormComponents</code>-util for å få ut alle skjemakomponentene typed\n                direkte. Se <code>TypedFormExample</code>.\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={() => (\n                    <Panel>\n                        <TypedFormExample />\n                    </Panel>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport Box from '../box/Box';\nimport './validationErrorList.less';\n\ninterface ValidationErrorInfo {\n    info: string;\n    example?: string;\n}\n\nexport type ValidationErrors = {\n    [key: string]: ValidationErrorInfo;\n};\n\ninterface Props {\n    errors: ValidationErrors;\n}\n\nconst ValidationErrorList = ({ errors }: Props) => {\n    return (\n        <Box margin=\"l\">\n            <table className=\"validationErrorList\">\n                <thead>\n                    <tr>\n                        <th>Feil</th>\n                        <th>Beskrivelse</th>\n                        <th>Eksempel</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.keys(errors).map((key) => {\n                        return (\n                            <tr key={key}>\n                                <th>\n                                    <code>{key}</code>\n                                </th>\n                                <td key=\"info\">{errors[key].info}</td>\n                                <td key=\"example\">{errors[key].example}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        </Box>\n    );\n};\n\nexport default ValidationErrorList;\n","import React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Tabs from 'nav-frontend-tabs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport Box from '../../components/box/Box';\nimport { hasValue } from '../../../typed-formik-form/validation/validationUtils';\n\ninterface Props {\n    title: string;\n    functionName?: string;\n    code?: string;\n}\n\nconst ValideringPanel: React.FunctionComponent<Props> = ({ title, children, code }) => {\n    const [activePanel, setActivePanel] = useState(0);\n    return (\n        <div style={{ marginBottom: '4rem' }}>\n            <Systemtittel tag=\"h3\">{title}</Systemtittel>\n            <Box margin=\"l\">\n                {hasValue(code) && (\n                    <Tabs\n                        tabs={[{ label: 'Eksempel' }, { label: 'Kode' }]}\n                        onChange={(_evt, idx) => setActivePanel(idx)}\n                    />\n                )}\n                {activePanel === 0 && <>{children}</>}\n                {activePanel === 1 && (\n                    <SyntaxHighlighter language=\"typescript\" style={docco}>\n                        {code}\n                    </SyntaxHighlighter>\n                )}\n            </Box>\n        </div>\n    );\n};\nexport default ValideringPanel;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { Element } from 'nav-frontend-typografi';\nimport { getTypedFormComponents } from '../../../typed-formik-form';\nimport datepickerUtils from '../../../typed-formik-form/components/formik-datepicker/datepickerUtils';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport {\n    getCheckedValidator,\n    getDateRangeValidator,\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateCheckedError,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '../../../typed-formik-form/validation';\nimport getIntlFormErrorHandler from '../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../typed-formik-form/validation/types';\nimport Box from '../../components/box/Box';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport ValidationErrorList from '../../components/validation-errors/ValidationErrorList';\nimport { FormFields, FormValues } from './types';\nimport ValideringPanel from './ValideringPanel';\n\nconst initialValues: FormValues = {\n    liste: [],\n};\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst ValideringExample = () => {\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>Validering</h2>\n                <p>sif-common-formik komponenter med validering</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={(formik) => {\n                    const fromDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_fra);\n                    const toDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_til);\n                    return (\n                        <Form.Form\n                            submitButtonLabel=\"Ok\"\n                            includeValidationSummary={true}\n                            includeButtons={true}\n                            formErrorHandler={getIntlFormErrorHandler(intl)}>\n                            <ValideringPanel\n                                title=\"Ja/Nei\"\n                                code={`\nexport enum ValidateYesOrNoError {\nyesOrNoIsUnanswered = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult =\n| ValidateYesOrNoError.yesOrNoIsUnanswered\n| undefined;\n\nconst error = getYesOrNoValidator()(value);\n                    `}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.jaNeiSpørsmål}\n                                        legend=\"Du må svare ja eller nei\"\n                                        validate={getYesOrNoValidator()}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateYesOrNoError.yesOrNoIsUnanswered]: {\n                                            info: 'spørsmål er ikke besvart',\n                                            example: 'Du har ikke svart om du sier ja eller nei',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n\n                            <ValideringPanel\n                                title=\"Fritekst\"\n                                code={`\nexport enum ValidateStringError {\n    notAString = 'notAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateRequiredFieldError.noValue\n    | ValidateStringError.notAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ntype Options = {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst error = getStringValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.tekst}\n                                        label=\"Skriv inn hvilken dag det er i dag - bruk mellom 5 og 20 tegn\"\n                                        bredde=\"L\"\n                                        validate={getStringValidator({\n                                            required: true,\n                                            maxLength: 20,\n                                            minLength: 5,\n                                        })}></Form.Input>\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Du har ikke fylt ut hvilken dag det er i dag',\n                                        },\n                                        [ValidateStringError.stringIsTooLong]: {\n                                            info: 'for lang tekst',\n                                            example: 'Du har brukt for mange tegn for å si hvilken dag det er i dag',\n                                        },\n                                        [ValidateStringError.stringIsTooShort]: {\n                                            info: 'for kort tekst',\n                                            example: 'Du har brukt for få tegn for å si hvilken dag det er i dag',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Tall\"\n                                code={`\nexport enum ValidateNumberError {\n    invalidNumberFormat = 'invalidNumberFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateRequiredFieldError.noValue\n    | ValidateNumberError.invalidNumberFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst error = getNumberValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.NumberInput\n                                        name={FormFields.tall}\n                                        label=\"Skriv inn et årstall mellom 1999 og 2021\"\n                                        bredde=\"S\"\n                                        validate={getNumberValidator({\n                                            required: true,\n                                            min: 1999,\n                                            max: 2021,\n                                        })}></Form.NumberInput>\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Du har ikke fylt ut hvilken dag det er i dag',\n                                        },\n                                        [ValidateNumberError.invalidNumberFormat]: {\n                                            info: 'verdien er ikke et tall',\n                                            example: 'Årstall-feltet inneholder ikke et gyldig formatert tall',\n                                        },\n                                        [ValidateNumberError.numberIsTooLarge]: {\n                                            info: 'for stort tall',\n                                            example: `Årstallet kan ikke være etter 2021`,\n                                        },\n                                        [ValidateNumberError.numberIsTooSmall]: {\n                                            info: 'for lavt tall',\n                                            example: `Årstallet kan ikke være før 1999`,\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Dato\" code={'sdf'}>\n                                <Panel>\n                                    <Form.DatePicker\n                                        name={FormFields.dato}\n                                        label={'Velg en dato i 2021 som ikke er en lørdag eller søndag'}\n                                        showYearSelector={true}\n                                        validate={getDateValidator({\n                                            required: true,\n                                            min: new Date(2021, 0, 1),\n                                            max: new Date(2021, 11, 31),\n                                            onlyWeekdays: true,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Du har ikke fylt ut hvilken dag det er i dag',\n                                        },\n                                        [ValidateDateError.invalidDateFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Datoen i 2021 har ikke gyldig format. Formatet må være dd.mm.åååå',\n                                        },\n                                        [ValidateDateError.dateBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: 'Datoen er for tidlig, første gyldige dato er 1. januar 2021',\n                                        },\n                                        [ValidateDateError.dateAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example: 'Datoen er for sen, siste gyldige dato er 31. desember 2021',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Periodevelger\">\n                                <Panel>\n                                    <Form.DateRangePicker\n                                        legend=\"Velg en tidsperiode i 2021 som ikke er lørdag eller søndag\"\n                                        fromInputProps={{\n                                            label: 'Fra og med',\n                                            name: FormFields.tidsperiode_fra,\n                                            dayPickerProps: { initialMonth: new Date(2021, 0, 1) },\n                                            validate: getDateRangeValidator.validateFromDate({\n                                                min: new Date(2021, 0, 1),\n                                                max: new Date(2021, 11, 31),\n                                                toDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }),\n                                        }}\n                                        toInputProps={{\n                                            label: 'Til og med',\n                                            name: FormFields.tidsperiode_til,\n                                            dayPickerProps: { initialMonth: new Date(2021, 11, 31) },\n                                            validate: getDateRangeValidator.validateToDate({\n                                                min: new Date(2021, 0, 1),\n                                                max: new Date(2021, 11, 31),\n                                                fromDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }),\n                                        }}\n                                    />\n                                </Panel>\n                                <Element tag=\"h3\">Fra-dato</Element>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen verdi',\n                                            example: 'Du må velge fra-dato',\n                                        },\n                                        [ValidateDateError.invalidDateFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example: 'Fra-dato har ikke gyldig format. Formatet må være dd.mm.åååå',\n                                        },\n                                        [ValidateDateError.dateBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: 'Fra-dato er for tidlig, første gyldige dato er 1. januar 2021',\n                                        },\n                                        [ValidateDateError.dateAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example: 'Fra-dato er for sen, siste gyldige dato er 31. desember 2021',\n                                        },\n                                        [ValidateDateRangeError.fromDateIsAfterToDate]: {\n                                            info: 'fra-dato er etter til-dato',\n                                            example: 'Fra-dato kan ikke være etter til-datoen',\n                                        },\n                                    }}\n                                />\n                                <Box margin=\"xl\">\n                                    <Element tag=\"h3\">Til-dato</Element>\n                                    <ValidationErrorList\n                                        errors={{\n                                            [ValidateRequiredFieldError.noValue]: {\n                                                info: 'ingen verdi',\n                                                example: 'Du må velge til-dato',\n                                            },\n                                            [ValidateDateError.invalidDateFormat]: {\n                                                info: 'ugyldig verdi',\n                                                example: 'Til-dato har ikke gyldig format. Formatet må være dd.mm.åååå',\n                                            },\n                                            [ValidateDateError.dateBeforeMin]: {\n                                                info: 'dato er for tidlig',\n                                                example:\n                                                    'Til-dato er for tidlig, første gyldige dato er 1. januar 2021',\n                                            },\n                                            [ValidateDateError.dateAfterMax]: {\n                                                info: 'dato er for sen',\n                                                example: 'Til-dato er for sen, siste gyldige dato er 31. desember 2021',\n                                            },\n                                            [ValidateDateRangeError.toDateIsBeforeFromDate]: {\n                                                info: 'til-dato er før fra-dato',\n                                                example: 'Til-dato kan ikke være før fra-datoen',\n                                            },\n                                        }}\n                                    />\n                                </Box>\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Norsk fødselsnummer/D-nummer\">\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.fødselsnummer}\n                                        bredde=\"M\"\n                                        description={'Eksempelfødselsnummeret \"19081988075\" er ikke lov å taste inn'}\n                                        label=\"Skriv inn et norskt fødselsnummer eller d-nummer. \"\n                                        validate={getFødselsnummerValidator({\n                                            required: true,\n                                            disallowedValues: ['19081988075'],\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen verdi',\n                                            example: 'Du må fylle ut fødselsnummeret',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerNot11Chars]: {\n                                            info: 'ikke 11 tegn',\n                                            example: 'Fødselsnummeret må bestå av 11 siffer',\n                                        },\n                                        [ValidateFødselsnummerError.invalidFødselsnummer]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Fødselsnummeret inneholder 11 siffer, men det er ikke et gyldig norsk fødselsnummer',\n                                        },\n                                        [ValidateFødselsnummerError.disallowedFødselsnummer]: {\n                                            info: 'ikke tillatt fødselsnummer',\n                                            example:\n                                                'Fødselsnummeret du har fylt ut ditt eget. Du må fylle ut barnets fødselsnummer',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Organisasjonsnummer\">\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.orgnummer}\n                                        legend=\"Hva er NAVs organisasjonsnummer\"\n                                        validate={getOrgNumberValidator({ required: true })}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen verdi',\n                                            example: 'Du må fylle ut NAVs organisasjonsnummer',\n                                        },\n                                        [ValidateOrgNumberError.invalidOrgNumberFormat]: {\n                                            info: 'ugyldig orgnummer',\n                                            example: 'Organisasjonsnummeret er ikke gyldig',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Flervalgsliste\">\n                                <Panel>\n                                    <Form.CheckboxPanelGroup\n                                        name={FormFields.liste}\n                                        legend=\"Velg dine to eller tre favorittfrukter\"\n                                        checkboxes={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getListValidator({\n                                            required: true,\n                                            minItems: 2,\n                                            maxItems: 3,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateListError.listIsEmpty]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Du har ikke valgt to eller tre frukter',\n                                        },\n                                        [ValidateListError.listHasTooFewItems]: {\n                                            info: 'for få valgt',\n                                            example: 'Du har ikke valgt nok frukter, du må velge minst 2',\n                                        },\n                                        [ValidateListError.listHasTooManyItems]: {\n                                            info: 'for mange valgt',\n                                            example: 'Du har valgt for mange frukter, du kan ikke velge flere enn 3',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Enkeltvalg i radioliste\">\n                                <Panel>\n                                    <Form.RadioPanelGroup\n                                        name={FormFields.radio}\n                                        legend=\"Velg din éne favorittfrukt\"\n                                        radios={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Du har ikke valgt din favorittgfrukt',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Enkeltvalg i liste\">\n                                <p>Samme valideringslogikk som for en radioliste</p>\n                                <Panel>\n                                    <Form.CountrySelect\n                                        name={FormFields.select}\n                                        label=\"Velg ett land\"\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ikke valgt',\n                                            example: 'Du må velge land',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel title=\"Avkrysningsvalg\">\n                                <Panel>\n                                    <Form.Checkbox\n                                        name={FormFields.checked}\n                                        label=\"Kryss av for at du bare må krysse av denne checkboxen\"\n                                        validate={getCheckedValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    errors={{\n                                        [ValidateCheckedError.notChecked]: {\n                                            info: 'ikke valgt',\n                                            example: 'Du må krysse av for at du bare må gjøre det',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default ValideringExample;\n","import React from 'react';\nimport { Ingress } from 'nav-frontend-typografi';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"@navikt/sif-common-formik\">\n            <h2>Typed formik wrapper for nav-frontend-skjema</h2>\n            <Ingress>\n                Sett av skjema-komponenter laget for team brukerdialog i sykdom-i-familien. Komponentene gjør det\n                enklere og raskere å sette opp skjemaløsninger hvor en bruker typescript, formik of nav-frontend-skjema,\n                og som sørger for at oppførsel og utéendet blir likt på tvers av brukerdialogene.\n            </Ingress>\n            <h3>Kort hvordan det virker</h3>\n            <ol>\n                <li>\n                    Definer alle felter i skjemaet som enums - <code>FieldNames</code>\n                </li>\n                <li>\n                    Definer et interface for skjemaet: <code>FormValues</code>\n                </li>\n            </ol>\n            <p> ... se kode for konkret eksempel</p>\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport ValideringExample from '../examples/validering-example/ValideringExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'formik-example',\n        title: 'TypedFormExample',\n        renderContent: () => <FormikExample />,\n    },\n    {\n        path: 'validering',\n        title: 'Validering',\n        renderContent: () => <ValideringExample />,\n    },\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = () => {\n    const {\n        location: { pathname },\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent: React.FunctionComponent<Props> = ({ history }) => {\n    const {\n        location: { pathname },\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <nav className=\"asideContent\">\n                <LeftMenu />\n            </nav>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\nconst DevPage = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel tag=\"h1\">sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import React from 'react';\nimport '@formatjs/intl-pluralrules/locale-data/en';\nimport '@formatjs/intl-pluralrules/locale-data/nb';\nimport '@formatjs/intl-pluralrules/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element, Feilmelding } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport './formikInputGroup.less';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<ErrorType, FieldName> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikInputGroup<ErrorType, FieldName>({\n    legend,\n    name,\n    feil,\n    children,\n    validate,\n    className,\n    ...restProps\n}: FormikInputGroupProps<ErrorType, FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const isRenderableErrorMsgType = ['string', 'object'].includes(typeof feilProp);\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        className={`${className ? className : ''} singleInputWrapper`}>\n                        {children}\n                        {/** Må sette inn denne selv pga feil på SkjemaGruppe påvirker styling av alle elementer i gruppen*/}\n                        <div\n                            aria-live=\"polite\"\n                            className={`formikInputGroup__error ${\n                                isRenderableErrorMsgType ? 'formikInputGroup__error--with-message' : ''\n                            }`}>\n                            <div tabIndex={-1} id={field.name} className=\"focusable-feilmelding\">\n                                {isRenderableErrorMsgType && (\n                                    <div>\n                                        <Feilmelding>{feilProp}</Feilmelding>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps, Label, SkjemaelementFeilmelding } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport { guid } from 'nav-frontend-js-utils';\nimport './formikInput.less';\nimport bemUtils from '../../utils/bemUtils';\n\nexport interface InputWithSuffix {\n    suffix?: string;\n    suffixStyle?: 'box' | 'text';\n}\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nconst bem = bemUtils('formikInput');\n\nfunction FormikInput<FieldName, ErrorType>({\n    name,\n    feil,\n    id = guid(),\n    suffix,\n    suffixStyle = 'box',\n    label,\n    description,\n    validate,\n    autoComplete,\n    ...restProps\n}: FormikInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const harFeil = feilProp !== undefined;\n                const feilMessageId = `feil-${id}`;\n                if (suffix === undefined) {\n                    return (\n                        <Input\n                            {...restProps}\n                            {...field}\n                            id={id}\n                            description={description}\n                            label={label}\n                            autoComplete={autoComplete || 'off'}\n                            feil={feilProp}\n                            value={field.value === undefined ? '' : field.value}\n                        />\n                    );\n                }\n                return (\n                    <div\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional('withSuffix', suffix !== undefined),\n                            bem.modifier(`suffixStyle--${suffixStyle}`),\n                            bem.modifierConditional('fullbredde', restProps.bredde === 'fullbredde')\n                        )}>\n                        <Label htmlFor={id}>{label}</Label>\n                        {description && <div className=\"skjemaelement__description\">{description}</div>}\n                        <div className={bem.element('inputWrapper')}>\n                            <Input\n                                {...restProps}\n                                {...field}\n                                id={id}\n                                autoComplete={autoComplete || 'off'}\n                                feil={harFeil}\n                                aria-errormessage={feilMessageId}\n                                value={field.value === undefined ? '' : field.value}\n                            />\n                            {suffix && (\n                                <span className={bem.element('suffix', suffixStyle)} aria-hidden={true}>\n                                    {suffix}\n                                </span>\n                            )}\n                        </div>\n                        <SkjemaelementFeilmelding id={`feil-${id}`}>\n                            {getFeilPropForFormikInput({ field, form, context, feil })}\n                        </SkjemaelementFeilmelding>\n                    </div>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(_evt, value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        radios={radios.map((rb) => {\n                            return {\n                                name: `${name}`,\n                                autoComplete: 'off',\n                                'aria-invalid': undefined,\n                                ...rb,\n                            };\n                        })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined) => void;\n\ninterface TimeInputProps {\n    time?: Time | Partial<Time> | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    onChange: TimeInputChangeFunc;\n    layout?: 'normal' | 'compact';\n}\n\nconst bem = bemUtils('timeInput');\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    if ((time.hours === undefined || isNaN(time.hours)) && (time.minutes === undefined || isNaN(time.minutes))) {\n        onChange(undefined);\n    } else {\n        onChange(time);\n    }\n};\n\nconst getNewTime = (\n    stateTime: Partial<Time> | undefined = {},\n    values: { hours?: string; minutes?: string }\n): Partial<Time> => {\n    if (values.hours !== undefined) {\n        const hours = parseInt(values.hours, 10);\n        if (!isNaN(hours)) {\n            return {\n                ...stateTime,\n                hours,\n            };\n        }\n        return stateTime.minutes ? { ...stateTime, hours: undefined } : { hours: undefined };\n    }\n    if (values.minutes !== undefined) {\n        const minutes = parseInt(values.minutes, 10);\n        if (!isNaN(minutes)) {\n            return {\n                ...stateTime,\n                minutes,\n            };\n        }\n        return stateTime.hours ? { ...stateTime, minutes: undefined } : { minutes: undefined };\n    }\n\n    return stateTime;\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    onChange,\n    layout = 'compact',\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const hours =\n        !stateTime || stateTime.hours === undefined || isNaN(stateTime.hours)\n            ? ''\n            : Math.min(stateTime.hours, maxHours);\n    const minutes =\n        !stateTime || stateTime.minutes === undefined || isNaN(stateTime.minutes)\n            ? ''\n            : Math.min(stateTime.minutes, maxMinutes);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(layout))}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"number\"\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={hours}\n                        autoComplete=\"off\"\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { hours: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"number\"\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={minutes}\n                        autoComplete=\"off\"\n                        onBlur={(evt: React.FocusEvent<HTMLInputElement>) => {\n                            if (evt.target.value === '' || evt.target.value === '0') {\n                                const newTime = {\n                                    ...stateTime,\n                                    minutes: stateTime && stateTime.hours !== undefined ? 0 : undefined,\n                                };\n                                setStateTime(newTime);\n                                handleTimeChange(newTime, onChange);\n                            }\n                        }}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { minutes: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps, Label } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\n\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput from './TimeInput';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n}\n\nexport type FormikTimeInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikTimeInput<FieldName, ErrorType>({\n    label,\n    name,\n    validate,\n    feil,\n    ...restProps\n}: FormikTimeInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>{label}</Label>\n\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCheckbox<FieldName, ErrorType>({\n    name,\n    validate,\n    afterOnChange,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        autoComplete=\"off\"\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return fieldValues.includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value),\n                            autoComplete: 'off',\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(_evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    Omit<TypedFormInputValidationProps<FieldName, ErrorType>, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName, ErrorType>({\n    children,\n    name,\n    feil,\n    validate,\n    inputProps,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        inputProps={{ ...inputProps, autoComplete: 'off' }}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    return countries.getName(alphaCode, locale);\n};\n\nexport const getCountries = () => countries;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport FormikInputGroup from '../formik-input-group/FormikInputGroup';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName, ErrorType>\n    extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    legend?: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    toDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    description?: React.ReactNode;\n}\n\nfunction FormikDateIntervalPicker<FieldName, ErrorType>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    description,\n    validate,\n}: DateIntervalPickerProps<FieldName, ErrorType>) {\n    const name = `${fromDatepickerProps.name}_${toDatepickerProps.name}` as any;\n    return (\n        <FormikInputGroup\n            name={name}\n            validate={validate ? (value) => validate(value, name) : undefined}\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName, ErrorType> {...toDatepickerProps} />\n            </div>\n        </FormikInputGroup>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport FormikInput, { InputWithSuffix } from '../formik-input/FormikInput';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'type' | 'pattern' | 'inputMode' | 'min' | 'max'> {\n    name: FieldName;\n    integerValue?: boolean;\n}\n\nexport type FormikNumberInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nfunction FormikNumberInput<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    autoComplete,\n    bredde = 'S',\n    integerValue = false,\n    ...restProps\n}: FormikNumberInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <FormikInput\n                        {...restProps}\n                        {...field}\n                        type=\"text\"\n                        bredde={bredde}\n                        autoComplete={autoComplete || 'off'}\n                        inputMode={integerValue ? 'numeric' : 'text'}\n                        pattern={integerValue ? '[0-9]*' : undefined}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikNumberInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Radio, RadioGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n}\n\nexport type FormikRadioGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    ...restProps\n}: FormikRadioGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioGruppe {...restProps} feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {radios.map((rb, idx) => {\n                            const isSelected = field.value === rb.value;\n                            return (\n                                <Radio\n                                    key={idx}\n                                    {...rb}\n                                    name={(name as any) as string}\n                                    checked={isSelected}\n                                    autoComplete=\"off\"\n                                    onChange={(evt) => {\n                                        form.setFieldValue(field.name, evt.target.value);\n                                        if (context) {\n                                            context.onAfterFieldValueSet();\n                                        }\n                                    }}\n                                />\n                            );\n                        })}\n                    </RadioGruppe>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikSelect<FieldName, ErrorType>({\n    name,\n    children,\n    validate,\n    feil,\n    ...restProps\n}: FormikSelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        autoComplete=\"off\"\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikTextarea<FieldName, ErrorType>({\n    name,\n    validate,\n    feil,\n    ...restProps\n}: FormikTextareaProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        autoComplete=\"off\"\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","import React from 'react';\nimport { TypedFormInputValidationProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from '../formik-radio-panel-group/FormikRadioPanelGroup';\n\nexport interface FormikYesOrNoQuestionProps<FieldName, ErrorType>\n    extends Omit<FormikRadioPanelGroupProps<FieldName, ErrorType>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    useTwoColumns?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName, ErrorType>({\n    name,\n    includeDoNotKnowOption,\n    labels,\n    useTwoColumns = true,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName, ErrorType> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName, ErrorType>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : []),\n            ]}\n            {...restProps}\n            name={name}\n            useTwoColumns={includeDoNotKnowOption ? false : useTwoColumns}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps,\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps,\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, { FormikCountrySelectProps } from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps,\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDateRangePicker, { FormikDateRangePickerProps } from './formik-date-range-picker/FormikDateRangePicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikNumberInput, { FormikNumberInputProps } from './formik-number-input/FormikNumberInput';\nimport FormikRadioGroup, { FormikRadioGroupProps } from './formik-radio-group/FormikRadioGroup';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikTimeInput, { FormikTimeInputProps } from './formik-time-input/FormikTimeInput';\nimport FormikYesOrNoQuestion, { FormikYesOrNoQuestionProps } from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, { TypedFormikWrapperProps } from './typed-formik-wrapper/TypedFormikWrapper';\nimport '../styles/nav-frontend-skjema-extension.less';\n\nexport function getTypedFormComponents<FieldName, FormValues, ErrorType = string>() {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldName, ErrorType>) => (\n            <FormikCheckbox<FieldName, ErrorType> {...props} />\n        ),\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikCheckboxPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) => (\n            <FormikConfirmationCheckboxPanel<FieldName, ErrorType> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldName, ErrorType>) => (\n            <FormikCountrySelect<FieldName, ErrorType> {...props} />\n        ),\n        DatePicker: (props: FormikDatepickerProps<FieldName, ErrorType>) => (\n            <FormikDatepicker<FieldName, ErrorType> {...props} />\n        ),\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldName, ErrorType>) => (\n            <FormikDateIntervalPicker<FieldName, ErrorType> {...props} />\n        ),\n        DateRangePicker: (props: FormikDateRangePickerProps<FieldName, ErrorType>) => (\n            <FormikDateRangePicker<FieldName, ErrorType> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldName>) => <FormikFileInput<FieldName, ErrorType> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues, ErrorType>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldName, ErrorType>) => <FormikInput<FieldName, ErrorType> {...props} />,\n        NumberInput: (props: FormikNumberInputProps<FieldName, ErrorType>) => (\n            <FormikNumberInput<FieldName, ErrorType> {...props} />\n        ),\n        InputGroup: (props: FormikInputGroupProps<ErrorType, FieldName>) => (\n            <FormikInputGroup<ErrorType, FieldName> {...props} />\n        ),\n        RadioGroup: (props: FormikRadioGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioGroup<FieldName, ErrorType> {...props} />\n        ),\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldName, ErrorType>) => <FormikSelect<FieldName, ErrorType> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldName, ErrorType>) => (\n            <FormikTextarea<FieldName, ErrorType> {...props} />\n        ),\n        TimeInput: (props: FormikTimeInputProps<FieldName, ErrorType>) => (\n            <FormikTimeInput<FieldName, ErrorType> {...props} />\n        ),\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldName, ErrorType>) => (\n            <FormikYesOrNoQuestion<FieldName, ErrorType> {...props} />\n        ),\n    };\n}\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        const { current } = summaryEl;\n        if (current !== null) {\n            current.focus();\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            innerRef={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllFieldsWithErrors, getErrorForField } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const fieldsWithErrors =\n            !formik.isValid && getAllFieldsWithErrors(formik.errors, context.isHandledErrorTypeChecker);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = fieldsWithErrors\n            ? fieldsWithErrors.map((fieldName) => {\n                  const error = getErrorForField(fieldName, formik.errors);\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorHandler ? context.fieldErrorHandler(error, fieldName) : error,\n                      skjemaelementId: fieldName,\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import React from 'react';\n\nfunction UploadSvg(props: any) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <SkjemagruppeQuestion\n                feil={feil}\n                className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\" // eslint-disable-line\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </SkjemagruppeQuestion>\n        );\n    }\n}\n","import React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName, ErrorType>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick,\n}: FormikFileInputProps<FieldName> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (\n    onluEuAndEftaCountries: boolean,\n    locale: string,\n    useAlpha3Code = true\n): React.ReactNode[] => {\n    const lang = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n\n    const names: [string, any][] = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[0], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option\n                key={countryOptionValue[0]}\n                value={useAlpha3Code ? countries.alpha2ToAlpha3(countryOptionValue[0]) : countryOptionValue[0]}>\n                {countryOptionValue[1]}\n            </option>\n        ));\n};\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale,\n                this.props.useAlpha3Code\n            ),\n        };\n    }\n\n    getCountryOptions(locale: string): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, useAlpha3Code, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)} autoComplete=\"off\">\n                <option value=\"\" />\n                {this.getCountryOptions(locale || 'nb')}\n            </Select>\n        );\n    }\n}\n\nexport default CountrySelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCountrySelect<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    label,\n    useAlpha3Code = true,\n    showOnlyEuAndEftaCountries,\n}: FormikCountrySelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        {...field}\n                        label={label}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                        useAlpha3Code={useAlpha3Code}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(width))}>{children}</div>\n);\n\nexport default DialogFormWrapper;\n","import React from 'react';\nimport { default as NFModal } from 'nav-frontend-modal';\nimport './modal.less';\n\nexport interface ModalProps {\n    className?: string;\n    isOpen: boolean;\n    onRequestClose: () => void;\n    contentLabel: string;\n    shouldCloseOnOverlayClick?: boolean;\n}\n\nconst Modal: React.FunctionComponent<ModalProps> = ({\n    isOpen,\n    onRequestClose,\n    contentLabel,\n    className,\n    shouldCloseOnOverlayClick = false,\n    children,\n}) => (\n    <NFModal\n        className={`modal ${className ? className : ''}`}\n        isOpen={isOpen}\n        shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n        contentLabel={contentLabel}\n        onRequestClose={onRequestClose}>\n        <article className=\"modal__content\">{children}</article>\n    </NFModal>\n);\n\nexport default Modal;\n"],"sourceRoot":""}