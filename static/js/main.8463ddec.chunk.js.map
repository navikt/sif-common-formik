{"version":3,"sources":["typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal/Modal.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","typed-formik-form/index.ts","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","dev/validation/fødselsnummerValidator.ts","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","dev/components/question/Question.tsx","dev/modules/validation/fieldValidationRenderUtils.ts","dev/components/tiles/Tiles.tsx","dev/validation/fieldValidations.ts","dev/validation/hasValue.ts","dev/examples/formik-example/ferieuttak-example/types.ts","dev/examples/formik-example/ferieuttak-example/FerieuttakForm.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakListAndDialog.tsx","dev/examples/formik-example/types.ts","dev/examples/formik-example/typed-form-example/TypedFormExample.tsx","dev/examples/formik-example/FormikExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","typed-formik-form/components/helpers/skjemagruppe-question/SkjemagruppeQuestion.tsx","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/components/formik-datepicker/validateFormikDatepickerDate.ts","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","typed-formik-form/utils/bemUtils.ts","typed-formik-form/types/index.ts","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-radio-group/FormikRadioGroup.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo.tsx","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/components/formik-number-input/FormikNumberInput.tsx","typed-formik-form/components/formik-number-input/validateFormikNumberInputValue.ts","typed-formik-form/utils/validateAll.ts","typed-formik-form/components/formik-date-range-picker/dateRangePickerUtils.ts","typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker.tsx"],"names":["getFeilPropForFormikInput","feil","field","form","context","getAndRenderFieldErrorMessage","undefined","getErrorsForField","elementName","errors","fieldErrors","getIn","Array","isArray","length","isValidationErrorsVisible","formik","status","showErrors","flattenFieldErrors","flatErrors","flatten","allErrorKeys","Object","keys","flattendFieldErrors","forEach","key","errorKey","flattenedKey","searchString","indexOf","a","slice","split","returnAllInFrontOfKey","values","valueKeys","filter","valueKey","substr","unflatten","getValuesForFlattenedKey","getAllErrors","ButtonRow","children","align","layout","cls","className","React","Children","map","knapp","index","TypedFormikFormContext","createContext","TypedFormikForm","oldProps","currentProps","onCancel","resetFormOnCancel","includeValidationSummary","submitButtonLabel","cancelButtonLabel","fieldErrorRenderer","onValidSubmit","noButtonsContentRenderer","id","cleanup","includeButtons","runDelayedFormValidation","cancelButtonType","useFormikContext","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValid","isValidating","useState","formSubmitCount","setFormSubmitCout","hasCleanedUp","counter","cleanupState","setCleanupState","ref","useRef","useEffect","current","onSubmit","evt","stopPropagation","preventDefault","setValues","runCleanup","noValidate","autoComplete","Provider","value","name","onAfterFieldValueSet","setTimeout","validateForm","createTypedFormikFormContext","style","marginTop","FormikValidationErrorSummary","type","htmlType","onClick","bem","bemUtils","DialogFormWrapper","width","classNames","block","modifier","Modal","isOpen","onRequestClose","contentLabel","shouldCloseOnOverlayClick","ModalFormAndList","items","listRenderer","formRenderer","labels","error","dialogWidth","onChange","isVisible","modalState","setModalState","resetModal","selectedItem","showListTitle","modalTitle","item","guid","allItems","SkjemagruppeQuestion","legend","listTitle","tag","onEdit","onDelete","i","emptyListText","paddingBottom","mini","addLabel","FormikModalFormAndList","sortFunc","onAfterChange","validate","useContext","updatedValues","sort","setFieldValue","appMessages","nb","nn","AppIntlProvider","locale","onError","messages","NAVLogo","FødselsnummerValidationErrorReason","props","viewBox","fill","fillRule","d","element","e","m","modifierConditional","condition","child","c","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","title","Question","marginBottom","renderIntlFieldValidationError","intl","formatMessage","parsedValues","valueOrFunc","renderIntlFieldValidationValues","require","FieldValidationErrors","hasValue","v","Ferieland","createFieldValidationError","fieldIsRequiredError","påkrevd","validateRequiredField","FerieuttakFormFields","getTypedFormComponents","FerieuttakListAndDialog","FormFields","Form","TypedFormExample","useIntl","UnansweredQuestionsInfo","isIntlFieldValidationErrorType","suffix","label","firstname","bredde","description","RadioGroup","letters","radios","DatePicker","birthdate","nameGroup","initialValues","ferieuttak","fom","Date","tom","dayjs","add","toDate","land","FormikExample","TypedFormikWrapper","console","log","renderForm","Intro","routes","path","renderContent","isActiveRoute","pathname","lenkeBem","LeftMenu","useHistory","location","route","to","withRouter","routeConfig","find","f","getRouteConfig","history","maxWidth","DevPage","App","setAppElement","ReactDOM","render","document","getElementById","getLocaleToUse","FormikDatepicker","showYearSelector","fullscreenOverlay","fullScreenOnMobile","minDate","maxDate","disableWeekend","disabledDateRanges","inputTitle","disableFormatValidation","invalidFormatErrorKey","placeholder","restProps","isWide","useMedia","minWidth","elementId","position","inputName","validations","dateString","errorIntlKey","isISODateString","validateDateString","push","validateAll","isInvalid","htmlFor","inputId","inputProps","limitations","datepickerUtils","parseDateLimitations","calendarSettings","isoStringFormat","dateToISOString","date","format","ISOStringToDate","getDateFromDateString","getDateStringFromValue","invalidDateRanges","from","weekendsNotSelectable","renderFormContent","setSubmitting","setTouched","FormikRadioPanelGroup","useTwoColumns","checked","rb","handleTimeChange","time","hours","isNaN","minutes","getNewTime","stateTime","parseInt","TimeInput","maxHours","maxMinutes","setStateTime","Math","min","hoursLabelId","minutesLabelId","max","maxLength","newTime","target","onBlur","FormikTimeInput","YesOrNo","FormikCheckbox","afterOnChange","newValue","isCheckboxChecked","fieldValues","includes","FormikCheckboxPanelGroup","checkboxes","cb","keyProp","el","FormikConfirmationCheckboxPanel","countries","getCountries","FormikDateIntervalPicker","fromDatepickerProps","toDatepickerProps","FormikInput","aria-hidden","FormikInputGroup","errorMsg","isRenderableErrorMsgType","aria-live","tabIndex","FormikRadioGroup","idx","isSelected","FormikSelect","FormikTextarea","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","YES","NO","DO_NOT_KNOW","Checkbox","CheckboxPanelGroup","ConfirmationCheckbox","CountrySelect","DateIntervalPicker","DateRangePicker","FileInput","FormikWrapper","Input","NumberInput","InputGroup","RadioPanelGroup","Select","Textarea","YesOrNoQuestion","ValidationErrorLink","href","stopClickEvent","ValidationSummary","errorMessages","summaryEl","focus","innerRef","tittel","customFeilRender","elementById","skjemaelementId","elementByName","getElementsByName","feilmelding","allErrors","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fileSelectHandler","bind","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","files","this","onFilesSelect","dataTransfer","inputElement","which","click","multiple","acceptedExtensions","role","onDragOver","onDrop","accept","Component","FormikFileInput","arrayHelpers","filteredListEØSCountries","countryOptionValue","shouldFilter","createCountryOptions","onluEuAndEftaCountries","useAlpha3Code","lang","names","entries","getNames","b","localeCompare","alpha2ToAlpha3","countryOptionsCache","getCountryOptions","updateCache","options","showOnlyEuAndEftaCountries","FormikCountrySelect","FormikNumberInput","disableNumberValidation","invalidNumberErrorKey","integerValue","numString","replace","Number","validateFormikNumberInputValue","inputMode","pattern","result","some","r","extend","isSameOrBefore","minMax","sortDateRange","d1","d2","sortDateRangeByToDate","findClosestDateAfterDate","fromDate","dates","dayjss","isAfter","getClosestDateRangeBeforeDate","ranges","rangesBeforeDate","dateRange","isBefore","getRangesEndingBeforeDate","reverse","getClosestDateRangeAfterDate","rangesAfterDate","getRangesStartingAfterDate","getFollowingDate","allowRangesToStartAndStopOnSameDate","subtract","getMaxDateForRangeStart","otherRanges","dateRanges","follwingDateRange","followingRangeeDate","getMaxDateForRangeEnd","baseDate","followingDate","getPreceedingDate","getMinDateForRangeStart","preceedingDateRange","preceedingDate","findClosestDateBeforeDate","getMinDateForRangeEnd","findClosestDateBeforeOrEqualDate","FormikDateRangePicker","fromInputProps","toInputProps","fromDateLimitations","toDateLimitations"],"mappings":"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","file":"static/js/main.8463ddec.chunk.js","sourcesContent":["import flatten, { unflatten } from 'flat';\nimport { FieldInputProps, FormikErrors, FormikProps, getIn } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { NavFrontendSkjemaFeil } from '../types';\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context,\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorsForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): FormikErrors<FormValues> | undefined => {\n    const fieldErrors = getIn(errors, elementName);\n    if (Array.isArray(fieldErrors) && fieldErrors.length === 1 && fieldErrors[0] === null) {\n        // Filter out fieldArray errors containing only null item\n        return undefined;\n    }\n    return fieldErrors;\n};\n\nexport const isValidationErrorsVisible = (formik: FormikProps<any>): boolean => {\n    return formik?.status?.showErrors === true;\n};\n\nexport const returnAllInFrontOfKey = (flattenedKey: string): string | undefined => {\n    const searchString = '.key';\n    if (flattenedKey.indexOf(searchString) >= 0) {\n        const a = flattenedKey.slice().split(searchString);\n        if (a[0]) {\n            return a[0];\n        }\n    }\n    return undefined;\n};\n\ninterface FlattendErrors {\n    [key: string]: any;\n}\n\nconst getValuesForFlattenedKey = (flatErrors: FlattendErrors, errorKey: string): any => {\n    const allErrorKeys = Object.keys(flatErrors);\n    const valueKeys = allErrorKeys.filter((key) => key.indexOf(`${errorKey}.values`) >= 0);\n    if (valueKeys.length > 0) {\n        const values = {};\n        valueKeys.forEach((key) => {\n            const valueKey = key.substr(key.indexOf(`.values`) + 8);\n            // const valueKey = valueKeyWithIndex.substr(valueKeyWithIndex.indexOf('.') + 1); // Remove index added by flatten\n            values[valueKey] = unflatten(flatErrors[key]);\n        });\n        return values;\n    }\n    return undefined;\n};\n\nexport const flattenFieldErrors = (errors: any) => {\n    const flatErrors = flatten(errors) as FlattendErrors;\n    const allErrorKeys = Object.keys(flatErrors);\n    const flattendFieldErrors = {};\n    allErrorKeys.forEach((key) => {\n        const errorKey = returnAllInFrontOfKey(key);\n        if (errorKey) {\n            const values = getValuesForFlattenedKey(flatErrors, errorKey);\n            flattendFieldErrors[errorKey] = {\n                key: flatErrors[errorKey + '.key'],\n                values,\n            };\n        }\n    });\n    return flattendFieldErrors;\n};\n\nexport function getAllErrors<FormValues>(formik: FormikProps<FormValues>): FormikErrors<FormValues> | undefined {\n    const errors = formik && formik.errors && Object.keys(formik.errors).length > 0 ? formik.errors : undefined;\n    if (errors) {\n        const numberOfErrors = Object.keys(errors).length;\n        if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n            return flattenFieldErrors(errors);\n        }\n    }\n    return undefined;\n}\n","import React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.FunctionComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikErrors, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { CancelButtonTypes, NavFrontendSkjemaFeil } from '../../types';\nimport { getErrorsForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\n\nexport type FormikErrorRender<FormValues> = (error: FormikErrors<FormValues>) => NavFrontendSkjemaFeil;\n\nexport interface TypedFormikFormProps<FormValues> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    noButtonsContentRenderer?: () => React.ReactNode;\n    fieldErrorRenderer: FormikErrorRender<FormValues>;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    id?: string;\n    cleanup?: (values: FormValues) => FormValues;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n    cancelButtonType?: CancelButtonTypes;\n    runDelayedFormValidation?: boolean;\n}\n\nexport interface TypedFormikFormContextType {\n    showErrors: boolean;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    fieldErrorRenderer?: FormikErrorRender<any>;\n    onAfterFieldValueSet: () => void;\n}\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\nexport const userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues>({\n    children,\n    onCancel,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    fieldErrorRenderer,\n    onValidSubmit,\n    noButtonsContentRenderer,\n    id,\n    cleanup,\n    includeButtons = true,\n    runDelayedFormValidation,\n    cancelButtonType,\n}: TypedFormikFormProps<FormValues>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount, setFormSubmitCout] = useState(submitCount);\n    const [cleanupState, setCleanupState] = useState({ hasCleanedUp: false, counter: 0 });\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid,\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                if (isValid) {\n                    setFormSubmitCout(submitCount);\n                }\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    useEffect(() => {\n        cleanupState.hasCleanedUp && handleSubmit();\n    }, [cleanupState, handleSubmit]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const runCleanup = (evt: React.FormEvent<HTMLFormElement>) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        formik.setValues(cleanup ? cleanup(formik.values) : formik.values);\n        setCleanupState({ hasCleanedUp: true, counter: cleanupState.counter + 1 });\n    };\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        setCleanupState({ ...cleanupState, hasCleanedUp: false });\n        if (cleanup !== undefined) {\n            runCleanup(evt);\n        } else {\n            handleSubmit(evt);\n        }\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            fieldErrorRenderer,\n            showErrors,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const errors = getErrorsForField(field.name, form.errors);\n                    if (errors) {\n                        return fieldErrorRenderer ? fieldErrorRenderer(errors) : true;\n                    }\n                }\n                return undefined;\n            },\n            onAfterFieldValueSet: () => {\n                if (runDelayedFormValidation && formik.status && formik.status.showErrors) {\n                    setTimeout(() => {\n                        formik.validateForm();\n                    });\n                }\n            },\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className} id={id} autoComplete=\"off\">\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && isValidationErrorsVisible(formik) && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type={cancelButtonType || 'flat'}\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n                {includeButtons === false && noButtonsContentRenderer && (\n                    <div style={{ marginTop: '2rem' }}>{noButtonsContentRenderer()}</div>\n                )}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(width))}>{children}</div>\n);\n\nexport default DialogFormWrapper;\n","import React from 'react';\nimport { default as NFModal } from 'nav-frontend-modal';\nimport './modal.less';\n\nexport interface ModalProps {\n    className?: string;\n    isOpen: boolean;\n    onRequestClose: () => void;\n    contentLabel: string;\n    shouldCloseOnOverlayClick?: boolean;\n}\n\nconst Modal: React.FunctionComponent<ModalProps> = ({\n    isOpen,\n    onRequestClose,\n    contentLabel,\n    className,\n    shouldCloseOnOverlayClick = false,\n    children,\n}) => (\n    <NFModal\n        className={`modal ${className ? className : ''}`}\n        isOpen={isOpen}\n        shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n        contentLabel={contentLabel}\n        onRequestClose={onRequestClose}>\n        <article className=\"modal__content\">{children}</article>\n    </NFModal>\n);\n\nexport default Modal;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport DialogFormWrapper, { DialogFormWrapperWidths } from '../dialog-form-wrapper/DialogFormWrapper';\nimport Modal from '../modal/Modal';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    allItems?: ItemType[];\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    onChange,\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false,\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    const showListTitle = items.length > 0;\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({\n                        onSubmit: handleOnSubmit,\n                        onCancel: resetModal,\n                        item: modalState.selectedItem,\n                        allItems: items,\n                    })}\n                </DialogFormWrapper>\n            </Modal>\n            <SkjemagruppeQuestion legend={showListTitle ? labels.listTitle : undefined} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                <div style={showListTitle ? { marginTop: '1rem' } : undefined}>\n                    <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })} mini={true}>\n                        {labels.addLabel}\n                    </Knapp>\n                </div>\n            </SkjemagruppeQuestion>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { FormikValidateFunction, NavFrontendSkjemaFeil } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType> extends ModalFormAndListProps<ItemType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    validate?: FormikValidateFunction;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    validate,\n}: FormikModalFormAndListProps<FieldName, ItemType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","export { default as FormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCheckboxPanelGroup } from './components/formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nexport { default as FormikConfirmationCheckboxPanel } from './components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nexport { default as FormikCountrySelect } from './components/formik-country-select/FormikCountrySelect';\nexport { default as FormikDateIntervalPicker } from './components/formik-date-interval-picker/FormikDateIntervalPicker';\nexport { default as FormikDatepicker } from './components/formik-datepicker/FormikDatepicker';\nexport { default as FormikFileInput } from './components/formik-file-input/FormikFileInput';\nexport { default as FormikInput } from './components/formik-input/FormikInput';\nexport { default as FormikNumberInput } from './components/formik-number-input/FormikNumberInput';\nexport { default as FormikInputGroup } from './components/formik-input-group/FormikInputGroup';\nexport { default as FormikModalFormAndList } from './components/formik-modal-form-and-list/FormikModalFormAndList';\nexport { default as FormikRadioPanelGroup } from './components/formik-radio-panel-group/FormikRadioPanelGroup';\nexport { default as FormikRadioGroup } from './components/formik-radio-group/FormikRadioGroup';\nexport { default as FormikSelect } from './components/formik-select/FormikSelect';\nexport { default as FormikTextarea } from './components/formik-textarea/FormikTextarea';\nexport { default as FormikTimeInput } from './components/formik-time-input/FormikTimeInput';\nexport { default as FormikValidationErrorSummary } from './components/formik-validation-error-summary/FormikValidationErrorSummary';\nexport { default as FormikYesOrNoQuestion } from './components/formik-yes-or-no-question/FormikYesOrNoQuestion';\n\nexport { default as TypedFormikForm, TypedFormikFormContext } from './components/typed-formik-form/TypedFormikForm';\nexport { default as TypedFormikWrapper } from './components/typed-formik-wrapper/TypedFormikWrapper';\n\nexport { default as UnansweredQuestionsInfo } from './components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo';\nexport { default as LabelWithInfo } from './components/helpers/label-with-info/LabelWithInfo';\nexport { default as SkjemagruppeQuestion } from './components/helpers/skjemagruppe-question/SkjemagruppeQuestion';\n\nexport * from './types';\nexport * from './utils/countryUtils';\nexport * from './utils/formikUtils';\nexport * from './utils/typedFormErrorUtils';\nexport * from './components/getTypedFormComponents';\nexport { ISOStringToDate, dateToISOString } from './components/formik-datepicker/datepickerUtils';\nexport * from './components/formik-modal-form-and-list/types';\n","export const appMessages = {\n    nb: {\n        'common.fieldvalidation.påkrevd': 'Påkrevd verdi',\n        'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n        'common.fieldvalidation.dato.ugyldigFormat': 'Ugyldig dato - format på dato skal være dd.mm.åååå',\n    },\n    nn: {\n        'common.fieldvalidation.påkrevd': 'Påkrevd verdi',\n        'common.fieldvalidation.ugyldigTall': 'Ugyldig tall',\n        'common.fieldvalidation.dato.ugyldigFormat': 'Ugyldig dato - format på dato skal være dd.mm.åååå',\n    },\n};\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","const fnrvalidator = require('@navikt/fnrvalidator');\n\nexport enum FødselsnummerValidationErrorReason {\n    MustConsistOf11Digits = 'fnr must consist of 11 digits',\n    InvalidDate = 'invalid date',\n    ChecksumsDontMatch = \"checksums don't match\",\n}\n\ninterface FnrValidationResult {\n    reasons?: FødselsnummerValidationErrorReason[];\n    status: 'valid' | 'invalid';\n}\n\nexport const fødselsnummerIsValid = (value: string): [boolean, FødselsnummerValidationErrorReason[]] => {\n    const { status, reasons }: FnrValidationResult = fnrvalidator.fnr(value);\n    if (status === 'valid') {\n        return [true, []];\n    } else {\n        if (reasons) {\n            return [false, reasons];\n        }\n        return [false, []];\n    }\n};\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React from 'react';\nimport bemHelper from '../../utils/bemUtils';\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined,\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import React from 'react';\n\nconst Question: React.FunctionComponent = ({ children }) => <div style={{ marginBottom: '2rem' }}>{children}</div>;\n\nexport default Question;\n","import { IntlShape } from 'react-intl';\nimport { FieldValidationResultValues, IntlFieldValidationError } from './types';\n\nexport const isIntlFieldValidationErrorType = (error: any): error is IntlFieldValidationError =>\n    typeof error === 'object' && error.key !== undefined;\n\nexport const renderIntlFieldValidationValues = (\n    intl: IntlShape,\n    values?: FieldValidationResultValues\n): { [key: string]: string } | undefined => {\n    if (values === undefined) {\n        return undefined;\n    }\n    const parsedValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc !== undefined) {\n            parsedValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return parsedValues;\n};\n\nexport const renderIntlFieldValidationError = (intl: IntlShape, error: IntlFieldValidationError): string => {\n    return intl.formatMessage({ id: error.key }, renderIntlFieldValidationValues(intl, error.values));\n};\n","import React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\ninterface Props {\n    columns?: 1 | 2 | 3 | 'flex';\n}\n\nconst Tiles: React.FunctionComponent<Props> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import { YesOrNo } from '../../typed-formik-form';\nimport { FieldValidationArray, FormikValFunc } from '../../typed-formik-form/types/fieldValidation';\nimport { FieldValidationResult } from '../modules/validation/types';\nimport { erGyldigNorskOrgnummer } from './erGyldigNorskOrgnummer';\nimport { fødselsnummerIsValid, FødselsnummerValidationErrorReason } from './fødselsnummerValidator';\nimport { hasValue } from './hasValue';\n\nexport enum FieldValidationErrors {\n    'påkrevd' = 'common.fieldvalidation.påkrevd',\n    'fødselsnummer_11siffer' = 'common.fieldvalidation.fødselsnummer.11siffer',\n    'fødselsnummer_ugyldig' = 'common.fieldvalidation.fødselsnummer.ugyldig',\n    'orgnum_ugyldig' = 'common.fieldvalidation.orgnum.ugyldig',\n    'dato_ugyldig' = 'common.fieldvalidation.dato.ugyldig',\n    'ugyldig_tall' = 'common.fieldvalidation.ugyldig_tall',\n}\nexport const createFieldValidationError = <T extends string>(\n    key: T | undefined,\n    values?: any\n): FieldValidationResult => {\n    return key\n        ? {\n              key,\n              values,\n          }\n        : undefined;\n};\nexport const fieldIsRequiredError = () => createFieldValidationError(FieldValidationErrors.påkrevd);\n\nexport const validateFødselsnummer = (v: string): FieldValidationResult => {\n    const [isValid, reasons] = fødselsnummerIsValid(v);\n    if (!isValid) {\n        if (reasons.includes(FødselsnummerValidationErrorReason.MustConsistOf11Digits)) {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_11siffer);\n        } else {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_ugyldig);\n        }\n    }\n};\n\nexport const validateYesOrNoIsAnswered = (answer: YesOrNo): FieldValidationResult => {\n    if (answer === YesOrNo.UNANSWERED || answer === undefined) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredField = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateTruthyCheckbox = (value: any): FieldValidationResult => {\n    if (value !== true) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredList = (value: any): FieldValidationResult => {\n    if (!hasValue(value) || value?.length === 0) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredSelect = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateOrgNumber = (orgnum: string, isNorwegian: boolean): FieldValidationResult => {\n    if (isNorwegian) {\n        if (!erGyldigNorskOrgnummer(orgnum)) {\n            return { key: FieldValidationErrors.orgnum_ugyldig };\n        }\n        return undefined;\n    }\n    return validateRequiredField(orgnum);\n};\n\nexport const validateAll: FieldValidationArray = (validations: FormikValFunc[]) => (\n    value: any\n): FieldValidationResult => {\n    let result: FieldValidationResult;\n    validations.some((validate) => {\n        const r = validate(value);\n        if (r) {\n            result = r;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\n","export const hasValue = (v: any) => v !== '' && v !== undefined && v !== null;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    land: Ferieland[];\n}\n\nexport const isFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined && ferieuttak.land !== undefined;\n};\n\nexport enum Ferieland {\n    'Norge' = 'norge',\n    'Sverige' = 'sverige',\n    'Danmark' = 'danmark',\n}\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { commonFieldErrorRenderer } from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { getTypedFormComponents, ISOStringToDate } from '../../../../typed-formik-form';\nimport { validateRequiredList } from '../../../validation/fieldValidations';\nimport { Ferieland, Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n    land = 'land',\n}\n\ntype FormValues = Partial<Ferieuttak>;\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues>();\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak = { fom: undefined, tom: undefined, land: [] },\n    alleFerieuttak = [],\n    onSubmit,\n    onCancel,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFerieuttak(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={ferieuttak}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={FerieuttakFormFields.land}\n                            legend={'Hvilket land'}\n                            checkboxes={[\n                                {\n                                    value: Ferieland.Norge,\n                                    label: 'Norge',\n                                },\n                                {\n                                    value: Ferieland.Sverige,\n                                    label: 'Sverige',\n                                },\n                                {\n                                    value: Ferieland.Danmark,\n                                    label: 'Danmark',\n                                },\n                            ]}\n                            validate={validateRequiredList}\n                        />\n                        <Form.DateIntervalPicker\n                            legend={formLabels.intervalTitle}\n                            fromDatepickerProps={{\n                                label: formLabels.fromDate,\n                                name: FerieuttakFormFields.fom,\n                                fullscreenOverlay: true,\n                                minDate,\n                                maxDate: maxDate || formik.values.tom,\n                                disabledDateRanges: alleFerieuttak\n                                    .filter((f) => (ferieuttak ? ferieuttak.id !== f.id : true))\n                                    .map((f) => ({ from: f.fom, to: f.tom })),\n                                validate: (value) =>\n                                    dateRangeValidation.validateFromDate(\n                                        ISOStringToDate(value),\n                                        minDate,\n                                        maxDate,\n                                        formik.values.tom\n                                    ),\n                                onChange: () => {\n                                    setTimeout(() => {\n                                        formik.validateField(FerieuttakFormFields.tom);\n                                    });\n                                },\n                            }}\n                            toDatepickerProps={{\n                                label: formLabels.toDate,\n                                name: FerieuttakFormFields.tom,\n                                fullscreenOverlay: true,\n                                minDate: minDate || formik.values.fom,\n                                maxDate,\n                                validate: (value) =>\n                                    dateRangeValidation.validateToDate(\n                                        ISOStringToDate(value),\n                                        minDate,\n                                        maxDate,\n                                        formik.values.fom\n                                    ),\n                                onChange: () => {\n                                    setTimeout(() => {\n                                        formik.validateField(FerieuttakFormFields.fom);\n                                    });\n                                },\n                            }}\n                        />\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels } from '../../../../typed-formik-form';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        alleFerieuttak={allItems}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\nimport { Ferieuttak } from './ferieuttak-example';\n\nexport enum FormFields {\n    'nameGroup' = 'nameGroup',\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak',\n    'letters' = 'letters',\n}\n\nexport interface CompletedFormValues {\n    [FormFields.nameGroup]: string;\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: string;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: string;\n    [FormFields.daterange_to]?: string;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: Ferieuttak[];\n    [FormFields.letters]?: string;\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport {\n    FormikDateIntervalPicker,\n    FormikFileInput,\n    FormikInput,\n    FormikInputGroup,\n    ISOStringToDate,\n} from '../../../../typed-formik-form';\nimport FormikDateRangePicker from '../../../../typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker';\nimport FormikTimeInput from '../../../../typed-formik-form/components/formik-time-input/FormikTimeInput';\nimport { getTypedFormComponents } from '../../../../typed-formik-form/components/getTypedFormComponents';\nimport UnansweredQuestionsInfo from '../../../../typed-formik-form/components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo';\nimport Question from '../../../components/question/Question';\nimport Tiles from '../../../components/tiles/Tiles';\nimport {\n    isIntlFieldValidationErrorType,\n    renderIntlFieldValidationError,\n} from '../../../modules/validation/fieldValidationRenderUtils';\nimport {\n    validateRequiredField,\n    validateRequiredList,\n    validateYesOrNoIsAnswered,\n} from '../../../validation/fieldValidations';\nimport FerieuttakListAndDialog from '../ferieuttak-example/FerieuttakListAndDialog';\nimport { FormFields, FormValues } from '../types';\n\nconst Form = getTypedFormComponents<FormFields, FormValues>();\nconst fullForm = false;\n\nconst TypedFormExample = () => {\n    const intl = useIntl();\n    const { values } = useFormikContext<FormValues>();\n    const { setFieldValue } = useFormikContext<FormValues>();\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            includeButtons={true}\n            noButtonsContentRenderer={() => (\n                <UnansweredQuestionsInfo>Du har ubesvarte spørsmål</UnansweredQuestionsInfo>\n            )}\n            fieldErrorRenderer={(error) => {\n                if (isIntlFieldValidationErrorType(error)) {\n                    return renderIntlFieldValidationError(intl, error);\n                }\n                return error;\n            }}>\n            <h3>Noen skjemaelementer</h3>\n            {fullForm ? (\n                <>\n                    <Question>\n                        <Form.DatePicker\n                            name={FormFields.birthdate}\n                            label=\"Fødselsdato\"\n                            validate={validateRequiredField}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" useAlpha3Code={true} />\n                    </Question>\n                    <Question>\n                        <Form.InputGroup\n                            name={FormFields.birthCountry}\n                            legend=\"Dette er legend\"\n                            validate={validateRequiredField}>\n                            <FormikInput name=\"sdf\" label=\"sdfsdf\" />\n                            sdf\n                        </Form.InputGroup>\n                    </Question>\n                    <Question>\n                        <Tiles columns={2}>\n                            <Form.Input name={FormFields.firstname} label=\"Fornavn\" validate={validateRequiredField} />\n                            <Form.Input name={FormFields.lastname} label=\"Etternavn\" validate={validateRequiredField} />\n                        </Tiles>\n                    </Question>\n                    <Question>\n                        <Form.YesOrNoQuestion\n                            legend={'sdfjjsdfj'}\n                            name={FormFields.hasKids}\n                            validate={validateYesOrNoIsAnswered}\n                        />\n                    </Question>\n                    <Question>\n                        <div style={{ display: 'flex', flex: 'flex-start' }}>\n                            <FormikTimeInput name={FormFields.time} label=\"Tidspunkt\" />\n                        </div>\n                    </Question>\n                    <FormikInputGroup name={FormFields.nameGroup} legend=\"Test me\" validate={validateRequiredField}>\n                        Content in group\n                    </FormikInputGroup>\n                    <Question>\n                        <FormikDateIntervalPicker\n                            legend=\"Tidsrom\"\n                            fromDatepickerProps={{\n                                name: FormFields.daterange_from,\n                                label: 'Fra',\n                                maxDate: ISOStringToDate(values.daterange_to),\n                                validate: validateRequiredField,\n                            }}\n                            toDatepickerProps={{\n                                name: FormFields.daterange_to,\n                                label: 'Til',\n                                minDate: ISOStringToDate(values.daterange_from),\n                                validate: validateRequiredField,\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikDateRangePicker\n                            legend=\"Tidsrom - kopi\"\n                            disableWeekend={true}\n                            minDate={dayjs().subtract(4, 'month').toDate()}\n                            maxDate={dayjs().add(4, 'month').toDate()}\n                            fromInputProps={{\n                                name: FormFields.daterange_from,\n                                label: 'Fra',\n                            }}\n                            toInputProps={{\n                                name: FormFields.daterange_to,\n                                label: 'Til',\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FerieuttakListAndDialog\n                            name={FormFields.ferieuttak}\n                            labels={{\n                                addLabel: 'Legg til',\n                                modalTitle: 'Ferieuttak',\n                                listTitle: 'Ferieuttak',\n                            }}\n                            minDate={dayjs().subtract(1, 'year').toDate()}\n                            maxDate={dayjs().add(1, 'year').toDate()}\n                            validate={validateRequiredList}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikFileInput\n                            name={FormFields.files}\n                            label=\"Legg til filer\"\n                            acceptedExtensions={'tsx'}\n                            onFilesSelect={() => null}\n                        />\n                    </Question>\n                </>\n            ) : (\n                <>\n                    <Question>\n                        <FormikInput\n                            suffix=\"timer i snitt per uke\"\n                            label=\"Et tall\"\n                            name={FormFields.firstname}\n                            bredde=\"fullbredde\"\n                            description={\n                                'Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quaerat sunt vel unde, iste nostrum labore, modi explicabo repellat laboriosam eos laudantium obcaecati assumenda commodi porro ex asperiores omnis? Nesciunt, ipsa.'\n                            }\n                            validate={validateRequiredField}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikInput type=\"tel\" label=\"Et tall\" name={'number'} />\n                    </Question>\n                    <Question>\n                        <Form.RadioGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            radios={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={validateRequiredField}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" />\n                    </Question>\n                    <Knapp\n                        htmlType=\"button\"\n                        onClick={() => {\n                            setFieldValue(FormFields.birthdate, '2000-10-2');\n                        }}>\n                        Sett ugyldig dato\n                    </Knapp>\n                    <FormikInputGroup name={FormFields.nameGroup} legend=\"Test me\" validate={validateRequiredField}>\n                        Content in group\n                    </FormikInputGroup>\n                </>\n            )}\n        </Form.Form>\n    );\n};\n\nexport default TypedFormExample;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport TypedFormExample from './typed-form-example/TypedFormExample';\nimport { FormValues } from './types';\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            id: '1',\n            fom: new Date(),\n            tom: dayjs().add(1, 'month').toDate(),\n            land: [],\n        },\n        {\n            id: '2',\n            fom: dayjs().add(1, 'month').toDate(),\n            tom: dayjs().add(2, 'month').toDate(),\n            land: [],\n        },\n    ],\n};\n\nconst FormikExample = () => {\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>TypedFormExample</h2>\n                Siden setter opp TypedFormikWrapper og setter type med generics. Se <code>TypedFormExample</code>. En\n                kan også bruke <code>getTypedFormComponents</code>-util for å få ut alle skjemakomponentene typed\n                direkte. Se <code>TypedFormExample</code>.\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={() => (\n                    <Panel>\n                        <TypedFormExample />\n                    </Panel>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { Ingress } from 'nav-frontend-typografi';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"@navikt/sif-common-formik\">\n            <h2>Typed formik wrapper for nav-frontend-skjema</h2>\n            <Ingress>\n                Sett av skjema-komponenter laget for team brukerdialog i sykdom-i-familien. Komponentene gjør det\n                enklere og raskere å sette opp skjemaløsninger hvor en bruker typescript, formik of nav-frontend-skjema,\n                og som sørger for at oppførsel og utéendet blir likt på tvers av brukerdialogene.\n            </Ingress>\n            <h3>Kort hvordan det virker</h3>\n            <ol>\n                <li>\n                    Definer alle felter i skjemaet som enums - <code>FieldNames</code>\n                </li>\n                <li>\n                    Definer et interface for skjemaet: <code>FormValues</code>\n                </li>\n            </ol>\n            <p> ... se kode for konkret eksempel</p>\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'formik-example',\n        title: 'TypedFormExample',\n        renderContent: () => <FormikExample />,\n    },\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = () => {\n    const {\n        location: { pathname },\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent: React.FunctionComponent<Props> = ({ history }) => {\n    const {\n        location: { pathname },\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <nav className=\"asideContent\">\n                <LeftMenu />\n            </nav>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\nconst DevPage = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel tag=\"h1\">sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <BrowserRouter>\n                    <DevContent />\n                </BrowserRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import React from 'react';\nimport '@formatjs/intl-pluralrules/locale-data/en';\nimport '@formatjs/intl-pluralrules/locale-data/nb';\nimport '@formatjs/intl-pluralrules/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\n\nconst SkjemagruppeQuestion: React.FunctionComponent<SkjemaGruppeProps> = ({\n    legend,\n    feil,\n    tag,\n    children,\n    className,\n}) => (\n    <SkjemaGruppe\n        className={`${className ? className : ''} singleInputWrapper`}\n        tag={tag ? tag : legend ? 'fieldset' : 'div'}\n        feil={feil}\n        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}>\n        {children}\n    </SkjemaGruppe>\n);\n\nexport default SkjemagruppeQuestion;\n","import React from 'react';\nimport { DayPickerProps } from 'react-day-picker';\nimport { useIntl } from 'react-intl';\nimport { Field, FieldProps } from 'formik';\nimport { CalendarPlacement, Datepicker, DatepickerChange } from 'nav-datovelger';\nimport useMedia from 'use-media';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { DateRange, FormikValidateFunction, NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport { validateDateString } from './validateFormikDatepickerDate';\nimport './datepicker.less';\nimport { validateAll } from '../../utils/validateAll';\n\nexport interface DatepickerLimitiations {\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDateRanges?: DateRange[];\n    disableWeekend?: boolean;\n}\n\nexport interface DatePickerBaseProps<FieldName> {\n    name: FieldName;\n    label: string;\n    disabled?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    inputTitle?: string;\n    placeholder?: string;\n    dayPickerProps?: DayPickerProps;\n    invalidFormatErrorKey?: string;\n    disableFormatValidation?: boolean;\n    locale?: 'nb' | 'nn' | 'en';\n    onChange?: (date: string) => void;\n    validate?: FormikValidateFunction<string | undefined>;\n}\nexport interface DatePickerPresentationProps {\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n}\ninterface OwnProps<FieldName> extends DatePickerBaseProps<FieldName> {\n    id?: string;\n    description?: React.ReactNode;\n}\n\nexport type FormikDatepickerProps<FieldName> = OwnProps<FieldName> &\n    Omit<TypedFormInputCommonProps, 'validate'> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nconst getLocaleToUse = (locale: string): 'nb' | 'nn' | 'en' | undefined => {\n    switch (locale) {\n        case 'nb':\n            return 'nb';\n        case 'nn':\n            return 'nn';\n        case 'en':\n            return 'en';\n        default:\n            return undefined;\n    }\n};\n\nfunction FormikDatepicker<FieldName>({\n    validate,\n    label,\n    name,\n    id,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    inputTitle,\n    onChange,\n    description,\n    disableFormatValidation = false,\n    invalidFormatErrorKey = 'common.fieldvalidation.dato.ugyldigFormat',\n    placeholder,\n    locale,\n    ...restProps\n}: FormikDatepickerProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMedia({ minWidth: 736 });\n    const elementId = id || guid();\n    const position: CalendarPlacement | undefined =\n        fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullscreen' : undefined;\n    const inputName = (name || '') as string;\n    const intl = useIntl();\n\n    const validations = disableFormatValidation ? [] : [(value) => validateDateString(value, invalidFormatErrorKey)];\n    if (validate) {\n        validations.push(validate);\n    }\n\n    return (\n        <Field validate={validateAll(validations)} name={name}>\n            {({ field, form }: FieldProps<string>) => {\n                const isInvalid = (feil || getFeilPropForFormikInput({ field, form, context, feil })) !== undefined;\n                const handleOnDatepickerChange: DatepickerChange = (dateString) => {\n                    if (field.value !== dateString) {\n                        form.setFieldValue(field.name, dateString);\n                        if (onChange) {\n                            onChange(dateString);\n                        }\n                        if (context) {\n                            context.onAfterFieldValueSet();\n                        }\n                    }\n                };\n\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={elementId}>{label}</Label>\n                        {description && <div className={'skjemaelement__description'}>{description}</div>}\n                        <Datepicker\n                            inputId={elementId}\n                            locale={getLocaleToUse(locale || intl.locale)}\n                            {...restProps}\n                            inputProps={{ name: inputName, placeholder, 'aria-invalid': isInvalid, title: inputTitle }}\n                            value={field.value}\n                            limitations={datepickerUtils.parseDateLimitations({\n                                minDate,\n                                maxDate,\n                                disableWeekend,\n                                disabledDateRanges,\n                            })}\n                            showYearSelector={showYearSelector}\n                            calendarSettings={{\n                                position,\n                            }}\n                            onChange={handleOnDatepickerChange}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","import { isISODateString } from 'nav-datovelger';\nimport { FieldValidationResult } from '../../types/fieldValidation';\n\nexport const validateDateString = (dateString = '', errorIntlKey: string): FieldValidationResult => {\n    if (dateString !== undefined && dateString !== '' && isISODateString(dateString) === false) {\n        return {\n            key: errorIntlKey,\n            values: { dateString },\n        };\n    }\n    return undefined;\n};\n","import dayjs from 'dayjs';\nimport { DatepickerLimitations, DatepickerDateRange, isISODateString } from 'nav-datovelger';\nimport { DatepickerLimitiations } from './FormikDatepicker';\n\nconst isoStringFormat = 'YYYY-MM-DD';\n\nexport const dateToISOString = (date?: Date) => (date ? dayjs(date).format(isoStringFormat) : '');\nexport const ISOStringToDate = (dateString = ''): Date | undefined => getDateFromDateString(dateString);\n\nconst parseDateLimitations = ({\n    minDate,\n    maxDate,\n    disabledDateRanges = [],\n    disableWeekend,\n}: DatepickerLimitiations): DatepickerLimitations => {\n    const invalidDateRanges: DatepickerDateRange[] = disabledDateRanges.map((d) => ({\n        from: dateToISOString(d.from),\n        to: dateToISOString(d.to),\n    }));\n    return {\n        minDate: minDate ? dateToISOString(minDate) : undefined,\n        maxDate: maxDate ? dateToISOString(maxDate) : undefined,\n        weekendsNotSelectable: disableWeekend,\n        invalidDateRanges,\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (isISODateString(value) === false) {\n            return value;\n        }\n        if (dayjs(value, isoStringFormat, true).isValid()) {\n            date = dayjs(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string | undefined): Date | undefined => {\n    if (dateString === undefined) {\n        return undefined;\n    }\n    if (isISODateString(dateString)) {\n        return new Date(dateString);\n    }\n    return undefined;\n};\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations,\n};\n\nexport default datepickerUtils;\n","import React from 'react';\nimport { Formik, FormikProps } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\nfunction TypedFormikWrapper<FormValues>(props: TypedFormikWrapperProps<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikRadioPanelGroup<FieldName>({\n    name,\n    validate,\n    radios,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt, value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        radios={radios.map((rb) => {\n                            return {\n                                name: `${name}`,\n                                autoComplete: 'off',\n                                'aria-invalid': undefined,\n                                ...rb,\n                            };\n                        })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined) => void;\n\ninterface TimeInputProps {\n    time?: Time | Partial<Time> | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    onChange: TimeInputChangeFunc;\n    layout?: 'normal' | 'compact';\n}\n\nconst bem = bemUtils('timeInput');\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    if ((time.hours === undefined || isNaN(time.hours)) && (time.minutes === undefined || isNaN(time.minutes))) {\n        onChange(undefined);\n    } else {\n        onChange(time);\n    }\n};\n\nconst getNewTime = (\n    stateTime: Partial<Time> | undefined = {},\n    values: { hours?: string; minutes?: string }\n): Partial<Time> => {\n    if (values.hours !== undefined) {\n        const hours = parseInt(values.hours, 10);\n        if (!isNaN(hours)) {\n            return {\n                ...stateTime,\n                hours,\n            };\n        }\n        return stateTime.minutes ? { ...stateTime, hours: undefined } : { hours: undefined };\n    }\n    if (values.minutes !== undefined) {\n        const minutes = parseInt(values.minutes, 10);\n        if (!isNaN(minutes)) {\n            return {\n                ...stateTime,\n                minutes,\n            };\n        }\n        return stateTime.hours ? { ...stateTime, minutes: undefined } : { minutes: undefined };\n    }\n\n    return stateTime;\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    onChange,\n    layout = 'compact',\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const hours =\n        !stateTime || stateTime.hours === undefined || isNaN(stateTime.hours)\n            ? ''\n            : Math.min(stateTime.hours, maxHours);\n    const minutes =\n        !stateTime || stateTime.minutes === undefined || isNaN(stateTime.minutes)\n            ? ''\n            : Math.min(stateTime.minutes, maxMinutes);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(layout))}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"number\"\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={hours}\n                        autoComplete=\"off\"\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { hours: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"number\"\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={minutes}\n                        autoComplete=\"off\"\n                        onBlur={(evt: React.FocusEvent<HTMLInputElement>) => {\n                            if (evt.target.value === '' || evt.target.value === '0') {\n                                const newTime = {\n                                    ...stateTime,\n                                    minutes: stateTime && stateTime.hours !== undefined ? 0 : undefined,\n                                };\n                                setStateTime(newTime);\n                                handleTimeChange(newTime, onChange);\n                            }\n                        }}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { minutes: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps, Label } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\n\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput from './TimeInput';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n}\n\nexport type FormikTimeInputProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikTimeInput<FieldName>({ label, name, validate, feil, ...restProps }: FormikTimeInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>{label}</Label>\n\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow',\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n}\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport type CancelButtonTypes = 'standard' | 'hoved' | 'fare' | 'flat';\n\nexport type FormikValidateFunction<ValueType = any> = (value: ValueType) => any;\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputCommonProps<ValueType = any> {\n    validate?: FormikValidateFunction<ValueType>;\n}\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCheckbox<FieldName>({\n    name,\n    validate,\n    afterOnChange,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        autoComplete=\"off\"\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return fieldValues.includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value),\n                            autoComplete: 'off',\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName> = OwnProps<FieldName> &\n    Omit<TypedFormInputCommonProps, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName>({\n    children,\n    name,\n    feil,\n    validate,\n    inputProps,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        inputProps={{ ...inputProps, autoComplete: 'off' }}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    return countries.getName(alphaCode, locale);\n};\n\nexport const getCountries = () => countries;\n","import React from 'react';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName> {\n    legend?: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName>;\n    toDatepickerProps: FormikDatepickerProps<FieldName>;\n    description?: React.ReactNode;\n}\n\nfunction FormikDateIntervalPicker<FieldName>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    description,\n}: DateIntervalPickerProps<FieldName>) {\n    return (\n        <SkjemaGruppe\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName> {...toDatepickerProps} />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps, Label } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport { guid } from 'nav-frontend-js-utils';\nimport './formikInput.less';\nimport bemUtils from '../../utils/bemUtils';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n    suffix?: string;\n}\n\nexport type FormikInputProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nconst bem = bemUtils('formikInput');\n\nfunction FormikInput<FieldName>({\n    name,\n    feil,\n    id = guid(),\n    suffix,\n    label,\n    description,\n    validate,\n    autoComplete,\n    ...restProps\n}: FormikInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                if (suffix === undefined) {\n                    return (\n                        <Input\n                            {...restProps}\n                            {...field}\n                            id={id}\n                            description={description}\n                            label={label}\n                            autoComplete={autoComplete || 'off'}\n                            feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            value={field.value === undefined ? '' : field.value}\n                        />\n                    );\n                }\n                return (\n                    <div\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional('withSuffix', suffix !== undefined),\n                            bem.modifierConditional('fullbredde', restProps.bredde === 'fullbredde')\n                        )}>\n                        <Label htmlFor={id}>{label}</Label>\n                        {description && <div className=\"skjemaelement__description\">{description}</div>}\n                        <div className={bem.element('inputWrapper')}>\n                            <Input\n                                {...restProps}\n                                {...field}\n                                id={id}\n                                autoComplete={autoComplete || 'off'}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                                value={field.value === undefined ? '' : field.value}\n                            />\n                            {suffix && (\n                                <span className={bem.element('suffix')} aria-hidden={true}>\n                                    {suffix}\n                                </span>\n                            )}\n                        </div>\n                    </div>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element, Feilmelding } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport './formikInputGroup.less';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikInputGroup<FieldName>({\n    legend,\n    name,\n    feil,\n    children,\n    validate,\n    className,\n    ...restProps\n}: FormikInputGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                const errorMsg = getFeilPropForFormikInput({ field, form, context, feil });\n                const isRenderableErrorMsgType = ['string', 'object'].includes(typeof errorMsg);\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        className={`${className ? className : ''} singleInputWrapper`}>\n                        {children}\n\n                        {/** Må sette inn denne selv pga feil på SkjemaGruppe påvirker styling av alle elementer i gruppen*/}\n                        <div aria-live=\"polite\">\n                            <div tabIndex={-1} id={field.name} className=\"focusable-feilmelding\">\n                                {isRenderableErrorMsgType && <Feilmelding>{errorMsg}</Feilmelding>}\n                            </div>\n                        </div>\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Radio, RadioGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n}\n\nexport type FormikRadioGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikRadioGroup<FieldName>({ name, validate, radios, feil, ...restProps }: FormikRadioGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioGruppe {...restProps} feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {radios.map((rb, idx) => {\n                            const isSelected = field.value === rb.value;\n                            return (\n                                <Radio\n                                    key={idx}\n                                    {...rb}\n                                    name={(name as any) as string}\n                                    checked={isSelected}\n                                    autoComplete=\"off\"\n                                    onChange={(evt) => {\n                                        form.setFieldValue(field.name, evt.target.value);\n                                        if (context) {\n                                            context.onAfterFieldValueSet();\n                                        }\n                                    }}\n                                />\n                            );\n                        })}\n                    </RadioGruppe>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikSelect<FieldName>({ name, children, validate, feil, ...restProps }: FormikSelectProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        autoComplete=\"off\"\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikTextarea<FieldName>({ name, validate, feil, ...restProps }: FormikTextareaProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        autoComplete=\"off\"\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","import React from 'react';\nimport { TypedFormInputCommonProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from '../formik-radio-panel-group/FormikRadioPanelGroup';\n\nexport interface FormikYesOrNoQuestionProps<FieldName> extends Omit<FormikRadioPanelGroupProps<FieldName>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    useTwoColumns?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName>({\n    name,\n    includeDoNotKnowOption,\n    labels,\n    useTwoColumns = true,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName> & TypedFormInputCommonProps) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : []),\n            ]}\n            {...restProps}\n            name={name}\n            useTwoColumns={includeDoNotKnowOption ? false : useTwoColumns}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","import React from 'react';\nimport Alertstripe from 'nav-frontend-alertstriper';\nimport './unansweredQuestionsInfo.less';\n\nconst UnansweredQuestionsInfo: React.FunctionComponent = ({ children }) => (\n    <div className=\"unansweredQuestionsInfo\">\n        <Alertstripe type=\"info\" form=\"inline\">\n            {children}\n        </Alertstripe>\n    </div>\n);\n\nexport default UnansweredQuestionsInfo;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps,\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps,\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, { FormikCountrySelectProps } from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps,\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDateRangePicker, { FormikDateRangePickerProps } from './formik-date-range-picker/FormikDateRangePicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikNumberInput, { FormikNumberInputProps } from './formik-number-input/FormikNumberInput';\nimport FormikRadioGroup, { FormikRadioGroupProps } from './formik-radio-group/FormikRadioGroup';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikTimeInput, { FormikTimeInputProps } from './formik-time-input/FormikTimeInput';\nimport FormikYesOrNoQuestion, { FormikYesOrNoQuestionProps } from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, { TypedFormikWrapperProps } from './typed-formik-wrapper/TypedFormikWrapper';\nimport '../styles/nav-frontend-skjema-extension.less';\n\nexport function getTypedFormComponents<FieldNames, FormValues>() {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldNames>) => <FormikCheckbox<FieldNames> {...props} />,\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldNames>) => (\n            <FormikCheckboxPanelGroup<FieldNames> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldNames>) => (\n            <FormikConfirmationCheckboxPanel<FieldNames> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldNames>) => <FormikCountrySelect<FieldNames> {...props} />,\n        DatePicker: (props: FormikDatepickerProps<FieldNames>) => <FormikDatepicker<FieldNames> {...props} />,\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldNames>) => (\n            <FormikDateIntervalPicker<FieldNames> {...props} />\n        ),\n        DateRangePicker: (props: FormikDateRangePickerProps<FieldNames>) => (\n            <FormikDateRangePicker<FieldNames> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldNames>) => <FormikFileInput<FieldNames> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldNames>) => <FormikInput<FieldNames> {...props} />,\n        NumberInput: (props: FormikNumberInputProps<FieldNames>) => <FormikNumberInput<FieldNames> {...props} />,\n        InputGroup: (props: FormikInputGroupProps<FieldNames>) => <FormikInputGroup<FieldNames> {...props} />,\n        RadioGroup: (props: FormikRadioGroupProps<FieldNames>) => <FormikRadioGroup<FieldNames> {...props} />,\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldNames>) => (\n            <FormikRadioPanelGroup<FieldNames> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldNames>) => <FormikSelect<FieldNames> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldNames>) => <FormikTextarea<FieldNames> {...props} />,\n        TimeInput: (props: FormikTimeInputProps<FieldNames>) => <FormikTimeInput<FieldNames> {...props} />,\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldNames>) => (\n            <FormikYesOrNoQuestion<FieldNames> {...props} />\n        ),\n    };\n}\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        const { current } = summaryEl;\n        if (current !== null) {\n            current.focus();\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            innerRef={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllErrors } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const allErrors = !formik.isValid && getAllErrors(formik);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = allErrors\n            ? Object.keys(allErrors).map((key) => {\n                  const error = allErrors[key];\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorRenderer ? context.fieldErrorRenderer(error) : error,\n                      skjemaelementId: key,\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import React from 'react';\n\nfunction UploadSvg(props: any) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <SkjemagruppeQuestion\n                feil={feil}\n                className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\" // eslint-disable-line\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </SkjemagruppeQuestion>\n        );\n    }\n}\n","import React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick,\n}: FormikFileInputProps<FieldName> & TypedFormInputCommonProps) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (\n    onluEuAndEftaCountries: boolean,\n    locale: string,\n    useAlpha3Code = true\n): React.ReactNode[] => {\n    const lang = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n\n    const names: [string, any][] = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[0], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option\n                key={countryOptionValue[0]}\n                value={useAlpha3Code ? countries.alpha2ToAlpha3(countryOptionValue[0]) : countryOptionValue[0]}>\n                {countryOptionValue[1]}\n            </option>\n        ));\n};\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale,\n                this.props.useAlpha3Code\n            ),\n        };\n    }\n\n    getCountryOptions(locale: string): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, useAlpha3Code, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)} autoComplete=\"off\">\n                <option value=\"\" />\n                {this.getCountryOptions(locale || 'nb')}\n            </Select>\n        );\n    }\n}\n\nexport default CountrySelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCountrySelect<FieldName>({\n    name,\n    feil,\n    validate,\n    label,\n    useAlpha3Code = true,\n    showOnlyEuAndEftaCountries,\n}: FormikCountrySelectProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        {...field}\n                        label={label}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                        useAlpha3Code={useAlpha3Code}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { validateAll } from '../../utils/validateAll';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport { validateFormikNumberInputValue } from './validateFormikNumberInputValue';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'type' | 'pattern'> {\n    name: FieldName;\n    disableNumberValidation?: boolean;\n    invalidNumberErrorKey?: string;\n    integerValue?: boolean;\n}\n\nexport type FormikNumberInputProps<FieldName> = OwnProps<FieldName> & Omit<TypedFormInputCommonProps, 'inputMode'>;\n\nfunction FormikNumberInput<FieldName>({\n    name,\n    feil,\n    validate,\n    autoComplete,\n    bredde = 'S',\n    disableNumberValidation,\n    invalidNumberErrorKey = 'common.fieldvalidation.ugyldigTall',\n    integerValue = false,\n    ...restProps\n}: FormikNumberInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    const validations = disableNumberValidation\n        ? []\n        : [(value) => validateFormikNumberInputValue(value, invalidNumberErrorKey)];\n    if (validate) {\n        validations.push(validate);\n    }\n\n    return (\n        <Field validate={validateAll(validations)} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Input\n                        {...restProps}\n                        {...field}\n                        type=\"text\"\n                        bredde={bredde}\n                        autoComplete={autoComplete || 'off'}\n                        inputMode={integerValue ? 'numeric' : 'text'}\n                        pattern={integerValue ? '[0-9]*' : undefined}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikNumberInput;\n","import { FieldValidationResult } from '../../types/fieldValidation';\n\nexport const validateFormikNumberInputValue = (numString: string, errorIntlKey: string): FieldValidationResult => {\n    const value = (numString || '').replace(/\\,/g, '.');\n    if (isNaN(Number(value))) {\n        return {\n            key: errorIntlKey,\n            values: { numString },\n        };\n    }\n    return undefined;\n};\n","import { FormikValidateFunction } from '../types';\nimport { FieldValidationArray, FieldValidationResult } from '../types/fieldValidation';\n\nexport const validateAll: FieldValidationArray = (validations: FormikValidateFunction[]) => (\n    value: any\n): FieldValidationResult => {\n    let result: FieldValidationResult;\n    validations.some((validate) => {\n        const r = validate(value);\n        if (r) {\n            result = r;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport minMax from 'dayjs/plugin/minMax';\nimport { DateRange } from '../../types';\nimport { DatepickerLimitiations } from '../formik-datepicker/FormikDatepicker';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(minMax);\n\nconst sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nconst sortDateRangeByToDate = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.to).isSameOrBefore(d2.to)) {\n        return -1;\n    }\n    return 1;\n};\nexport const getRangesStartingAfterDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.from).isAfter(date, 'day'));\n};\n\nexport const getRangesEndingBeforeDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.to).isBefore(date, 'day'));\n};\n\nexport const findClosestDateAfterDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isAfter(fromDate, 'day'));\n    return dayjss.length > 0 ? dayjs.min(dayjss).toDate() : undefined;\n};\n\nexport const findClosestDateBeforeDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const findClosestDateBeforeOrEqualDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isSameOrBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const getClosestDateRangeBeforeDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesBeforeDate = getRangesEndingBeforeDate(date, ranges).sort(sortDateRangeByToDate).reverse();\n    return rangesBeforeDate.length === 0 ? undefined : rangesBeforeDate[0];\n};\n\nexport const getClosestDateRangeAfterDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesAfterDate = getRangesStartingAfterDate(date, ranges).sort(sortDateRange);\n    return rangesAfterDate.length === 0 ? undefined : rangesAfterDate[0];\n};\n\nconst getFollowingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.from : dayjs(dateRange.from).subtract(1, 'day').toDate();\n};\n\nexport const getMaxDateForRangeStart = ({\n    fromDate,\n    toDate,\n    maxDate,\n    otherRanges: dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    otherRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!fromDate) {\n        return toDate || maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(fromDate, dateRanges);\n    const followingRangeeDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(toDate ? [toDate] : []),\n        ...(maxDate ? [maxDate] : []),\n        ...(followingRangeeDate ? [followingRangeeDate] : []),\n    ];\n    return findClosestDateAfterDate(fromDate, dates);\n};\nexport const getMaxDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    maxDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(baseDate, dateRanges);\n    const followingDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(maxDate ? [maxDate] : []), ...(followingDate ? [followingDate] : [])];\n    return findClosestDateAfterDate(baseDate, dates);\n};\n\nconst getPreceedingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.to : dayjs(dateRange.to).add(1, 'day').toDate();\n};\n\nexport const getMinDateForRangeStart = ({\n    toDate,\n    minDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!toDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(toDate, dateRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(minDate ? [minDate] : []), ...(preceedingDate ? [preceedingDate] : [])];\n    return findClosestDateBeforeDate(toDate, dates);\n};\n\nexport const getMinDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    minDate,\n    dateRanges: otherRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(baseDate, otherRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(fromDate ? [fromDate] : []),\n        ...(minDate ? [minDate] : []),\n        ...(preceedingDate ? [preceedingDate] : []),\n    ];\n    return findClosestDateBeforeOrEqualDate(baseDate, dates);\n};\n\ninterface DateRangePickerLimitations {\n    fromDateLimitations: DatepickerLimitiations;\n    toDateLimitations: DatepickerLimitiations;\n}\n\nexport const getDateRangePickerLimitations = (props: {\n    /** Selected from date */\n    fromDate?: Date;\n    /** Selected to date */\n    toDate?: Date;\n    /** Min allowed date */\n    minDate?: Date;\n    /** Max allowed date */\n    maxDate?: Date;\n    /** Other date ranges which become disabled in the datepicker */\n    dateRanges?: DateRange[];\n    /** Disallow selection of saturday and sunday */\n    disableWeekend?: boolean;\n    /** Allow one dateRange to start on the same date another ends */\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): DateRangePickerLimitations => {\n    return {\n        fromDateLimitations: {\n            minDate: getMinDateForRangeStart(props),\n            maxDate: getMaxDateForRangeStart(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n        toDateLimitations: {\n            minDate: getMinDateForRangeEnd(props),\n            maxDate: getMaxDateForRangeEnd(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n    };\n};\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { ISOStringToDate } from '../formik-datepicker/datepickerUtils';\nimport FormikDatepicker, {\n    DatePickerBaseProps,\n    DatepickerLimitiations,\n    DatePickerPresentationProps,\n} from '../formik-datepicker/FormikDatepicker';\nimport { getDateRangePickerLimitations } from './dateRangePickerUtils';\nimport './dateRangePicker.less';\n\ninterface OwnProps<FieldName> {\n    legend?: string;\n    description?: React.ReactNode;\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    locale?: string;\n    allowRangesToStartAndStopOnSameDate?: boolean;\n    fromInputProps: DatePickerBaseProps<FieldName>;\n    toInputProps: DatePickerBaseProps<FieldName>;\n}\n\nexport type FormikDateRangePickerProps<FieldName> = OwnProps<FieldName> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nfunction FormikDateRangePicker<FieldName>({\n    legend,\n    fromInputProps,\n    toInputProps,\n    description,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    showYearSelector,\n    fullScreenOnMobile,\n    fullscreenOverlay,\n    allowRangesToStartAndStopOnSameDate,\n    locale,\n}: FormikDateRangePickerProps<FieldName>) {\n    const { values } = useFormikContext<any>();\n    const fromDate = ISOStringToDate(values[fromInputProps.name]);\n    const toDate = ISOStringToDate(values[toInputProps.name]);\n    const { fromDateLimitations, toDateLimitations } = getDateRangePickerLimitations({\n        fromDate,\n        toDate,\n        minDate,\n        maxDate,\n        dateRanges: disabledDateRanges,\n        disableWeekend,\n        allowRangesToStartAndStopOnSameDate,\n    });\n    return (\n        <SkjemaGruppe\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateRangePicker\">\n            <div className=\"dateRangePicker__flexContainer\">\n                <FormikDatepicker<FieldName>\n                    {...fromInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...fromDateLimitations}\n                    {...locale}\n                />\n                <FormikDatepicker<FieldName>\n                    {...toInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...toDateLimitations}\n                    {...locale}\n                />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateRangePicker;\n"],"sourceRoot":""}