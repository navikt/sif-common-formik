{"version":3,"sources":["typed-formik-form/components/formik-custom-input-wrapper/FormikCustomInputWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal/Modal.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","typed-formik-form/components/helpers/custom-input/CustomInput.tsx","dev/components/app-intl-provider/messages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","dev/validation/fødselsnummerValidator.ts","dev/components/question/Question.tsx","dev/components/tiles/Tiles.tsx","dev/modules/validation/fieldValidationRenderUtils.ts","dev/validation/fieldValidations.ts","dev/validation/hasValue.ts","dev/examples/formik-example/ferieuttak-example/FerieuttakForm.tsx","dev/examples/formik-example/ferieuttak-example/types.ts","dev/examples/formik-example/ferieuttak-example/FerieuttakList.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakListAndDialog.tsx","dev/examples/formik-example/types.ts","dev/examples/formik-example/typed-form-example/TypedFormExample.tsx","dev/examples/formik-example/FormikExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","typed-formik-form/index.ts","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/types/index.ts","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/utils/bemUtils.ts","typed-formik-form/components/helpers/label-with-info/LabelWithInfo.tsx"],"names":["bem","bemUtils","DialogFormWrapper","width","children","className","classNames","block","modifier","Modal","isOpen","onRequestClose","contentLabel","ModalFormAndList","items","listRenderer","formRenderer","labels","error","dialogWidth","onChange","React","useState","isVisible","modalState","setModalState","resetModal","selectedItem","undefined","modalTitle","onSubmit","values","id","filter","item","guid","onCancel","CustomInput","legend","listTitle","feil","tag","length","onEdit","onDelete","i","emptyListText","style","paddingBottom","marginTop","htmlType","onClick","addLabel","FormikModalFormAndList","name","sortFunc","onAfterChange","validate","context","useContext","TypedFormikFormContext","field","form","value","getAndRenderFieldErrorMessage","updatedValues","sort","setFieldValue","info","appMessages","nb","nn","AppIntlProvider","locale","onError","messages","NAVLogo","props","viewBox","fill","fillRule","d","cls","element","e","m","modifierConditional","condition","child","c","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","title","handleTimeChange","time","hours","isNaN","minutes","getNewTime","stateTime","parseInt","TimeInput","maxHours","maxMinutes","layout","setStateTime","Math","min","hoursLabelId","minutesLabelId","htmlFor","type","max","maxLength","autoComplete","evt","newTime","target","onBlur","FormikTimeInput","FødselsnummerValidationErrorReason","label","restProps","getFeilPropForFormikInput","LabelWithInfo","Question","marginBottom","Tiles","columns","map","renderIntlFieldValidationError","intl","formatMessage","key","parsedValues","Object","keys","forEach","valueOrFunc","renderIntlFieldValidationValues","require","FieldValidationErrors","hasValue","v","FerieuttakFormFields","fieldIsRequiredError","createFieldValidationError","påkrevd","validateRequiredField","validateRequiredList","defaultLabels","fromDate","toDate","intervalTitle","okButton","cancelButton","Form","getTypedFormComponents","FerieuttakForm","maxDate","minDate","ferieuttak","initialValues","fom","tom","useIntl","formLabels","FormikWrapper","formValues","Error","renderForm","formik","fieldErrorRenderer","commonFieldErrorRenderer","DateIntervalPicker","fromDatepickerProps","fullscreenOverlay","dateLimitations","minDato","maksDato","date","dateRangeValidation","validateFromDate","setTimeout","validateField","toDatepickerProps","validateToDate","FerieuttakList","getDateTitleString","uttak","prettifyDateExtended","getItemId","getItemTitle","labelRenderer","FerieuttakListAndDialog","FormFields","sortItemsByFom","TypedFormExample","submitButtonLabel","includeValidationSummary","isIntlFieldValidationErrorType","DatePicker","birthdate","CountrySelect","birthCountry","Input","firstname","lastname","YesOrNoQuestion","hasKids","display","flex","daterange_from","daterange_to","moment","subtract","add","files","acceptedExtensions","onFilesSelect","Date","FormikExample","TypedFormikWrapper","console","log","Intro","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","to","DevContent","routeConfig","find","f","getRouteConfig","maxWidth","DevPage","App","setAppElement","ReactDOM","render","document","getElementById","dateToISOFormattedDateString","utc","format","datepickerUtils","getDateStringFromValue","ISO_8601","isValid","getDateFromDateString","dateString","parseDateLimitations","helgedagerIkkeTillatt","ugyldigeTidsperioder","t","FormikDatepicker","showYearSelector","fullScreenOnMobile","isWide","useMedia","minWidth","elementId","plassering","inputName","input","placeholder","valgtDato","avgrensninger","visÅrVelger","kalender","FormikCheckbox","afterOnChange","checked","newValue","ButtonRow","align","knapp","index","createContext","TypedFormikForm","oldProps","currentProps","resetFormOnCancel","cancelButtonLabel","onValidSubmit","includeButtons","useFormikContext","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValidating","formSubmitCount","ref","useRef","useEffect","current","showErrors","noValidate","Provider","isValidationErrorsVisible","errors","getErrorsForField","createTypedFormikFormContext","FormikValidationErrorSummary","renderFormContent","setSubmitting","setTouched","FormikRadioPanelGroup","radios","useTwoColumns","rb","YesOrNo","isCheckboxChecked","fieldValues","includes","FormikCheckboxPanelGroup","checkboxes","cb","keyProp","el","push","FormikConfirmationCheckboxPanel","countries","getCountries","FormikDateIntervalPicker","getPatternForInputMode","inputMode","FormikInput","pattern","FormikInputGroup","FormikSelect","FormikTextarea","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","YES","NO","DO_NOT_KNOW","Checkbox","CheckboxPanelGroup","ConfirmationCheckbox","FileInput","InputGroup","RadioPanelGroup","Select","Textarea","ValidationErrorLink","href","stopPropagation","preventDefault","stopClickEvent","ValidationSummary","errorMessages","summaryEl","node","findDOMNode","focus","tittel","customFeilRender","elementById","skjemaelementId","elementByName","getElementsByName","feilmelding","allErrors","getAllErrors","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fileSelectHandler","bind","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","Array","from","this","dataTransfer","inputElement","which","click","multiple","inputId","role","tabIndex","onDragOver","onDrop","accept","FormikFileInput","arrayHelpers","elementName","getIn","formikStatus","status","stepSubmitCount","flattenFieldArrayErrors","isFieldArrayErrors","err","idx","fieldArrayKey","getErrorsFromFieldArrayErrors","errorNode","findErrorNodeInObject","flatError","flatten","split","unflatten","countryOptionsCache","getCountryOptions","updateCache","options","createCountryOptions","showOnlyEuAndEftaCountries","onluEuAndEftaCountries","localeToUse","entries","getNames","a","b","localeCompare","countryOptionValue","shouldFilter","filteredListEØSCountries","FormikCountrySelect"],"mappings":"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","file":"static/js/main.104671ab.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { TypedFormInputCommonProps } from '../../types';\nimport CustomInput from '../helpers/custom-input/CustomInput';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> {\n    name: FieldName;\n    label?: React.ReactNode;\n    children: React.ReactNode;\n}\n\nexport type FormikCustomInputWrapperProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCustomInputWrapper<FieldName>({\n    label,\n    name,\n    info,\n    validate,\n    children\n}: FormikCustomInputWrapperProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput\n                        legend={(label = <LabelWithInfo info={info}>{label}</LabelWithInfo>)}\n                        feil={context ? context.getAndRenderFieldErrorMessage(field, form) : undefined}>\n                        {children}\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCustomInputWrapper;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(width))}>{children}</div>\n);\n\nexport default DialogFormWrapper;\n","import * as React from 'react';\nimport { default as NFModal } from 'nav-frontend-modal';\nimport './modal.less';\n\nexport interface ModalProps {\n    className?: string;\n    isOpen: boolean;\n    onRequestClose: () => void;\n    contentLabel: string;\n}\n\nconst Modal: React.FunctionComponent<ModalProps> = ({ isOpen, onRequestClose, contentLabel, className, children }) => (\n    <NFModal\n        className={`modal ${className ? className : ''}`}\n        isOpen={isOpen}\n        contentLabel={contentLabel}\n        onRequestClose={onRequestClose}>\n        <article className=\"modal__content\">{children}</article>\n    </NFModal>\n);\n\nexport default Modal;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport CustomInput from '../../helpers/custom-input/CustomInput';\nimport DialogFormWrapper, {\n    DialogFormWrapperWidths\n} from '../dialog-form-wrapper/DialogFormWrapper';\nimport Modal from '../modal/Modal';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    onChange\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({ onSubmit: handleOnSubmit, onCancel: resetModal, item: modalState.selectedItem })}\n                </DialogFormWrapper>\n            </Modal>\n            <CustomInput legend={labels.listTitle} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                <div style={{ marginTop: '1rem' }}>\n                    <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })}>\n                        {labels.addLabel}\n                    </Knapp>\n                </div>\n            </CustomInput>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { FormikValidateFunction, NavFrontendSkjemaFeil } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType> extends ModalFormAndListProps<ItemType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    validate?: FormikValidateFunction;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    validate\n}: FormikModalFormAndListProps<FieldName, ItemType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","import React from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport LabelWithInfo from '../label-with-info/LabelWithInfo';\nimport './customInput.less';\n\ninterface Props extends SkjemaGruppeProps {\n    info?: React.ReactNode;\n}\n\nconst CustomInput: React.FunctionComponent<Props> = ({ legend, feil, info, tag, children, className }) => (\n    <SkjemaGruppe\n        className={`${className} singleInputWrapper`}\n        tag={tag ? tag : legend ? 'fieldset' : 'div'}\n        feil={feil}\n        legend={legend ? <LabelWithInfo info={info}>{legend}</LabelWithInfo> : undefined}>\n        {children}\n    </SkjemaGruppe>\n);\n\nexport default CustomInput;\n","export const appMessages = {\n    nb: {},\n    nn: {}\n};\n","import * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport '@formatjs/intl-pluralrules/dist/locale-data/en';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport { appMessages } from './messages';\n\nexport interface IntlProviderProps {\n    locale: string;\n}\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? appMessages.nb : appMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames\n});\n\nexport default bemUtils;\n","import * as React from 'react';\n\nimport bemHelper from '../../utils/bemUtils';\n\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined) => void;\n\ninterface TimeInputProps {\n    time?: Time | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    onChange: TimeInputChangeFunc;\n    layout?: 'normal' | 'compact';\n}\n\nconst bem = bemUtils('timeInput');\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    if ((time.hours === undefined || isNaN(time.hours)) && (time.minutes === undefined || isNaN(time.minutes))) {\n        onChange(undefined);\n    } else {\n        onChange(time);\n    }\n};\n\nconst getNewTime = (\n    stateTime: Partial<Time> | undefined = {},\n    values: { hours?: string; minutes?: string }\n): Partial<Time> => {\n    if (values.hours !== undefined) {\n        const hours = parseInt(values.hours, 10);\n        if (!isNaN(hours)) {\n            return {\n                ...stateTime,\n                hours\n            };\n        }\n        return stateTime.minutes ? { ...stateTime, hours: undefined } : { hours: undefined };\n    }\n    if (values.minutes !== undefined) {\n        const minutes = parseInt(values.minutes, 10);\n        if (!isNaN(minutes)) {\n            return {\n                ...stateTime,\n                minutes\n            };\n        }\n        return stateTime.hours ? { ...stateTime, minutes: undefined } : { minutes: undefined };\n    }\n\n    return stateTime;\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    onChange,\n    layout = 'compact'\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const hours =\n        !stateTime || stateTime.hours === undefined || isNaN(stateTime.hours)\n            ? ''\n            : Math.min(stateTime.hours, maxHours);\n    const minutes =\n        !stateTime || stateTime.minutes === undefined || isNaN(stateTime.minutes)\n            ? ''\n            : Math.min(stateTime.minutes, maxMinutes);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(layout))}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"number\"\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={hours}\n                        autoComplete=\"off\"\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { hours: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"number\"\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={minutes}\n                        autoComplete=\"off\"\n                        onBlur={(evt: React.FocusEvent<HTMLInputElement>) => {\n                            if (evt.target.value === '' || evt.target.value === '0') {\n                                const newTime = {\n                                    ...stateTime,\n                                    minutes: stateTime && stateTime.hours !== undefined ? 0 : undefined\n                                };\n                                setStateTime(newTime);\n                                handleTimeChange(newTime, onChange);\n                            }\n                        }}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { minutes: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps, Label } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport CustomInput from '../helpers/custom-input/CustomInput';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput from './TimeInput';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n}\n\nexport type FormikTimeInputProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikTimeInput<FieldName>({\n    label,\n    name,\n    validate,\n    info,\n    feil,\n    ...restProps\n}: FormikTimeInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>\n                            <LabelWithInfo info={info}>{label}</LabelWithInfo>\n                        </Label>\n\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                            }}\n                        />\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","const fnrvalidator = require('@navikt/fnrvalidator');\n\nexport enum FødselsnummerValidationErrorReason {\n    MustConsistOf11Digits = 'fnr must consist of 11 digits',\n    InvalidDate = 'invalid date',\n    ChecksumsDontMatch = \"checksums don't match\"\n}\n\ninterface FnrValidationResult {\n    reasons?: FødselsnummerValidationErrorReason[];\n    status: 'valid' | 'invalid';\n}\n\nexport const fødselsnummerIsValid = (value: string): [boolean, FødselsnummerValidationErrorReason[]] => {\n    const { status, reasons }: FnrValidationResult = fnrvalidator.fnr(value);\n    if (status === 'valid') {\n        return [true, []];\n    } else {\n        return [false, reasons!];\n    }\n};\n","import React from 'react';\n\ninterface Props {}\n\nconst Question: React.FunctionComponent<Props> = (props) => (\n    <div style={{ marginBottom: '2rem' }}>{props.children}</div>\n);\n\nexport default Question;\n","import * as React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\n\nconst Tiles: React.StatelessComponent<{ columns?: 1 | 2 | 3 | 'flex' }> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import { IntlShape } from 'react-intl';\nimport { FieldValidationResultValues, IntlFieldValidationError } from './types';\n\nexport const isIntlFieldValidationErrorType = (error: any): error is IntlFieldValidationError =>\n    typeof error === 'object' && error.key !== undefined;\n\nexport const renderIntlFieldValidationValues = (\n    intl: IntlShape,\n    values?: FieldValidationResultValues\n): { [key: string]: string } | undefined => {\n    if (values === undefined) {\n        return undefined;\n    }\n    const parsedValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc !== undefined) {\n            parsedValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return parsedValues;\n};\n\nexport const renderIntlFieldValidationError = (intl: IntlShape, error: IntlFieldValidationError): string => {\n    return intl.formatMessage({ id: error.key }, renderIntlFieldValidationValues(intl, error.values));\n};\n","import { YesOrNo } from '../../typed-formik-form';\nimport { FieldValidationResult } from '../modules/validation/types';\nimport { erGyldigNorskOrgnummer } from './erGyldigNorskOrgnummer';\nimport { fødselsnummerIsValid, FødselsnummerValidationErrorReason } from './fødselsnummerValidator';\nimport { hasValue } from './hasValue';\n\nexport enum FieldValidationErrors {\n    'påkrevd' = 'common.fieldvalidation.påkrevd',\n    'fødselsnummer_11siffer' = 'common.fieldvalidation.fødselsnummer.11siffer',\n    'fødselsnummer_ugyldig' = 'common.fieldvalidation.fødselsnummer.ugyldig',\n    'orgnum_ugyldig' = 'common.fieldvalidation.orgnum.ugyldig'\n}\n\nexport const fieldIsRequiredError = () => createFieldValidationError(FieldValidationErrors.påkrevd);\n\nexport const validateFødselsnummer = (v: string): FieldValidationResult => {\n    const [isValid, reasons] = fødselsnummerIsValid(v);\n    if (!isValid) {\n        if (reasons.includes(FødselsnummerValidationErrorReason.MustConsistOf11Digits)) {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_11siffer);\n        } else {\n            return createFieldValidationError(FieldValidationErrors.fødselsnummer_ugyldig);\n        }\n    }\n};\n\nexport const validateYesOrNoIsAnswered = (answer: YesOrNo): FieldValidationResult => {\n    if (answer === YesOrNo.UNANSWERED || answer === undefined) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredField = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateTruthyCheckbox = (value: any): FieldValidationResult => {\n    if (value !== true) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredList = (value: any): FieldValidationResult => {\n    if (!hasValue(value) || value?.length === 0) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const validateRequiredSelect = (value: any): FieldValidationResult => {\n    if (!hasValue(value)) {\n        return fieldIsRequiredError();\n    }\n    return undefined;\n};\n\nexport const createFieldValidationError = <T extends string>(\n    key: T | undefined,\n    values?: any\n): FieldValidationResult => {\n    return key\n        ? {\n              key,\n              values\n          }\n        : undefined;\n};\n\nexport const validateOrgNumber = (orgnum: string, isNorwegian: boolean): FieldValidationResult => {\n    if (isNorwegian) {\n        if (!erGyldigNorskOrgnummer(orgnum)) {\n            return { key: FieldValidationErrors.orgnum_ugyldig };\n        }\n        return undefined;\n    }\n    return validateRequiredField(orgnum);\n};\n","export const hasValue = (v: any) => v !== '' && v !== undefined && v !== null;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport {\n    commonFieldErrorRenderer\n} from '@navikt/sif-common-core/lib/utils/commonFieldErrorRenderer';\nimport dateRangeValidation from '@navikt/sif-common-core/lib/validation/dateRangeValidation';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { getTypedFormComponents } from '../../../../typed-formik-form';\nimport { Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Partial<Ferieuttak>;\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt'\n};\n\nenum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom'\n}\n\ntype FormValues = Partial<Ferieuttak>;\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues>();\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak: initialValues = { fom: undefined, tom: undefined },\n    onSubmit,\n    onCancel\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        if (isFerieuttak(formValues)) {\n            onSubmit(formValues);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form\n                        onCancel={onCancel}\n                        fieldErrorRenderer={(error) => commonFieldErrorRenderer(intl, error)}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        </Box>\n                        <Form.DateIntervalPicker\n                            legend={formLabels.intervalTitle}\n                            fromDatepickerProps={{\n                                label: formLabels.fromDate,\n                                name: FerieuttakFormFields.fom,\n                                fullscreenOverlay: true,\n                                dateLimitations: {\n                                    minDato: minDate,\n                                    maksDato: maxDate || formik.values.tom\n                                },\n                                validate: (date: Date) =>\n                                    dateRangeValidation.validateFromDate(date, minDate, maxDate, formik.values.tom),\n                                onChange: () => {\n                                    setTimeout(() => {\n                                        formik.validateField(FerieuttakFormFields.tom);\n                                    });\n                                }\n                            }}\n                            toDatepickerProps={{\n                                label: formLabels.toDate,\n                                name: FerieuttakFormFields.tom,\n                                fullscreenOverlay: true,\n                                dateLimitations: {\n                                    minDato: minDate || formik.values.fom,\n                                    maksDato: maxDate\n                                },\n                                validate: (date: Date) =>\n                                    dateRangeValidation.validateToDate(date, minDate, maxDate, formik.values.fom),\n                                onChange: () => {\n                                    setTimeout(() => {\n                                        formik.validateField(FerieuttakFormFields.fom);\n                                    });\n                                }\n                            }}\n                        />\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n}\n\nexport const isFerieuttak = (ferieuttak: Partial<Ferieuttak>): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined;\n};\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList: React.FunctionComponent<Props> = ({ ferieuttak = [], onDelete, onEdit }) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport {\n    FormikModalFormAndList, FormikValidateFunction, ModalFormAndListLabels\n} from '../../../../typed-formik-form';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: FormikValidateFunction;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldNames>({ name, minDate, maxDate, validate, labels }: Props<FieldNames>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldNames, Ferieuttak>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate}\n                sortFunc={sortItemsByFom}\n                formRenderer={({ onSubmit, onCancel, item }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\nimport { Ferieuttak } from './ferieuttak-example';\n\nexport enum FormFields {\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak'\n}\n\nexport interface CompletedFormValues {\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: Date;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: Date;\n    [FormFields.daterange_to]?: Date;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: Ferieuttak[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport moment from 'moment';\nimport { FormikDateIntervalPicker, FormikFileInput } from '../../../../typed-formik-form';\nimport FormikTimeInput from '../../../../typed-formik-form/components/formik-time-input/FormikTimeInput';\nimport {\n    getTypedFormComponents\n} from '../../../../typed-formik-form/components/getTypedFormComponents';\nimport Question from '../../../components/question/Question';\nimport Tiles from '../../../components/tiles/Tiles';\nimport {\n    isIntlFieldValidationErrorType, renderIntlFieldValidationError\n} from '../../../modules/validation/fieldValidationRenderUtils';\nimport { validateRequiredField, validateRequiredList } from '../../../validation/fieldValidations';\nimport FerieuttakListAndDialog from '../ferieuttak-example/FerieuttakListAndDialog';\nimport { FormFields, FormValues } from '../types';\n\ninterface Props {}\n\nconst Form = getTypedFormComponents<FormFields, FormValues>();\n\nconst TypedFormExample: React.FunctionComponent<Props> = () => {\n    const intl = useIntl();\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            fieldErrorRenderer={(error) => {\n                if (isIntlFieldValidationErrorType(error)) {\n                    return renderIntlFieldValidationError(intl, error);\n                }\n                return error;\n            }}>\n            <h3>Noen skjemaelementer</h3>\n            <Question>\n                <Form.DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" validate={validateRequiredField} />\n            </Question>\n            <Question>\n                <Form.CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" />\n            </Question>\n            <Question>\n                <Tiles columns={2}>\n                    <Form.Input name={FormFields.firstname} label=\"Fornavn\" validate={validateRequiredField} />\n                    <Form.Input name={FormFields.lastname} label=\"Etternavn\" validate={validateRequiredField} />\n                </Tiles>\n            </Question>\n            <Question>\n                <Form.YesOrNoQuestion legend=\"Har du barn?\" name={FormFields.hasKids} />\n            </Question>\n            <Question>\n                <div style={{ display: 'flex', flex: 'flex-start' }}>\n                    <FormikTimeInput name={FormFields.time} label=\"Tidspunkt\" />\n                </div>\n            </Question>\n            <Question>\n                <FormikDateIntervalPicker\n                    legend=\"Tidsrom\"\n                    fromDatepickerProps={{\n                        name: FormFields.daterange_from,\n                        label: 'Fra',\n                        validate: validateRequiredField\n                    }}\n                    toDatepickerProps={{\n                        name: FormFields.daterange_to,\n                        label: 'Til',\n                        validate: validateRequiredField\n                    }}\n                />\n            </Question>\n            <Question>\n                <FerieuttakListAndDialog\n                    name={FormFields.ferieuttak}\n                    labels={{\n                        addLabel: 'Legg til',\n                        modalTitle: 'Ferieuttak',\n                        listTitle: 'Ferieuttak'\n                    }}\n                    minDate={moment()\n                        .subtract(1, 'year')\n                        .toDate()}\n                    maxDate={moment()\n                        .add(1, 'year')\n                        .toDate()}\n                    validate={validateRequiredList}\n                />\n            </Question>\n            <Question>\n                <FormikFileInput\n                    name={FormFields.files}\n                    label=\"Legg til filer\"\n                    acceptedExtensions={'tsx'}\n                    onFilesSelect={() => null}\n                />\n            </Question>\n        </Form.Form>\n    );\n};\n\nexport default TypedFormExample;\n","import React from 'react';\nimport moment from 'moment';\nimport { Panel } from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport TypedFormExample from './typed-form-example/TypedFormExample';\nimport { FormValues } from './types';\n\ninterface Props {}\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            id: '1',\n            fom: new Date(),\n            tom: moment()\n                .add(1, 'month')\n                .toDate()\n        },\n        {\n            id: '2',\n            fom: moment()\n                .add(1, 'month')\n                .toDate(),\n            tom: moment()\n                .add(2, 'month')\n                .toDate()\n        }\n    ]\n};\n\nconst FormikExample: React.FunctionComponent<Props> = () => {\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>TypedFormExample</h2>\n                Siden setter opp TypedFormikWrapper og setter type med generics. Se <code>TypedFormExample</code>. En\n                kan også bruke <code>getTypedFormComponents</code>-util for å få ut alle skjemakomponentene typed\n                direkte. Se <code>TypedFormExample</code>.\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={() => (\n                    <Panel>\n                        <TypedFormExample />\n                    </Panel>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import React from 'react';\nimport { Ingress } from 'nav-frontend-typografi';\nimport PageIntro from './components/page-intro/PageIntro';\n\ninterface Props {}\n\nconst Intro: React.FunctionComponent<Props> = (props) => (\n    <>\n        <PageIntro title=\"@navikt/sif-common-formik\">\n            <h2>Typed formik wrapper for nav-frontend-skjema</h2>\n            <Ingress>\n                Sett av skjema-komponenter laget for team brukerdialog i sykdom-i-familien. Komponentene gjør det\n                enklere og raskere å sette opp skjemaløsninger hvor en bruker typescript, formik of nav-frontend-skjema,\n                og som sørger for at oppførsel og utéendet blir likt på tvers av brukerdialogene.\n            </Ingress>\n            <h3>Kort hvordan det virker</h3>\n            <ol>\n                <li>\n                    Definer alle felter i skjemaet som enums - <code>FieldNames</code>\n                </li>\n                <li>\n                    Definer et interface for skjemaet: <code>FormValues</code>\n                </li>\n                <li>\n                    Bygg opp app med <code>TypedFormikWrapper -> FormikForm[] -> FormikInputs[]</code>\n                </li>\n            </ol>\n            <p> ... se kode for konkret eksempel</p>\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />\n    },\n    {\n        path: 'formik-example',\n        title: 'TypedFormExample',\n        renderContent: () => <FormikExample />\n    }\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu: React.FunctionComponent = () => {\n    const {\n        location: { pathname }\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ninterface Props {}\n\nconst DevContent: React.FunctionComponent<Props> = (props) => {\n    const history = useHistory();\n    const {\n        location: { pathname }\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <aside className=\"asideContent\">\n                <LeftMenu />\n            </aside>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default DevContent;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\ninterface Props {}\n\nconst DevPage: React.FunctionComponent<Props> = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel>sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <BrowserRouter>\n                    <DevContent />\n                </BrowserRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import * as React from 'react';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nb';\nimport '@formatjs/intl-pluralrules/dist/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","export { default as TypedFormikForm, TypedFormikFormContext } from './components/typed-formik-form/TypedFormikForm';\nexport { default as TypedFormikWrapper } from './components/typed-formik-wrapper/TypedFormikWrapper';\nexport { default as FormikValidationErrorSummary } from './components/formik-validation-error-summary/FormikValidationErrorSummary';\nexport { default as FormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCustomInputWrapper } from './components/formik-custom-input-wrapper/FormikCustomInputWrapper';\nexport { default as TypedFormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCheckboxPanelGroup } from './components/formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nexport { default as FormikConfirmationCheckboxPanel } from './components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nexport { default as FormikCountrySelect } from './components/formik-country-select/FormikCountrySelect';\nexport { default as FormikDateIntervalPicker } from './components/formik-date-interval-picker/FormikDateIntervalPicker';\nexport { default as FormikDatepicker } from './components/formik-datepicker/FormikDatepicker';\nexport { default as FormikFileInput } from './components/formik-file-input/FormikFileInput';\nexport { default as FormikInput } from './components/formik-input/FormikInput';\nexport { default as FormikInputGroup } from './components/formik-input-group/FormikInputGroup';\nexport { default as FormikModalFormAndList } from './components/formik-modal-form-and-list/FormikModalFormAndList';\nexport { default as FormikRadioPanelGroup } from './components/formik-radio-panel-group/FormikRadioPanelGroup';\nexport { default as FormikSelect } from './components/formik-select/FormikSelect';\nexport { default as FormikTextarea } from './components/formik-textarea/FormikTextarea';\nexport { default as FormikYesOrNoQuestion } from './components/formik-yes-or-no-question/FormikYesOrNoQuestion';\n\nexport * from './types';\nexport * from './utils/countryUtils';\nexport * from './utils/formikUtils';\nexport * from './utils/typedFormErrorUtils';\nexport * from './components/getTypedFormComponents';\nexport * from './components/formik-modal-form-and-list/types';\n","import moment from 'moment';\nimport { DatovelgerAvgrensninger } from 'nav-datovelger';\nimport { DateLimitiations } from './FormikDatepicker';\n\nconst apiDateFormat = 'YYYY-MM-DD';\n\nexport const dateToISOFormattedDateString = (date?: Date) =>\n    date ? moment.utc(date).format(apiDateFormat) : undefined;\n\nconst parseDateLimitations = (dateLimitations: DateLimitiations): DatovelgerAvgrensninger => {\n    return {\n        maksDato: dateToISOFormattedDateString(dateLimitations.maksDato),\n        minDato: dateToISOFormattedDateString(dateLimitations.minDato),\n        helgedagerIkkeTillatt: dateLimitations.helgedagerIkkeTillatt,\n        ugyldigeTidsperioder:\n            dateLimitations.ugyldigeTidsperioder &&\n            dateLimitations.ugyldigeTidsperioder.map((t: { fom: Date; tom: Date }) => ({\n                fom: dateToISOFormattedDateString(t.fom)!,\n                tom: dateToISOFormattedDateString(t.tom)!\n            }))\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (moment(value, moment.ISO_8601, true).isValid()) {\n            date = moment(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOFormattedDateString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string): Date | undefined =>\n    dateString && dateString !== 'Invalid date' ? new Date(dateString) : undefined;\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations\n};\n\nexport default datepickerUtils;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport Datovelger from 'nav-datovelger/dist/datovelger/Datovelger';\nimport useMedia from 'use-media';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport CustomInput from '../helpers/custom-input/CustomInput';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport './datepicker.less';\n\ninterface DateRange {\n    fom: Date;\n    tom: Date;\n}\n\nexport interface DateLimitiations {\n    minDato?: Date;\n    maksDato?: Date;\n    ugyldigeTidsperioder?: DateRange[];\n    helgedagerIkkeTillatt?: boolean;\n}\ninterface OwnProps<FieldName> {\n    id?: string;\n    name: FieldName;\n    label: string;\n    dateLimitations?: DateLimitiations;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    disabled?: boolean;\n    showYearSelector?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    onChange?: (date: Date | undefined) => void;\n}\n\nexport type FormikDatepickerProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nconst placeholder = 'dd.mm.åååå';\n\nfunction FormikDatepicker<FieldName>({\n    validate,\n    label,\n    dateLimitations,\n    name,\n    id,\n    info,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    onChange,\n    ...restProps\n}: FormikDatepickerProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMedia({ minWidth: 736 });\n    const elementId = id || guid();\n    const plassering = fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullskjerm' : undefined;\n    const inputName = (name || '') as string;\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CustomInput feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>\n                            <LabelWithInfo info={info}>{label}</LabelWithInfo>\n                        </Label>\n                        <Datovelger\n                            id={elementId}\n                            {...restProps}\n                            input={{ name: inputName, placeholder, id: elementId }}\n                            valgtDato={datepickerUtils.getDateStringFromValue(field.value)}\n                            avgrensninger={\n                                dateLimitations ? datepickerUtils.parseDateLimitations(dateLimitations) : undefined\n                            }\n                            visÅrVelger={showYearSelector}\n                            kalender={{\n                                plassering\n                            }}\n                            onChange={(dateString: string) => {\n                                const date = datepickerUtils.getDateFromDateString(dateString);\n                                if (field.value !== date) {\n                                    form.setFieldValue(field.name, date);\n                                    if (onChange) {\n                                        onChange(date);\n                                    }\n                                }\n                            }}\n                        />\n                    </CustomInput>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCheckbox<FieldName>({\n    name,\n    label,\n    validate,\n    afterOnChange,\n    info,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import * as React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    children: React.ReactNode;\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.StatelessComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikErrors, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { NavFrontendSkjemaFeil } from '../../types';\nimport { getErrorsForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\n\nexport type FormikErrorRender<FormValues> = (error: FormikErrors<FormValues>) => NavFrontendSkjemaFeil;\n\nexport interface TypedFormikFormProps<FormValues> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    fieldErrorRenderer: FormikErrorRender<FormValues>;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n}\n\nexport interface TypedFormikFormContextType {\n    showErrors: boolean;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    fieldErrorRenderer?: FormikErrorRender<any>;\n}\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\nexport const userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues>({\n    children,\n    onCancel,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    fieldErrorRenderer,\n    onValidSubmit,\n    includeButtons = true\n}: TypedFormikFormProps<FormValues>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount] = useState(submitCount);\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        handleSubmit(evt);\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            fieldErrorRenderer,\n            showErrors,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const errors = getErrorsForField(field.name, form.errors);\n                    if (errors) {\n                        return fieldErrorRenderer ? fieldErrorRenderer(errors) : true;\n                    }\n                }\n                return undefined;\n            }\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className}>\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type=\"flat\"\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import React from 'react';\nimport { Formik, FormikProps } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\nfunction TypedFormikWrapper<FormValues>(props: TypedFormikWrapperProps<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikRadioPanelGroup<FieldName>({\n    name,\n    validate,\n    legend,\n    radios,\n    info,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt, value) => form.setFieldValue(field.name, value)}\n                        radios={radios.map((rb) => ({\n                            name: `${name}`,\n                            ...rb\n                        }))}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow'\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n}\n\nexport type FormikValidateFunction = (value: any) => any;\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputCommonProps {\n    validate?: FormikValidateFunction;\n    info?: React.ReactNode;\n}\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return fieldValues.includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    info,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value)\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName> = OwnProps<FieldName> &\n    Omit<TypedFormInputCommonProps, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName>({\n    children,\n    name,\n    feil,\n    validate,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (isoCode: string, locale: string): string => {\n    const names = countries.getNames(locale);\n    return names[isoCode];\n};\n\nexport const getCountries = () => countries;\n","import * as React from 'react';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName> {\n    legend: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName>;\n    toDatepickerProps: FormikDatepickerProps<FieldName>;\n    info?: string;\n}\n\nfunction FormikDateIntervalPicker<FieldName>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    info\n}: DateIntervalPickerProps<FieldName>) {\n    return (\n        <SkjemaGruppe legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>} className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName> {...toDatepickerProps} />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ntype InputMode = 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n    inputmode?: InputMode;\n}\n\nconst getPatternForInputMode = (inputMode?: InputMode): string | undefined => {\n    switch (inputMode) {\n        case 'numeric':\n            return '[0-9]*';\n        default:\n            return undefined;\n    }\n};\n\nexport type FormikInputProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikInput<FieldName>({\n    label,\n    name,\n    info,\n    feil,\n    validate,\n    inputMode,\n    ...restProps\n}: FormikInputProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Input\n                        {...restProps}\n                        {...field}\n                        inputMode={inputMode}\n                        pattern={getPatternForInputMode(inputMode)}\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikInputGroup<FieldName>({\n    name,\n    legend,\n    feil,\n    children,\n    info,\n    validate,\n    ...restProps\n}: FormikInputGroupProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {children}\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikSelect<FieldName>({\n    label,\n    name,\n    children,\n    validate,\n    info,\n    feil,\n    ...restProps\n}: FormikSelectProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikTextarea<FieldName>({\n    label,\n    name,\n    validate,\n    info,\n    feil,\n    ...restProps\n}: FormikTextareaProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                        }}\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","import * as React from 'react';\nimport { TypedFormInputCommonProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, {\n    FormikRadioPanelGroupProps\n} from '../formik-radio-panel-group/FormikRadioPanelGroup';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\n\nexport interface FormikYesOrNoQuestionProps<FieldName> extends Omit<FormikRadioPanelGroupProps<FieldName>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName>({\n    legend,\n    name,\n    includeDoNotKnowOption,\n    labels,\n    info,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName> & TypedFormInputCommonProps) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : [])\n            ]}\n            {...restProps}\n            legend={<LabelWithInfo info={info}>{legend}</LabelWithInfo>}\n            name={name}\n            useTwoColumns={true}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","import React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, {\n    FormikCountrySelectProps\n} from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikRadioPanelGroup, {\n    FormikRadioPanelGroupProps\n} from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikYesOrNoQuestion, {\n    FormikYesOrNoQuestionProps\n} from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, {\n    TypedFormikWrapperProps\n} from './typed-formik-wrapper/TypedFormikWrapper';\n\nexport function getTypedFormComponents<FieldNames, FormValues>() {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldNames>) => <FormikCheckbox<FieldNames> {...props} />,\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldNames>) => (\n            <FormikCheckboxPanelGroup<FieldNames> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldNames>) => (\n            <FormikConfirmationCheckboxPanel<FieldNames> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldNames>) => <FormikCountrySelect<FieldNames> {...props} />,\n        DatePicker: (props: FormikDatepickerProps<FieldNames>) => <FormikDatepicker<FieldNames> {...props} />,\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldNames>) => (\n            <FormikDateIntervalPicker<FieldNames> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldNames>) => <FormikFileInput<FieldNames> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldNames>) => <FormikInput<FieldNames> {...props} />,\n        InputGroup: (props: FormikInputGroupProps<FieldNames>) => <FormikInputGroup<FieldNames> {...props} />,\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldNames>) => (\n            <FormikRadioPanelGroup<FieldNames> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldNames>) => <FormikSelect<FieldNames> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldNames>) => <FormikTextarea<FieldNames> {...props} />,\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldNames>) => (\n            <FormikYesOrNoQuestion<FieldNames> {...props} />\n        )\n    };\n}\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef(null);\n    useEffect(() => {\n        if (summaryEl.current !== null) {\n            const node: any = findDOMNode(summaryEl.current);\n            if (node && node.focus) {\n                node.focus();\n            }\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            ref={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllErrors } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const allErrors = !formik.isValid && getAllErrors(formik);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = allErrors\n            ? Object.keys(allErrors).map((key) => {\n                  const error = allErrors[key];\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorRenderer ? context.fieldErrorRenderer(error) : error,\n                      skjemaelementId: key\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import * as React from 'react';\n\nfunction UploadSvg(props) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import * as React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport CustomInput from '../../helpers/custom-input/CustomInput';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <CustomInput feil={feil} className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\"\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </CustomInput>\n        );\n    }\n}\n","import * as React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick\n}: FormikFileInputProps<FieldName> & TypedFormInputCommonProps) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import flatten from 'flat';\nimport { FieldInputProps, FormikErrors, FormikProps, getIn } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { NavFrontendSkjemaFeil } from '../types';\n\n// import { FeiloppsummeringFeil } from 'nav-frontend-skjema';\n// import { FormikErrorRender } from '../components/typed-formik-form/TypedFormikForm';\n\ninterface ErrorNodeInObject {\n    field: string;\n    error: {\n        key: string;\n        values: object;\n    };\n}\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorsForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): FormikErrors<FormValues> | undefined => {\n    return getIn(errors, elementName);\n};\n\nexport const isValidationErrorsVisible = (form: FormikProps<any>): boolean => {\n    if (form) {\n        const { status: formikStatus, submitCount } = form;\n        return formikStatus !== undefined && formikStatus.stepSubmitCount !== undefined\n            ? submitCount > formikStatus.stepSubmitCount\n            : formikStatus?.showErrors === true;\n    }\n    return true;\n};\n\nexport function flattenFieldArrayErrors<FormValues>(errors: FormValues): FormValues {\n    let allErrors: any = {};\n    Object.keys(errors).forEach((key) => {\n        const error = errors[key];\n        if (isFieldArrayErrors(error)) {\n            (error as FormValues[]).forEach((err, idx) => {\n                allErrors = {\n                    ...allErrors,\n                    ...getErrorsFromFieldArrayErrors(err, key, idx)\n                };\n            });\n        } else if (error.key) {\n            allErrors[key] = error;\n        } else if (typeof error === 'object') {\n            const errorNode = findErrorNodeInObject(key, error);\n            if (errorNode) {\n                allErrors[errorNode.field] = errorNode.error;\n            }\n        }\n    });\n    return allErrors;\n}\n\nconst findErrorNodeInObject = (key: string, error: object): undefined | ErrorNodeInObject => {\n    const flatError: object = flatten({ [key]: error });\n    const keys = Object.keys(flatError);\n    if (keys.length === 2) {\n        const field = keys[0].split('.key')[0];\n        return {\n            field,\n            error: {\n                key: flatError[keys[0]],\n                values: flatten.unflatten(flatError[keys[1]])\n            }\n        };\n    }\n    return undefined;\n};\n\nconst isFieldArrayErrors = (error: any): boolean => {\n    if (typeof error === 'object' && error.length && error.length > 0) {\n        return true;\n    }\n    return false;\n};\n\nfunction getErrorsFromFieldArrayErrors<FieldName>(field: FieldName, fieldArrayKey: string, index: number): {} {\n    const errors: any = {};\n    Object.keys(field).forEach((key) => {\n        errors[`${fieldArrayKey}.${index}.${key}`] = field[key];\n    });\n    return errors;\n}\n\nexport function getAllErrors<FormValues>(formik: FormikProps<FormValues>): FormikErrors<FormValues> | undefined {\n    const { errors } = formik;\n    if (errors) {\n        const numberOfErrors = Object.keys(errors).length;\n        if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n            return flattenFieldArrayErrors(errors);\n        }\n    }\n    return undefined;\n}\n\n// export function getValidationSummaryErrorsWithIntl<FormValues>(\n//     formik: FormikProps<FormValues>,\n//     intl: IntlShape\n// ): FeiloppsummeringFeil[] | undefined {\n//     const { errors } = formik;\n//     if (errors) {\n//         const numberOfErrors = Object.keys(errors).length;\n//         const errorMessages: FeiloppsummeringFeil[] = [];\n\n//         if (numberOfErrors > 0 && isValidationErrorsVisible(formik)) {\n//             const allErrors = flattenFieldArrayErrors(errors);\n//             Object.keys(allErrors).forEach((key) => {\n//                 const error = allErrors[key];\n//                 const message = isFieldValidationError(error) ? renderFieldValidationError(intl, error) : error;\n//                 if (message && typeof message === 'string') {\n//                     errorMessages.push({\n//                         skjemaelementId: key,\n//                         feilmelding: message\n//                     });\n//                 }\n//             });\n\n//             if (errorMessages.length > 0) {\n//                 return errorMessages;\n//             }\n//         }\n//     }\n//     return undefined;\n// }\n\n// export const getFieldErrorMessage = (\n//     field: FieldInputProps<any>,\n//     form: FormikProps<any>,\n//     intl: IntlShape\n// ): React.ReactNode | undefined => {\n//     if (isValidationErrorsVisible(form)) {\n//         return getValidationErrorWithIntl(intl, form.errors, field.name);\n//     }\n//     return undefined;\n// };\n","import * as React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst isoCodeIndex = 0;\nconst countryNameIndex = 1;\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale\n            )\n        };\n    }\n\n    getCountryOptions(locale): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)}>\n                <option value=\"\" />\n                {this.getCountryOptions(locale)}\n            </Select>\n        );\n    }\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (onluEuAndEftaCountries: boolean, locale: string): React.ReactNode[] => {\n    const localeToUse = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n    return Object.entries(countries.getNames(localeToUse))\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], localeToUse))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[isoCodeIndex], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option key={countryOptionValue[isoCodeIndex]} value={countryOptionValue[isoCodeIndex]}>\n                {countryOptionValue[countryNameIndex]}\n            </option>\n        ));\n};\n\nexport default CountrySelect;\n","import * as React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputCommonProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport LabelWithInfo from '../helpers/label-with-info/LabelWithInfo';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName> = OwnProps<FieldName> & TypedFormInputCommonProps;\n\nfunction FormikCountrySelect<FieldName>({\n    label,\n    name,\n    feil,\n    validate,\n    info,\n    showOnlyEuAndEftaCountries\n}: FormikCountrySelectProps<FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        label={<LabelWithInfo info={info}>{label}</LabelWithInfo>}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => form.setFieldValue(field.name, value)}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames\n});\n\nexport default bemUtils;\n","import * as React from 'react';\nimport Hjelpetekst from 'nav-frontend-hjelpetekst';\nimport { Element } from 'nav-frontend-typografi';\nimport './labelWithInfo.less';\n\ninterface LabelWithHelperText {\n    children: React.ReactNode;\n    info?: React.ReactNode;\n}\n\nconst LabelWithInfo: React.FunctionComponent<LabelWithHelperText> = ({ children, info }) => {\n    if (!children) {\n        return null;\n    }\n    if (info === undefined) {\n        return <Element tag=\"span\">{children}</Element>;\n    }\n    return (\n        <Element tag=\"span\" className=\"labelWithInfo\">\n            {children}\n            {info && <Hjelpetekst className=\"labelWithInfo__info\">{info}</Hjelpetekst>}\n        </Element>\n    );\n};\n\nexport default LabelWithInfo;\n"],"sourceRoot":""}