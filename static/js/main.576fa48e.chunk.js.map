{"version":3,"sources":["typed-formik-form/components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo.tsx","typed-formik-form/components/helpers/label-with-info/LabelWithInfo.tsx","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/index.ts","typed-formik-form/components/helpers/skjemagruppe-question/SkjemagruppeQuestion.tsx","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/types/index.ts","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","dev/components/app-intl-provider/messages.ts","dev/examples/formik-example/ferieuttak-example/ferieuttakMessages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","typed-formik-form/validation/getCheckedValidator.ts","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","typed-formik-form/validation/getDateValidator.ts","typed-formik-form/validation/validationUtils.ts","typed-formik-form/validation/getDateRangeValidator.ts","typed-formik-form/validation/getFødselsnummerValidator.ts","typed-formik-form/validation/getListValidator.ts","typed-formik-form/validation/getNumberValidator.ts","typed-formik-form/validation/getOrgNumberValidator.ts","typed-formik-form/validation/getStringValidator.ts","typed-formik-form/validation/getYesOrNoValidator.ts","typed-formik-form/validation/getRequiredFieldValidator.ts","dev/examples/formik-example/ferieuttak-example/types.ts","typed-formik-form/validation/types.ts","typed-formik-form/validation/intlFormErrorHandler.ts","dev/components/question/Question.tsx","dev/components/tiles/Tiles.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakForm.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakListAndDialog.tsx","dev/examples/formik-example/types.ts","dev/examples/formik-example/typed-form-example/Siblings.tsx","dev/examples/validering-example/types.ts","dev/examples/formik-example/typed-form-example/TypedFormExample.tsx","dev/examples/formik-example/FormikExample.tsx","dev/components/validation-errors/ValidationErrorList.tsx","dev/examples/validering-example/ValideringPanel.tsx","dev/utils/dateUtils.ts","dev/examples/validering-example/ValideringExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/utils/bemUtils.ts","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-number-input/FormikNumberInput.tsx","typed-formik-form/components/formik-radio-group/FormikRadioGroup.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal/Modal.tsx","typed-formik-form/components/formik-date-range-picker/dateRangePickerUtils.ts","typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker.tsx"],"names":["ButtonRow","children","align","layout","cls","className","React","Children","map","knapp","index","TypedFormikFormContext","createContext","undefined","TypedFormikForm","oldProps","currentProps","resetFormOnCancel","includeValidationSummary","submitButtonLabel","cancelButtonLabel","id","includeButtons","runDelayedFormValidation","cancelButtonType","formErrorHandler","onCancel","onValidSubmit","noButtonsContentRenderer","cleanup","formik","useFormikContext","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValid","isValidating","useState","formSubmitCount","setFormSubmitCout","hasCleanedUp","counter","cleanupState","setCleanupState","ref","useRef","useEffect","current","showErrors","onSubmit","evt","stopPropagation","preventDefault","setValues","values","runCleanup","noValidate","autoComplete","Provider","value","isValidationErrorsVisible","fieldErrorHandler","error","fieldName","isHandledErrorTypeChecker","isHandledErrorTypeFunc","getAndRenderFieldErrorMessage","field","form","getErrorForField","name","errors","onAfterFieldValueSet","status","setTimeout","validateForm","createTypedFormikFormContext","style","marginTop","FormikValidationErrorSummary","type","htmlType","onClick","ModalFormAndList","items","listRenderer","formRenderer","labels","dialogWidth","maxItems","onChange","isVisible","modalState","setModalState","resetModal","selectedItem","showListTitle","length","Modal","isOpen","contentLabel","modalTitle","onRequestClose","DialogFormWrapper","width","filter","item","guid","allItems","SkjemagruppeQuestion","legend","listTitle","feil","tag","onEdit","onDelete","i","emptyListText","paddingBottom","mini","addLabel","FormikModalFormAndList","sortFunc","onAfterChange","validate","context","useContext","updatedValues","sort","setFieldValue","getFeilPropForFormikInput","elementName","fieldErrors","getIn","Array","isArray","getAllFieldsWithErrors","allErrors","errorObjectChecker","getFieldsWithErrors","keys","parentKey","createFieldKey","Object","forEach","key","err","idx","isObject","push","isoStringFormat","dateToISOString","date","dayjs","format","ISOStringToDate","dateString","getDateFromDateString","isISODateString","Date","datepickerUtils","getDateStringFromValue","toDate","parseDateLimitations","minDate","maxDate","disabledDateRanges","disableWeekend","invalidDateRanges","d","from","to","weekendsNotSelectable","getLocaleToUse","locale","FormikDatepicker","label","showYearSelector","fullscreenOverlay","fullScreenOnMobile","inputTitle","description","placeholder","restProps","isWide","useMedia","minWidth","elementId","position","inputName","intl","useIntl","isInvalid","htmlFor","inputId","inputProps","title","limitations","calendarSettings","YesOrNo","TypedFormikWrapper","props","initialValues","renderFormContent","renderForm","setSubmitting","setTouched","appMessages","ferieuttakMessages","nb","require","nn","allMessages","ferieMessages","AppIntlProvider","onError","messages","NAVLogo","ValidateCheckedError","viewBox","fill","fillRule","bemUtils","block","element","e","m","modifier","modifierConditional","condition","child","c","classNames","bem","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","ValidateDateError","getCheckedValidator","notChecked","hasValue","extend","isSameOrAfter","isSameOrBefore","isoWeek","ValidateDateRangeError","getDateValidator","options","required","min","max","onlyWeekdays","dateHasNoValue","dateHasInvalidFormat","isBefore","dateIsBeforeMin","isAfter","dateIsAfterMax","isoWeekday","dateIsNotWeekday","ValidateFødselsnummerError","getFromDateValidator","dateError","fromDateIsAfterToDate","getToDateValidator","fromDate","toDateIsBeforeFromDate","getDateRangeValidator","validateFromDate","validateToDate","ValidateListError","getFødselsnummerValidator","disallowedValues","fødselsnummerHasNoValue","result","fnrvalidator","fnr","reasons","includes","fødselsnummerIsNot11Chars","fødselsnummerIsInvalid","some","f","fødselsnummerIsNotAllowed","ValidateNumberError","getListValidator","minItems","numItems","listIsEmpty","listHasTooFewItems","listHasTooManyItems","ValidateOrgNumberError","getNumberFromStringInput","inputValue","isNaN","replace","numValue","Number","getNumberValidator","numberValue","numberHasNoValue","numberHasInvalidFormat","numberIsTooSmall","numberIsTooLarge","ValidateStringError","isValidOrgNumber","test","charAt","strValue","checkNbr","mod","parseInt","getMod11","getOrgNumberValidator","orgNumberHasNoValue","isValidFormat","orgNumberHasInvalidFormat","ValidateYesOrNoError","getStringValidator","minLength","maxLength","stringHasNoValue","stringIsNotAString","stringIsTooShort","stringIsTooLong","ValidateRequiredFieldError","getYesOrNoValidator","YES","NO","DO_NOT_KNOW","yesOrNoIsUnanswered","Ferieland","getRequiredFieldValidator","noValue","isIntlErrorObject","createFieldErrorIntlKey","errorPrefix","getFieldErrorHandler","formatMessage","keepKeyUnaltered","getIntlFormErrorHandler","Question","marginBottom","FerieuttakFormFields","getTypedFormComponents","FerieuttakListAndDialog","FormFields","Form","TypedFormExample","subtract","add","YesOrNoQuestion","hasKids","question","Input","fødselsnummer","validations","validateFunc","validationResult","validateAll","FormikDateRangePicker","fromInputProps","daterange_from","toInputProps","daterange_to","ferieuttak","fom","tom","land","friends","letters","FormikExample","console","log","ValidationErrorList","info","example","ValideringPanel","code","activePanel","setActivePanel","tabs","_evt","language","docco","utc","isBetween","startOf","endOf","dateToday","liste","ValideringExample","tidsperiode_fra","tidsperiode_til","jaNeiSpørsmål","tekst","bredde","NumberInput","tall","DatePicker","dato","prettifyDate","DateRangePicker","dayPickerProps","initialMonth","orgnummer","CheckboxPanelGroup","checkboxes","RadioPanelGroup","radio","radios","CountrySelect","select","Checkbox","checked","Intro","href","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","withRouter","routeConfig","find","getRouteConfig","history","maxWidth","DevPage","App","setAppElement","ReactDOM","render","document","getElementById","FormikInputGroup","feilProp","isRenderableErrorMsgType","aria-live","tabIndex","FormikInput","suffix","suffixStyle","harFeil","feilMessageId","aria-errormessage","aria-hidden","FormikRadioPanelGroup","useTwoColumns","rb","handleTimeChange","time","hours","minutes","getNewTime","stateTime","TimeInput","maxHours","maxMinutes","setStateTime","Math","hoursLabelId","minutesLabelId","newTime","target","onBlur","FormikTimeInput","FormikCheckbox","afterOnChange","newValue","isCheckboxChecked","fieldValues","FormikCheckboxPanelGroup","cb","keyProp","el","FormikConfirmationCheckboxPanel","countries","getCountries","FormikDateIntervalPicker","fromDatepickerProps","toDatepickerProps","FormikNumberInput","integerValue","inputMode","pattern","FormikRadioGroup","isSelected","FormikSelect","FormikTextarea","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","ConfirmationCheckbox","DateIntervalPicker","FileInput","FormikWrapper","InputGroup","RadioGroup","Select","Textarea","ValidationErrorLink","stopClickEvent","ValidationSummary","errorMessages","summaryEl","focus","innerRef","tittel","customFeilRender","elementById","skjemaelementId","elementByName","getElementsByName","feilmelding","fieldsWithErrors","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","fileSelectHandler","bind","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","files","this","onFilesSelect","dataTransfer","inputElement","which","click","multiple","acceptedExtensions","role","onDragOver","onDrop","accept","Component","FormikFileInput","arrayHelpers","filteredListEØSCountries","countryOptionValue","shouldFilter","createCountryOptions","onluEuAndEftaCountries","useAlpha3Code","lang","names","entries","getNames","a","b","localeCompare","alpha2ToAlpha3","countryOptionsCache","getCountryOptions","updateCache","showOnlyEuAndEftaCountries","FormikCountrySelect","shouldCloseOnOverlayClick","minMax","sortDateRange","d1","d2","sortDateRangeByToDate","findClosestDateAfterDate","dates","dayjss","getClosestDateRangeBeforeDate","ranges","rangesBeforeDate","dateRange","getRangesEndingBeforeDate","reverse","getClosestDateRangeAfterDate","rangesAfterDate","getRangesStartingAfterDate","getFollowingDate","allowRangesToStartAndStopOnSameDate","getMaxDateForRangeStart","otherRanges","dateRanges","follwingDateRange","followingRangeeDate","getMaxDateForRangeEnd","baseDate","followingDate","getPreceedingDate","getMinDateForRangeStart","preceedingDateRange","preceedingDate","findClosestDateBeforeDate","getMinDateForRangeEnd","findClosestDateBeforeOrEqualDate","fromDateLimitations","toDateLimitations"],"mappings":"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","file":"static/js/main.576fa48e.chunk.js","sourcesContent":["import React from 'react';\nimport Alertstripe from 'nav-frontend-alertstriper';\nimport './unansweredQuestionsInfo.less';\n\nconst UnansweredQuestionsInfo: React.FunctionComponent = ({ children }) => (\n    <div className=\"unansweredQuestionsInfo\">\n        <Alertstripe type=\"info\" form=\"inline\">\n            {children}\n        </Alertstripe>\n    </div>\n);\n\nexport default UnansweredQuestionsInfo;\n","import React from 'react';\nimport Hjelpetekst from 'nav-frontend-hjelpetekst';\nimport { PopoverOrientering } from 'nav-frontend-popover';\nimport { Element } from 'nav-frontend-typografi';\nimport './labelWithInfo.less';\n\ninterface LabelWithHelperText {\n    info?: React.ReactNode;\n    infoPlassering?: PopoverOrientering;\n}\n\nconst LabelWithInfo: React.FunctionComponent<LabelWithHelperText> = ({\n    children,\n    info,\n    infoPlassering = PopoverOrientering.Over,\n}) => {\n    if (!children) {\n        return null;\n    }\n    if (info === undefined) {\n        return <Element tag=\"span\">{children}</Element>;\n    }\n\n    const partialPopoverProps: any = {\n        orientering: infoPlassering,\n    };\n    return (\n        <Element tag=\"span\" className=\"labelWithInfo\">\n            {children}\n            {info && (\n                <Hjelpetekst popoverProps={partialPopoverProps} className=\"labelWithInfo__info\">\n                    {info}\n                </Hjelpetekst>\n            )}\n        </Element>\n    );\n};\n\nexport default LabelWithInfo;\n","import React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.FunctionComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport {\n    CancelButtonTypes,\n    CustomFormErrorHandler,\n    ErrorTypeChecker,\n    FieldErrorHandler,\n    NavFrontendSkjemaFeil,\n} from '../../types';\nimport { getErrorForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\n\nexport interface TypedFormikFormProps<FormValues, ErrorType> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    id?: string;\n    cancelButtonType?: CancelButtonTypes;\n    runDelayedFormValidation?: boolean;\n    formErrorHandler?: CustomFormErrorHandler<ErrorType>;\n    noButtonsContentRenderer?: () => React.ReactNode;\n    cleanup?: (values: FormValues) => FormValues;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n}\n\nexport type TypedFormikFormContextType = {\n    showErrors: boolean;\n    fieldErrorHandler?: FieldErrorHandler<any>;\n    isHandledErrorTypeChecker?: ErrorTypeChecker<any>;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    onAfterFieldValueSet: () => void;\n};\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\n\nconst userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues, ErrorType>({\n    children,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    id,\n    includeButtons = true,\n    runDelayedFormValidation,\n    cancelButtonType,\n    formErrorHandler,\n    onCancel,\n    onValidSubmit,\n    noButtonsContentRenderer,\n    cleanup,\n}: TypedFormikFormProps<FormValues, ErrorType>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount, setFormSubmitCout] = useState(submitCount);\n    const [cleanupState, setCleanupState] = useState({ hasCleanedUp: false, counter: 0 });\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid,\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                if (isValid) {\n                    setFormSubmitCout(submitCount);\n                }\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    useEffect(() => {\n        cleanupState.hasCleanedUp && handleSubmit();\n    }, [cleanupState, handleSubmit]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const runCleanup = (evt: React.FormEvent<HTMLFormElement>) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        formik.setValues(cleanup ? cleanup(formik.values) : formik.values);\n        setCleanupState({ hasCleanedUp: true, counter: cleanupState.counter + 1 });\n    };\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        setCleanupState({ ...cleanupState, hasCleanedUp: false });\n        if (cleanup !== undefined) {\n            runCleanup(evt);\n        } else {\n            handleSubmit(evt);\n        }\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            showErrors,\n            fieldErrorHandler: (error, fieldName) => {\n                return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, fieldName) : error;\n            },\n            isHandledErrorTypeChecker: formErrorHandler?.isHandledErrorTypeFunc,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const error = getErrorForField(field.name, form.errors);\n                    if (error) {\n                        return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, field.name) : error;\n                    }\n                }\n                return undefined;\n            },\n            onAfterFieldValueSet: () => {\n                if (runDelayedFormValidation && formik.status && formik.status.showErrors) {\n                    setTimeout(() => {\n                        formik.validateForm();\n                    });\n                }\n            },\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className} id={id} autoComplete=\"off\">\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && isValidationErrorsVisible(formik) && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type={cancelButtonType || 'flat'}\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n                {includeButtons === false && noButtonsContentRenderer && (\n                    <div style={{ marginTop: '2rem' }}>{noButtonsContentRenderer()}</div>\n                )}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport DialogFormWrapper, { DialogFormWrapperWidths } from '../dialog-form-wrapper/DialogFormWrapper';\nimport Modal from '../modal/Modal';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    allItems?: ItemType[];\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    maxItems?: number;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    maxItems,\n    onChange,\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false,\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    const showListTitle = items.length > 0;\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({\n                        onSubmit: handleOnSubmit,\n                        onCancel: resetModal,\n                        item: modalState.selectedItem,\n                        allItems: items,\n                    })}\n                </DialogFormWrapper>\n            </Modal>\n            <SkjemagruppeQuestion legend={showListTitle ? labels.listTitle : undefined} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                {(maxItems === undefined || maxItems > items.length) && (\n                    <div\n                        style={showListTitle ? { marginTop: '1rem' } : undefined}\n                        className={'modalFormAndList__addButton'}>\n                        <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })} mini={true}>\n                            {labels.addLabel}\n                        </Knapp>\n                    </div>\n                )}\n            </SkjemagruppeQuestion>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType, ErrorType>\n    extends ModalFormAndListProps<ItemType>,\n        TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType, ErrorType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    maxItems,\n    validate,\n}: FormikModalFormAndListProps<FieldName, ItemType, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate ? (value) => validate(value, name) : undefined}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        maxItems={maxItems}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","import { FieldInputProps, FormikErrors, FormikProps, getIn, isObject } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { ErrorTypeChecker, NavFrontendSkjemaFeil } from '../types';\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context,\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): any | undefined => {\n    const fieldErrors: Array<string> | string = getIn(errors, elementName);\n    if (fieldErrors === null) {\n        return undefined;\n    }\n    if (Array.isArray(fieldErrors)) {\n        if (fieldErrors.length === 1 && fieldErrors[0] === null) {\n            /** Filter out fieldArray errors containing only null item */\n            return undefined;\n        }\n        if (fieldErrors.length >= 1) {\n            return fieldErrors[0];\n        }\n    } else {\n        return fieldErrors;\n    }\n};\n\nexport const isValidationErrorsVisible = (formik: FormikProps<any>): boolean => {\n    return formik?.status?.showErrors === true;\n};\n\nexport const getAllFieldsWithErrors = (allErrors: any, errorObjectChecker?: ErrorTypeChecker): string[] => {\n    const getFieldsWithErrors = (errors: any, keys: string[] = [], parentKey?: string): string[] => {\n        const createFieldKey = (fieldName: string): string => {\n            return parentKey ? `${parentKey}.${fieldName}` : fieldName;\n        };\n        if (errors) {\n            Object.keys(errors).forEach((key) => {\n                const error = errors[key];\n                if (Array.isArray(error)) {\n                    error.forEach((err, idx) => {\n                        getFieldsWithErrors(err, keys, createFieldKey(`${key}.${idx}`));\n                    });\n                } else {\n                    if (isObject(error)) {\n                        if (errorObjectChecker && errorObjectChecker(error)) {\n                            keys.push(createFieldKey(key));\n                            return;\n                        }\n                        return getFieldsWithErrors(error, keys, createFieldKey(`${key}`));\n                    }\n                    keys.push(createFieldKey(key));\n                }\n            });\n        }\n        return keys;\n    };\n    return getFieldsWithErrors(allErrors, []);\n};\n","import dayjs from 'dayjs';\nimport { DatepickerLimitations, DatepickerDateRange, isISODateString } from 'nav-datovelger';\nimport { DatepickerLimitiations } from './FormikDatepicker';\n\nconst isoStringFormat = 'YYYY-MM-DD';\n\nexport const dateToISOString = (date?: Date) => (date ? dayjs(date).format(isoStringFormat) : '');\nexport const ISOStringToDate = (dateString = ''): Date | undefined => getDateFromDateString(dateString);\n\nconst parseDateLimitations = ({\n    minDate,\n    maxDate,\n    disabledDateRanges = [],\n    disableWeekend,\n}: DatepickerLimitiations): DatepickerLimitations => {\n    const invalidDateRanges: DatepickerDateRange[] = disabledDateRanges.map((d) => ({\n        from: dateToISOString(d.from),\n        to: dateToISOString(d.to),\n    }));\n    return {\n        minDate: minDate ? dateToISOString(minDate) : undefined,\n        maxDate: maxDate ? dateToISOString(maxDate) : undefined,\n        weekendsNotSelectable: disableWeekend,\n        invalidDateRanges,\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (isISODateString(value) === false) {\n            return value;\n        }\n        if (dayjs(value, isoStringFormat, true).isValid()) {\n            date = dayjs(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string | undefined): Date | undefined => {\n    if (dateString === undefined) {\n        return undefined;\n    }\n    if (isISODateString(dateString)) {\n        return new Date(dateString);\n    }\n    return undefined;\n};\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations,\n};\n\nexport default datepickerUtils;\n","export { default as FormikCheckbox } from './components/formik-checkbox/FormikCheckbox';\nexport { default as FormikCheckboxPanelGroup } from './components/formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nexport { default as FormikConfirmationCheckboxPanel } from './components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nexport { default as FormikCountrySelect } from './components/formik-country-select/FormikCountrySelect';\nexport { default as FormikDateIntervalPicker } from './components/formik-date-interval-picker/FormikDateIntervalPicker';\nexport { default as FormikDatepicker } from './components/formik-datepicker/FormikDatepicker';\nexport { default as FormikFileInput } from './components/formik-file-input/FormikFileInput';\nexport { default as FormikInput } from './components/formik-input/FormikInput';\nexport { default as FormikNumberInput } from './components/formik-number-input/FormikNumberInput';\nexport { default as FormikInputGroup } from './components/formik-input-group/FormikInputGroup';\nexport { default as FormikModalFormAndList } from './components/formik-modal-form-and-list/FormikModalFormAndList';\nexport { default as FormikModalFormAndInfo } from './components/formik-modal-form-and-list/FormikModalFormAndInfo';\nexport { default as FormikRadioPanelGroup } from './components/formik-radio-panel-group/FormikRadioPanelGroup';\nexport { default as FormikRadioGroup } from './components/formik-radio-group/FormikRadioGroup';\nexport { default as FormikSelect } from './components/formik-select/FormikSelect';\nexport { default as FormikTextarea } from './components/formik-textarea/FormikTextarea';\nexport { default as FormikTimeInput } from './components/formik-time-input/FormikTimeInput';\nexport { default as FormikValidationErrorSummary } from './components/formik-validation-error-summary/FormikValidationErrorSummary';\nexport { default as FormikYesOrNoQuestion } from './components/formik-yes-or-no-question/FormikYesOrNoQuestion';\n\nexport { default as TypedFormikForm, TypedFormikFormContext } from './components/typed-formik-form/TypedFormikForm';\nexport { default as TypedFormikWrapper } from './components/typed-formik-wrapper/TypedFormikWrapper';\n\nexport { default as UnansweredQuestionsInfo } from './components/helpers/unanswerd-questions-info/UnansweredQuestionsInfo';\nexport { default as LabelWithInfo } from './components/helpers/label-with-info/LabelWithInfo';\nexport { default as SkjemagruppeQuestion } from './components/helpers/skjemagruppe-question/SkjemagruppeQuestion';\n\nexport * from './types';\nexport * from './utils/countryUtils';\nexport * from './utils/formikUtils';\nexport * from './utils/typedFormErrorUtils';\nexport * from './components/getTypedFormComponents';\nexport { ISOStringToDate, dateToISOString } from './components/formik-datepicker/datepickerUtils';\nexport * from './components/formik-modal-form-and-list/types';\nexport { getNumberFromNumberInputValue } from './utils/numberInputUtils';\n","import React from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\n\nconst SkjemagruppeQuestion: React.FunctionComponent<SkjemaGruppeProps> = ({\n    legend,\n    feil,\n    tag,\n    children,\n    className,\n}) => (\n    <SkjemaGruppe\n        className={`${className ? className : ''} singleInputWrapper`}\n        tag={tag ? tag : legend ? 'fieldset' : 'div'}\n        feil={feil}\n        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}>\n        {children}\n    </SkjemaGruppe>\n);\n\nexport default SkjemagruppeQuestion;\n","import React from 'react';\nimport { DayPickerProps } from 'react-day-picker';\nimport { useIntl } from 'react-intl';\nimport { Field, FieldProps } from 'formik';\nimport { CalendarPlacement, Datepicker, DatepickerChange } from 'nav-datovelger';\nimport useMedia from 'use-media';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { DateRange, NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport './datepicker.less';\n\nexport interface DatepickerLimitiations {\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDateRanges?: DateRange[];\n    disableWeekend?: boolean;\n}\n\nexport interface DatePickerBaseProps<FieldName, ErrorType> extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    label: string;\n    disabled?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    inputTitle?: string;\n    placeholder?: string;\n    dayPickerProps?: DayPickerProps;\n    invalidFormatError?: string;\n    locale?: 'nb' | 'nn' | 'en';\n    onChange?: (date: string) => void;\n}\nexport interface DatePickerPresentationProps {\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n}\ninterface OwnProps<FieldName, ErrorType> extends DatePickerBaseProps<FieldName, ErrorType> {\n    id?: string;\n    description?: React.ReactNode;\n}\n\nexport type FormikDatepickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nconst getLocaleToUse = (locale: string): 'nb' | 'nn' | 'en' | undefined => {\n    switch (locale) {\n        case 'nb':\n            return 'nb';\n        case 'nn':\n            return 'nn';\n        case 'en':\n            return 'en';\n        default:\n            return undefined;\n    }\n};\n\nfunction FormikDatepicker<FieldName, ErrorType>({\n    validate,\n    label,\n    name,\n    id,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    inputTitle,\n    onChange,\n    description,\n    placeholder,\n    locale,\n    ...restProps\n}: FormikDatepickerProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMedia({ minWidth: 736 });\n    const elementId = id || guid();\n    const position: CalendarPlacement | undefined =\n        fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullscreen' : undefined;\n    const inputName = (name || '') as string;\n    const intl = useIntl();\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps<string>) => {\n                const isInvalid = (feil || getFeilPropForFormikInput({ field, form, context, feil })) !== undefined;\n                const handleOnDatepickerChange: DatepickerChange = (dateString) => {\n                    if (field.value !== dateString) {\n                        form.setFieldValue(field.name, dateString);\n                        if (onChange) {\n                            onChange(dateString);\n                        }\n                        if (context) {\n                            context.onAfterFieldValueSet();\n                        }\n                    }\n                };\n\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={elementId}>{label}</Label>\n                        {description && <div className={'skjemaelement__description'}>{description}</div>}\n                        <Datepicker\n                            inputId={elementId}\n                            locale={getLocaleToUse(locale || intl.locale)}\n                            {...restProps}\n                            inputProps={{ name: inputName, placeholder, 'aria-invalid': isInvalid, title: inputTitle }}\n                            value={field.value}\n                            limitations={datepickerUtils.parseDateLimitations({\n                                minDate,\n                                maxDate,\n                                disableWeekend,\n                                disabledDateRanges,\n                            })}\n                            showYearSelector={showYearSelector}\n                            calendarSettings={{\n                                position,\n                            }}\n                            onChange={handleOnDatepickerChange}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow',\n}\n\nexport interface Time {\n    hours: number;\n    minutes: number;\n}\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport type CancelButtonTypes = 'standard' | 'hoved' | 'fare' | 'flat';\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputValidationProps<FieldName, ErrorType> {\n    validate?: (value: any, fieldName: FieldName) => ErrorType | undefined;\n}\n\nexport interface CustomFormErrorHandler<ErrorType> {\n    fieldErrorHandler: FieldErrorHandler<ErrorType>;\n    isHandledErrorTypeFunc?: ErrorTypeChecker<ErrorType>;\n}\n\nexport type FieldErrorHandler<ErrorType> = (error: ErrorType, fieldName: string) => string;\nexport type ErrorTypeChecker<ErrorType = any> = (error: ErrorType) => boolean;\n","import React from 'react';\nimport { Formik, FormikProps, FormikConfig } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\ntype Props<FormValues> = TypedFormikWrapperProps<FormValues> & FormikConfig<Partial<FormValues>>;\n\nfunction TypedFormikWrapper<FormValues>(props: Props<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","export const appMessages = {\n    nb: {\n        'letters.listIsEmpty': 'Whooa {value}',\n        'hasKids.yesOrNoIsUnanswered': 'You have not answered {question}',\n        'fødselsnummer.disallowedFødselsnummer': 'Du kan ikke bruke dette fødselsnummeret',\n        'fødselsnummer.disallowedFødselsnummerCustom': 'Du kan ikke bruke dette fødselsnummeret {info}',\n        'søskennavn.mangler': 'Ett av søskenene til {navn} mangler navn',\n    },\n    nn: {},\n};\n","const ferieuttakMessages = {\n    nb: require('./ferieuttak.nb.json'),\n    nn: require('./ferieuttak.nn.json'),\n};\n\nexport default ferieuttakMessages;\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { appMessages } from './messages';\nimport ferieMessages from '../../examples/formik-example/ferieuttak-example/ferieuttakMessages';\nimport { MessageFileFormat } from '../../utils/devIntlUtils';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst allMessages: MessageFileFormat = {\n    nb: {\n        ...appMessages.nb,\n        ...ferieMessages.nb,\n    },\n    nn: {\n        ...appMessages.nn,\n        ...ferieMessages.nn,\n    },\n};\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? allMessages.nb : allMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\ntype CheckedValidationResult = ValidateCheckedError | undefined;\n\nconst getCheckedValidator = (): ValidationFunction<CheckedValidationResult> => (value: any) => {\n    if (value !== true) {\n        return ValidateCheckedError.notChecked;\n    }\n    return undefined;\n};\n\nexport default getCheckedValidator;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React from 'react';\nimport bemHelper from '../../utils/bemUtils';\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined,\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isoWeek);\n\nexport enum ValidateDateError {\n    dateHasNoValue = 'dateHasNoValue',\n    dateHasInvalidFormat = 'dateHasInvalidFormat',\n    dateIsBeforeMin = 'dateIsBeforeMin',\n    dateIsAfterMax = 'dateIsAfterMax',\n    dateIsNotWeekday = 'dateIsNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateDateError.dateHasNoValue\n    | ValidateDateError.dateHasInvalidFormat\n    | ValidateDateError.dateIsBeforeMin\n    | ValidateDateError.dateIsAfterMax\n    | ValidateDateError.dateIsNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst getDateValidator = (options: DateValidationOptions = {}): ValidationFunction<DateValidationResult> => (\n    value: any\n) => {\n    const { required, min, max, onlyWeekdays } = options;\n    const date = datepickerUtils.getDateFromDateString(value);\n    if (required && hasValue(value) === false) {\n        return ValidateDateError.dateHasNoValue;\n    }\n    if (hasValue(value)) {\n        if (date === undefined) {\n            return ValidateDateError.dateHasInvalidFormat;\n        }\n        if (min && dayjs(date).isBefore(min, 'day')) {\n            return ValidateDateError.dateIsBeforeMin;\n        }\n        if (max && dayjs(date).isAfter(max, 'day')) {\n            return ValidateDateError.dateIsAfterMax;\n        }\n        if (onlyWeekdays && dayjs(date).isoWeekday() > 5) {\n            return ValidateDateError.dateIsNotWeekday;\n        }\n    }\n    return undefined;\n};\n\nexport default getDateValidator;\n","import { ValidationError, ValidationResult } from './types';\n\nexport const hasValue = (value: any): boolean => value !== '' && value !== undefined && value !== null;\n\nexport const validateAll = <ErrorType = ValidationError>(\n    validations: Array<() => ValidationResult<ErrorType>>\n): ErrorType | undefined => {\n    let result: ValidationResult<ErrorType>;\n    validations.some((validateFunc) => {\n        const validationResult = validateFunc();\n        if (validationResult) {\n            result = validationResult;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\n","import dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport getDateValidator, { DateValidationOptions, DateValidationResult } from './getDateValidator';\nimport { ValidationFunction } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface Options extends DateValidationOptions {\n    fromDate?: Date;\n    toDate?: Date;\n}\n\nconst getFromDateValidator = (options: Options): ValidationFunction<DateRangeValidationResult> => (value: any) => {\n    const dateError = getDateValidator(options)(value);\n    if (dateError) {\n        return dateError;\n    }\n    const { toDate } = options;\n    const date = datepickerUtils.getDateFromDateString(value);\n    if (!date || !toDate) {\n        return undefined;\n    }\n\n    if (dayjs(date).isAfter(toDate, 'day')) {\n        return ValidateDateRangeError.fromDateIsAfterToDate;\n    }\n    return undefined;\n};\n\nconst getToDateValidator = (options: Options): ValidationFunction<DateRangeValidationResult> => (value: any) => {\n    const dateError = getDateValidator(options)(value);\n    if (dateError) {\n        return dateError;\n    }\n    const { fromDate } = options;\n    const date = datepickerUtils.getDateFromDateString(value);\n    if (!date || !fromDate) {\n        return undefined;\n    }\n    if (dayjs(date).isBefore(fromDate, 'day')) {\n        return ValidateDateRangeError.toDateIsBeforeFromDate;\n    }\n    return undefined;\n};\n\nconst getDateRangeValidator = (options: Options) => ({\n    validateFromDate: getFromDateValidator(options),\n    validateToDate: getToDateValidator(options),\n});\n\nexport default getDateRangeValidator;\n","import fnrvalidator from '@navikt/fnrvalidator';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateFødselsnummerError {\n    fødselsnummerHasNoValue = 'fødselsnummerHasNoValue',\n    fødselsnummerIsNot11Chars = 'fødselsnummerIsNot11Chars',\n    fødselsnummerIsInvalid = 'fødselsnummerIsInvalid',\n    fødselsnummerIsNotAllowed = 'fødselsnummerIsNotAllowed',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateFødselsnummerError.fødselsnummerHasNoValue\n    | ValidateFødselsnummerError.fødselsnummerIsNotAllowed\n    | ValidateFødselsnummerError.fødselsnummerIsNot11Chars\n    | ValidateFødselsnummerError.fødselsnummerIsInvalid\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    disallowedValues?: string[];\n}\n\nconst getFødselsnummerValidator = (options: Options = {}): ValidationFunction<FødselsnummerValidationResult> => (\n    value: any\n) => {\n    const { required, disallowedValues } = options;\n    if (hasValue(value) === false && required === false) {\n        return undefined;\n    }\n    if (required && hasValue(value) === false) {\n        return ValidateFødselsnummerError.fødselsnummerHasNoValue;\n    }\n    if (hasValue(value)) {\n        const result = fnrvalidator.fnr(value);\n        if (result.status === 'invalid') {\n            /** Errors from @navikt/fnrvalidator */\n            const LENGTH_ERROR = 'fnr or dnr must consist of 11 digits';\n            const { reasons } = result;\n            if (reasons.includes(LENGTH_ERROR)) {\n                return ValidateFødselsnummerError.fødselsnummerIsNot11Chars;\n            }\n            return ValidateFødselsnummerError.fødselsnummerIsInvalid;\n        }\n        if (disallowedValues) {\n            const equalsDisallowedValue = disallowedValues.some((f) => f === value);\n            if (equalsDisallowedValue) {\n                return ValidateFødselsnummerError.fødselsnummerIsNotAllowed;\n            }\n        }\n    }\n    return undefined;\n};\n\nexport default getFødselsnummerValidator;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ntype ListValidationResult = undefined | ValidateListError;\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst getListValidator = (options: Options): ValidationFunction<ListValidationResult> => (value: any) => {\n    const { required = false, minItems = undefined, maxItems = undefined } = options;\n    if (Array.isArray(value)) {\n        const numItems = value.length;\n        if (required && numItems === 0) {\n            return ValidateListError.listIsEmpty;\n        }\n        if (minItems !== undefined && minItems > numItems) {\n            return ValidateListError.listHasTooFewItems;\n        }\n        if (maxItems !== undefined && maxItems < numItems) {\n            return ValidateListError.listHasTooManyItems;\n        }\n    }\n    if (required && !Array.isArray(value)) {\n        return ValidateListError.listIsEmpty;\n    }\n};\n\nexport default getListValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateNumberError {\n    numberHasNoValue = 'numberHasNoValue',\n    numberHasInvalidFormat = 'numberHasInvalidFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateNumberError.numberHasNoValue\n    | ValidateNumberError.numberHasInvalidFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst getNumberFromStringInput = (inputValue: string | undefined): number | undefined => {\n    if (inputValue === undefined || inputValue === '' || Array.isArray(inputValue)) {\n        return undefined;\n    }\n    if (typeof inputValue === 'number' && isNaN(inputValue)) {\n        return undefined;\n    }\n    const value = `${inputValue}`.replace(/\\,/g, '.');\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n        return undefined;\n    }\n    return numValue;\n};\n\nconst getNumberValidator = (options: Options = {}): ValidationFunction<NumberValidationResult> => (value: any) => {\n    const { required, min, max } = options;\n    const numberValue = getNumberFromStringInput(value);\n\n    if (hasValue(value) === false && required) {\n        return ValidateNumberError.numberHasNoValue;\n    }\n\n    if (hasValue(value)) {\n        if (numberValue === undefined) {\n            return ValidateNumberError.numberHasInvalidFormat;\n        }\n        if (min !== undefined && numberValue < min) {\n            return ValidateNumberError.numberIsTooSmall;\n        }\n        if (max !== undefined && numberValue > max) {\n            return ValidateNumberError.numberIsTooLarge;\n        }\n    }\n    return undefined;\n};\n\nexport default getNumberValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateOrgNumberError {\n    orgNumberHasNoValue = 'orgNumberHasNoValue',\n    orgNumberHasInvalidFormat = 'orgNumberHasInvalidFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateOrgNumberError.orgNumberHasNoValue\n    | ValidateOrgNumberError.orgNumberHasInvalidFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst isValidOrgNumber = (value: any): boolean => {\n    if (\n        value &&\n        typeof value === 'string' &&\n        value.length === 9 &&\n        /^[0-9]*$/.test(value) &&\n        (value.charAt(0) === '8' || value.charAt(0) === '9')\n    ) {\n        return getMod11(value) === parseInt(value.charAt(8), 10);\n    }\n    return false;\n};\n\nconst getOrgNumberValidator = (options: Options = {}): ValidationFunction<OrgNumberValidationResult> => (\n    value: any\n) => {\n    const { required } = options;\n    if (required && hasValue(value) === false) {\n        return ValidateOrgNumberError.orgNumberHasNoValue;\n    }\n    const isValidFormat = isValidOrgNumber(value);\n    if (hasValue(value) && isValidFormat === false) {\n        return ValidateOrgNumberError.orgNumberHasInvalidFormat;\n    }\n};\n\nexport default getOrgNumberValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateStringError {\n    stringHasNoValue = 'stringHasNoValue',\n    stringIsNotAString = 'stringIsNotAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateStringError.stringHasNoValue\n    | ValidateStringError.stringIsNotAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ninterface Options {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst getStringValidator = (options: Options = {}): ValidationFunction<StringValidationResult> => (value: any) => {\n    const { required, minLength, maxLength } = options;\n\n    if (required && hasValue(value) === false) {\n        return ValidateStringError.stringHasNoValue;\n    }\n    if (hasValue(value)) {\n        if (typeof value !== 'string') {\n            return ValidateStringError.stringIsNotAString;\n        }\n        if (minLength !== undefined && value.length < minLength) {\n            return ValidateStringError.stringIsTooShort;\n        }\n        if (maxLength !== undefined && value.length > maxLength) {\n            return ValidateStringError.stringIsTooLong;\n        }\n    }\n};\n\nexport default getStringValidator;\n","import { YesOrNo } from '../types';\nimport { ValidationFunction } from './types';\n\nexport enum ValidateYesOrNoError {\n    'yesOrNoIsUnanswered' = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult = ValidateYesOrNoError.yesOrNoIsUnanswered | undefined;\n\nconst getYesOrNoValidator = (): ValidationFunction<YesOrNoValidationResult> => (value: any) => {\n    const isAnswered = value === YesOrNo.YES || value === YesOrNo.NO || value === YesOrNo.DO_NOT_KNOW;\n    return isAnswered ? undefined : ValidateYesOrNoError.yesOrNoIsUnanswered;\n};\n\nexport default getYesOrNoValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst getRequiredFieldValidator = (): ValidationFunction<RequiredFieldValidationResult> => (value: any) => {\n    if (hasValue(value) === false) {\n        return ValidateRequiredFieldError.noValue;\n    }\n    return undefined;\n};\n\nexport default getRequiredFieldValidator;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    land: Ferieland[];\n}\n\nexport const isFerieuttak = (ferieuttak: Ferieuttak): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined && ferieuttak.land !== undefined;\n};\n\nexport enum Ferieland {\n    'Norge' = 'norge',\n    'Sverige' = 'sverige',\n    'Danmark' = 'danmark',\n}\n","export interface IntlErrorObject {\n    /** If passed in, the key is not transformed with field name and error */\n    key: string;\n    /** Values passed through to intl formatMessage */\n    values?: { [key: string]: any };\n    /** Set if error key is not to be altered by fieldErrorHandler */\n    keepKeyUnaltered?: boolean;\n}\n\nexport const isIntlErrorObject = (error: any): error is IntlErrorObject => {\n    return typeof error === 'object' && typeof error.key === 'string';\n};\n\nexport type ValidationError = string | IntlErrorObject;\n\nexport type ValidationResult<ValidationErrors> = ValidationErrors | undefined;\n\nexport type ValidationFunction<ValidationErrors> = (value: any) => ValidationResult<ValidationErrors>;\n","import { IntlShape } from 'react-intl';\nimport { CustomFormErrorHandler, FieldErrorHandler } from '../types';\nimport { isIntlErrorObject, ValidationError } from './types';\n\nconst createFieldErrorIntlKey = (error: string, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nconst getFieldErrorHandler = (intl: IntlShape, errorPrefix?: string): FieldErrorHandler<ValidationError> => (\n    error: ValidationError,\n    fieldName: string\n) => {\n    return isIntlErrorObject(error)\n        ? intl.formatMessage(\n              { id: error.keepKeyUnaltered ? error.key : createFieldErrorIntlKey(error.key, fieldName, errorPrefix) },\n              error.values\n          )\n        : intl.formatMessage({ id: createFieldErrorIntlKey(error, fieldName, errorPrefix) });\n};\n\nconst getIntlFormErrorHandler = (intl: IntlShape, errorPrefix?: string): CustomFormErrorHandler<ValidationError> => ({\n    fieldErrorHandler: getFieldErrorHandler(intl, errorPrefix),\n    isHandledErrorTypeFunc: isIntlErrorObject,\n});\n\nexport default getIntlFormErrorHandler;\n","import React from 'react';\n\nconst Question: React.FunctionComponent = ({ children }) => <div style={{ marginBottom: '2rem' }}>{children}</div>;\n\nexport default Question;\n","import React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\ninterface Props {\n    columns?: 1 | 2 | 3 | 'flex';\n}\n\nconst Tiles: React.FunctionComponent<Props> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { dateToISOString, getTypedFormComponents, ISOStringToDate } from '../../../../typed-formik-form';\nimport { getDateRangeValidator } from '../../../../typed-formik-form/validation';\nimport getDateValidator from '../../../../typed-formik-form/validation/getDateValidator';\nimport getListValidator, { ValidateListError } from '../../../../typed-formik-form/validation/getListValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { Ferieland, Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Ferieuttak;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n    land = 'land',\n}\n\ninterface FormValues extends Omit<Ferieuttak, 'fom' | 'tom'> {\n    fom: string;\n    tom: string;\n}\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues, ValidationError>();\n\nconst mapFerieuttakToFormValues = (ferieuttak: Ferieuttak): FormValues => ({\n    ...ferieuttak,\n    land: [...(ferieuttak.land || [])],\n    fom: dateToISOString(ferieuttak.fom),\n    tom: dateToISOString(ferieuttak.tom),\n});\n\nconst mapFormValuesToFerieuttak = (values: Partial<FormValues>): Ferieuttak | undefined => {\n    const fom = ISOStringToDate(values.fom);\n    const tom = ISOStringToDate(values.tom);\n    if (fom && tom) {\n        return {\n            ...values,\n            land: [...(values.land || [])],\n            fom,\n            tom,\n        };\n    }\n    return undefined;\n};\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak,\n    alleFerieuttak = [],\n    onSubmit,\n    onCancel,\n}) => {\n    const onFormikSubmit = (formValues: Partial<FormValues>) => {\n        const ferieuttak = mapFormValuesToFerieuttak(formValues);\n        if (ferieuttak && isFerieuttak(ferieuttak)) {\n            onSubmit(ferieuttak);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n    const intl = useIntl();\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n    const initialValues = ferieuttak ? mapFerieuttakToFormValues(ferieuttak) : undefined;\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues || {}}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getIntlFormErrorHandler(intl, 'ferieForm')}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={FerieuttakFormFields.land}\n                            legend={'Hvilket land'}\n                            checkboxes={[\n                                {\n                                    value: Ferieland.Norge,\n                                    label: 'Norge',\n                                },\n                                {\n                                    value: Ferieland.Sverige,\n                                    label: 'Sverige',\n                                },\n                                {\n                                    value: Ferieland.Danmark,\n                                    label: 'Danmark',\n                                },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                switch (error) {\n                                    case undefined:\n                                        return undefined;\n                                    case ValidateListError.listIsEmpty:\n                                        return 'listIsEmpty';\n                                }\n                            }}\n                        />\n                        <Box margin=\"xl\">\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    minDate,\n                                    maxDate: maxDate || formik.values.tom,\n                                    disabledDateRanges: alleFerieuttak\n                                        .filter((f) => (ferieuttak ? ferieuttak.id !== f.id : true))\n                                        .map((f) => ({ from: f.fom, to: f.tom })),\n                                    validate: (value) => {\n                                        const error = getDateValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                        })(value);\n                                        return error;\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    minDate: minDate || formik.values.fom,\n                                    maxDate,\n                                    validate: getDateRangeValidator({\n                                        fromDate: ISOStringToDate(formik.values.fom),\n                                        min: minDate,\n                                        max: maxDate,\n                                        required: true,\n                                    }).validateToDate,\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </Box>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '../../../../typed-formik-form';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { TypedFormInputValidationProps } from '../../../../typed-formik-form/types';\n\ninterface Props<FieldName> extends TypedFormInputValidationProps<FieldName, string> {\n    name: FieldName;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldName>({ name, minDate, maxDate, validate, labels }: Props<FieldName>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldName, Ferieuttak, string>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate ? (value) => validate(value, name) : undefined}\n                sortFunc={sortItemsByFom}\n                maxItems={1}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        alleFerieuttak={allItems}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\nimport { Ferieuttak } from './ferieuttak-example';\n\nexport enum FormFields {\n    'nameGroup' = 'nameGroup',\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'dateinterval_from' = 'dateinterval_from',\n    'dateinterval_to' = 'dateinterval_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak',\n    'letters' = 'letters',\n    'fødselsnummer' = 'fødselsnummer',\n    'datastruktur' = 'objekt',\n    'barnetsFødselsnummer' = 'barnetsFødselsnummer',\n    'friends' = 'friends',\n}\n\nexport interface CompletedFormValues {\n    [FormFields.nameGroup]: string;\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: string;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: string;\n    [FormFields.daterange_to]?: string;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: Ferieuttak[];\n    [FormFields.letters]?: string[];\n    [FormFields.friends]: Friend[];\n    [FormFields.fødselsnummer]: string;\n    [FormFields.datastruktur]: {\n        navn: string;\n    };\n    [FormFields.barnetsFødselsnummer]: string;\n}\nexport interface Person {\n    name: string;\n}\nexport interface Friend extends Person {\n    siblings: Person[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","import React from 'react';\nimport { FieldArray } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { FormikInput } from '../../../../typed-formik-form';\nimport { getStringValidator } from '../../../../typed-formik-form/validation';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { hasValue } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport { Friend } from '../types';\n\ninterface Props {\n    fieldName: string;\n    friend: Friend;\n}\n\nconst Siblings: React.FunctionComponent<Props> = ({ fieldName, friend }) => {\n    const { siblings } = friend;\n    return (\n        <FieldArray\n            name={fieldName}\n            render={(arrayHelpers) => (\n                <div>\n                    {siblings &&\n                        siblings.length > 0 &&\n                        siblings.map((_sibling, index) => (\n                            <div key={index}>\n                                <Question>\n                                    <FormikInput\n                                        type=\"text\"\n                                        label=\"Søskens navn\"\n                                        name={`${fieldName}.${index}.name` as any}\n                                        validate={(values) => {\n                                            const error = getStringValidator({ required: true })(values);\n                                            if (error) {\n                                                const intlErr: ValidationError = {\n                                                    key: 'søskennavn.mangler',\n                                                    values: {\n                                                        navn: hasValue(friend.name) ? friend.name : ` venn ${index}`,\n                                                    },\n                                                };\n                                                return intlErr;\n                                            }\n                                        }}\n                                    />\n                                </Question>\n                            </div>\n                        ))}\n                    <Box>\n                        <Knapp htmlType=\"button\" mini={true} onClick={() => arrayHelpers.push('')}>\n                            Legg til søsken\n                        </Knapp>\n                    </Box>\n                </div>\n            )}\n        />\n    );\n};\n\nexport default Siblings;\n","import { YesOrNo } from '../../../typed-formik-form';\n\nexport enum FormFields {\n    'jaNeiSpørsmål' = 'jaNeiSpørsmål',\n    'tall' = 'tall',\n    'tekst' = 'tekst',\n    'fødselsnummer' = 'fødselsnummer',\n    'dato' = 'dato',\n    'tidsperiode_fra' = 'tidsperiode_fra',\n    'tidsperiode_til' = 'tidsperiode_til',\n    'orgnummer' = 'orgnummer',\n    'liste' = 'liste',\n    'radio' = 'radio',\n    'select' = 'select',\n    'checked' = 'checked',\n}\n\nexport interface FormValues {\n    [FormFields.jaNeiSpørsmål]?: YesOrNo;\n    [FormFields.tall]?: string;\n    [FormFields.tekst]?: string;\n    [FormFields.fødselsnummer]?: string;\n    [FormFields.dato]?: string;\n    [FormFields.tidsperiode_fra]?: string;\n    [FormFields.tidsperiode_til]?: string;\n    [FormFields.orgnummer]?: string;\n    [FormFields.liste]?: string[];\n    [FormFields.select]?: string;\n    [FormFields.radio]?: string;\n    [FormFields.checked]?: boolean;\n}\n\nexport const initialValues = {};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FormikDateIntervalPicker, FormikFileInput, FormikInput, ISOStringToDate } from '../../../../typed-formik-form';\nimport FormikDateRangePicker from '../../../../typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker';\nimport FormikTimeInput from '../../../../typed-formik-form/components/formik-time-input/FormikTimeInput';\nimport { getTypedFormComponents } from '../../../../typed-formik-form/components/getTypedFormComponents';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n} from '../../../../typed-formik-form/validation';\nimport getRequiredFieldValidator from '../../../../typed-formik-form/validation/getRequiredFieldValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { validateAll } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport Tiles from '../../../components/tiles/Tiles';\nimport FerieuttakListAndDialog from '../ferieuttak-example/FerieuttakListAndDialog';\nimport { FormFields, FormValues } from '../types';\nimport Friends from './Friends';\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst TypedFormExample = () => {\n    const { values } = useFormikContext<FormValues>();\n    const { setFieldValue } = useFormikContext<FormValues>();\n    const intl = useIntl();\n    const minDate = dayjs().subtract(2, 'month').toDate();\n    const maxDate = dayjs().add(1, 'month').toDate();\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            includeButtons={true}\n            formErrorHandler={getIntlFormErrorHandler(intl)}>\n            <Question>\n                <Form.YesOrNoQuestion\n                    legend={'Har du kids'}\n                    name={FormFields.hasKids}\n                    validate={(value) => {\n                        const err = getYesOrNoValidator()(value);\n                        if (err) {\n                            return {\n                                key: err,\n                                values: { question: 'spørsmålet om antall barn' },\n                                keepKeyUnaltered: false,\n                            };\n                        }\n                    }}\n                />\n            </Question>\n            <Question>\n                <Form.Input\n                    name={FormFields.fødselsnummer}\n                    label=\"Fødselsnummer\"\n                    validate={(value) =>\n                        validateAll<ValidationError>([\n                            () => getStringValidator({ minLength: 2 })(value),\n                            () => getFødselsnummerValidator({ required: true })(value),\n                        ])\n                    }\n                />\n            </Question>\n            <Question>\n                <FormikDateRangePicker\n                    legend=\"DateRangePicker\"\n                    disableWeekend={true}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    fromInputProps={{\n                        name: FormFields.daterange_from,\n                        label: 'Fra',\n                    }}\n                    toInputProps={{\n                        name: FormFields.daterange_to,\n                        label: 'Til',\n                    }}\n                />\n            </Question>\n\n            {1 + 1 === 3 && (\n                <>\n                    <Question>\n                        <Form.Input\n                            name={'datastruktur.navn' as any}\n                            label=\"Datastrukturnavn\"\n                            validate={(value) => {\n                                const error = getStringValidator({ minLength: 2, required: true })(value);\n                                if (error) {\n                                    return {\n                                        key: 'abc',\n                                        values: { s: 2 },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            type=\"text\"\n                            label=\"Fornavn\"\n                            name={FormFields.firstname}\n                            validate={getRequiredFieldValidator()}\n                        />\n                    </Question>{' '}\n                    <Question>\n                        <Form.Input\n                            name={FormFields.barnetsFødselsnummer}\n                            label=\"Barnets fødselsnummer\"\n                            validate={(value) => {\n                                const error = getFødselsnummerValidator({\n                                    required: true,\n                                    disallowedValues: values.fødselsnummer ? [values.fødselsnummer] : undefined,\n                                })(value);\n                                if (error === ValidateFødselsnummerError.fødselsnummerIsNotAllowed) {\n                                    return {\n                                        key: 'fødselsnummer.fødselsnummerIsNotAllowed',\n                                        values: {\n                                            info: ' (du har tastet inn ditt eget fødselsnummer)',\n                                        },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Box margin=\"xl\">\n                        <Box margin=\"l\" padBottom=\"l\">\n                            <Undertittel>Venner</Undertittel>\n                        </Box>\n                        <Question>\n                            <Friends fieldName=\"friends\" friends={values.friends || []} />\n                        </Question>\n                    </Box>\n                    <Question>\n                        <FerieuttakListAndDialog\n                            name={FormFields.ferieuttak}\n                            labels={{\n                                addLabel: 'Legg til',\n                                modalTitle: 'Ferieuttak',\n                                listTitle: 'Ferieuttak',\n                            }}\n                            minDate={dayjs().subtract(1, 'year').toDate()}\n                            maxDate={dayjs().add(1, 'year').toDate()}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CheckboxPanelGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            checkboxes={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                if (error === ValidateListError.listIsEmpty) {\n                                    return {\n                                        key: error,\n                                        values: { value: 'inserted value' },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker\n                            name={FormFields.birthdate}\n                            label=\"Fødselsdato\"\n                            validate={getDateValidator({ required: true })}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.CountrySelect name={FormFields.birthCountry} label=\"Fødselsland\" useAlpha3Code={true} />\n                    </Question>\n                    <Question>\n                        <Tiles columns={2}>\n                            <Form.Input\n                                name={FormFields.firstname}\n                                label=\"Fornavn\"\n                                validate={getRequiredFieldValidator()}\n                            />\n                            <Form.Input\n                                name={FormFields.lastname}\n                                label=\"Etternavn\"\n                                validate={getRequiredFieldValidator()}\n                            />\n                        </Tiles>\n                    </Question>\n                    <Question>\n                        <div style={{ display: 'flex', flex: 'flex-start' }}>\n                            <FormikTimeInput name={FormFields.time} label=\"Tidspunkt\" />\n                        </div>\n                    </Question>\n                    <Question>\n                        <FormikDateIntervalPicker\n                            legend=\"DateIntervalPicker (test)\"\n                            fromDatepickerProps={{\n                                name: FormFields.dateinterval_from,\n                                label: 'Fra',\n                                maxDate: ISOStringToDate(values.daterange_to),\n                                validate: getRequiredFieldValidator(),\n                            }}\n                            toDatepickerProps={{\n                                name: FormFields.dateinterval_to,\n                                label: 'Til',\n                                minDate: ISOStringToDate(values.daterange_from),\n                                validate: getRequiredFieldValidator(),\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikFileInput\n                            name={FormFields.files}\n                            label=\"Legg til filer\"\n                            acceptedExtensions={'tsx'}\n                            onFilesSelect={() => null}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.Input\n                            label=\"Oppgi hvor mange timer i snitt per uke, har barnet tilsyn?\"\n                            name={FormFields.firstname}\n                            suffixStyle=\"text\"\n                            suffix=\"Timer\"\n                            bredde=\"S\"\n                            maxLength={5}\n                            validate={(value) => {\n                                const error = getNumberValidator({ min: 0, max: 20000 })(value);\n                                if (error === ValidateNumberError.numberIsTooLarge) {\n                                    return {\n                                        key: error,\n                                        values: { max: 20000 },\n                                    };\n                                }\n                                if (error === ValidateNumberError.numberIsTooSmall) {\n                                    return {\n                                        key: error,\n                                        values: { min: 0 },\n                                    };\n                                }\n                                return error;\n                            }}\n                        />\n                    </Question>\n                    <Question>\n                        <FormikInput type=\"tel\" label=\"Et tall\" name={'number'} />\n                    </Question>\n                    <Question>\n                        <Form.RadioGroup\n                            legend={'Velg en bokstav'}\n                            name={FormFields.letters}\n                            radios={[\n                                { label: 'a', value: 'a' },\n                                { label: 'b', value: 'b' },\n                                { label: 'c', value: 'c' },\n                            ]}\n                            validate={getRequiredFieldValidator()}\n                        />\n                    </Question>\n                    <Question>\n                        <Form.DatePicker name={FormFields.birthdate} label=\"Fødselsdato\" />\n                    </Question>\n                    <Knapp\n                        htmlType=\"button\"\n                        onClick={() => {\n                            setFieldValue(FormFields.birthdate, '2000-10-2');\n                        }}>\n                        Sett ugyldig dato\n                    </Knapp>\n                </>\n            )}\n        </Form.Form>\n    );\n};\n\nexport default TypedFormExample;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport TypedFormExample from './typed-form-example/TypedFormExample';\nimport { FormValues } from './types';\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            id: '1',\n            fom: new Date(),\n            tom: dayjs().add(1, 'month').toDate(),\n            land: [],\n        },\n        {\n            id: '2',\n            fom: dayjs().add(1, 'month').toDate(),\n            tom: dayjs().add(2, 'month').toDate(),\n            land: [],\n        },\n    ],\n    friends: [],\n    letters: [],\n};\n\nconst FormikExample = () => {\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>TypedFormExample</h2>\n                <p>Skjemaet her er mest brukt som arbeidsflate for å teste komponentene under utvikling.</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={() => (\n                    <Panel>\n                        <TypedFormExample />\n                    </Panel>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport Box from '../box/Box';\nimport './validationErrorList.less';\n\ninterface ValidationErrorInfo {\n    info: string;\n    example?: string;\n}\n\nexport type ValidationErrors = {\n    [key: string]: ValidationErrorInfo;\n};\n\ninterface Props {\n    errors: ValidationErrors;\n    title: string;\n}\n\nconst ValidationErrorList = ({ errors, title }: Props) => {\n    return (\n        <Box margin=\"xl\">\n            {title && <Element tag=\"h4\">{title}</Element>}\n            <Box margin=\"m\">\n                <table className=\"validationErrorList\">\n                    <thead>\n                        <tr>\n                            <th>Feil</th>\n                            <th>Beskrivelse</th>\n                            <th>Eksempel</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.keys(errors).map((key) => {\n                            return (\n                                <tr key={key}>\n                                    <th>\n                                        <code>{key}</code>\n                                    </th>\n                                    <td key=\"info\">{errors[key].info}</td>\n                                    <td key=\"example\">{errors[key].example}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </Box>\n        </Box>\n    );\n};\n\nexport default ValidationErrorList;\n","import React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Tabs from 'nav-frontend-tabs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport Box from '../../components/box/Box';\nimport { hasValue } from '../../../typed-formik-form/validation/validationUtils';\n\ninterface Props {\n    title: string;\n    functionName?: string;\n    code?: string;\n}\n\nconst ValideringPanel: React.FunctionComponent<Props> = ({ title, children, code }) => {\n    const [activePanel, setActivePanel] = useState(0);\n    return (\n        <div style={{ marginBottom: '4rem' }}>\n            <Systemtittel tag=\"h3\">{title}</Systemtittel>\n            <Box margin=\"l\">\n                {hasValue(code) && (\n                    <Tabs\n                        tabs={[{ label: 'Eksempel' }, { label: 'Kode' }]}\n                        onChange={(_evt, idx) => setActivePanel(idx)}\n                    />\n                )}\n                {activePanel === 0 && <>{children}</>}\n                {activePanel === 1 && (\n                    <SyntaxHighlighter language=\"typescript\" style={docco}>\n                        {code}\n                    </SyntaxHighlighter>\n                )}\n            </Box>\n        </div>\n    );\n};\nexport default ValideringPanel;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(utc);\ndayjs.extend(isBetween);\n\nimport { ApiStringDate } from '../types/ApiStringDate';\n\nconst apiDateFormat = 'YYYY-MM-DD';\nconst prettyDateFormat = 'DD.MM.YYYY';\nconst prettyDateFormatExtended = 'DD. MMM YYYY';\n\nexport const formatDateToApiFormat = (date: Date): ApiStringDate => {\n    const apiFormattedDate = dayjs(date).format(apiDateFormat);\n    return apiFormattedDate;\n};\nexport const prettifyDate = (date: Date): string => dayjs(date).format(prettyDateFormat);\nexport const prettifyDateExtended = (date: Date) => dayjs(date).format(prettyDateFormatExtended);\nexport const apiStringDateToDate = (date: ApiStringDate): Date => dayjs(date, apiDateFormat).toDate();\n\nexport const isMoreThan3YearsAgo = (date: Date) => dayjs(date).isBefore(date3YearsAgo);\n\nexport const dateToISOFormattedDateString = (date?: Date) => (date ? dayjs.utc(date).format(apiDateFormat) : undefined);\n\nexport const date10MonthsAgo = dayjs().subtract(10, 'month').startOf('day').toDate();\n\nexport const date1YearAgo = dayjs().subtract(1, 'year').startOf('day').toDate();\n\nexport const date4YearsAgo = dayjs().subtract(4, 'year').startOf('day').toDate();\n\nexport const date3YearsAgo = dayjs().subtract(3, 'year').startOf('day').toDate();\n\nexport const date4WeeksAgo = dayjs().subtract(4, 'week').startOf('day').toDate();\n\nexport const date1YearFromNow = dayjs().add(1, 'year').endOf('day').toDate();\n\nexport const dateToday = dayjs().toDate();\n\nexport const sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\nexport const sortOpenDateRange = (d1: OpenDateRange, d2: OpenDateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport interface OpenDateRange {\n    from: Date;\n    to?: Date;\n}\n\nexport const dateRangesCollide = (ranges: DateRange[]): boolean => {\n    if (ranges.length > 0) {\n        const sortedDates = ranges.sort(sortDateRange);\n        const hasOverlap = ranges.find((d, idx) => {\n            if (idx < sortedDates.length - 1) {\n                return dayjs(d.to).isAfter(sortedDates[idx + 1].from);\n            }\n            return false;\n        });\n        return hasOverlap !== undefined;\n    }\n    return false;\n};\n\nexport const dateRangesExceedsRange = (ranges: DateRange[], allowedRange: DateRange): boolean => {\n    if (ranges.length === 0) {\n        return false;\n    }\n    const sortedRanges = ranges.sort(sortDateRange);\n    const from = sortedRanges[0].from;\n    const to = sortedRanges[sortedRanges.length - 1].to;\n\n    if (\n        !dayjs(from).isBetween(allowedRange.from, allowedRange.to, 'day', '[]') ||\n        !dayjs(to).isBetween(allowedRange.from, allowedRange.to, 'day', '[]')\n    ) {\n        return true;\n    }\n    return false;\n};\n\ninterface ItemWithFomTom {\n    fom: Date;\n    tom: Date;\n}\n\ninterface ItemWithFom {\n    fom: Date;\n}\n\nexport const sortItemsByFomTom = (a: ItemWithFomTom, b: ItemWithFomTom) =>\n    sortDateRange({ from: a.fom, to: a.fom }, { from: b.fom, to: b.tom });\n\nexport const sortItemsByFom = (a: ItemWithFom, b: ItemWithFom) => sortOpenDateRange({ from: a.fom }, { from: b.fom });\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { getTypedFormComponents } from '../../../typed-formik-form';\nimport datepickerUtils from '../../../typed-formik-form/components/formik-datepicker/datepickerUtils';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport {\n    getCheckedValidator,\n    getDateRangeValidator,\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateCheckedError,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '../../../typed-formik-form/validation';\nimport getIntlFormErrorHandler from '../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../typed-formik-form/validation/types';\nimport Box from '../../components/box/Box';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport ValidationErrorList from '../../components/validation-errors/ValidationErrorList';\nimport { FormFields, FormValues } from './types';\nimport ValideringPanel from './ValideringPanel';\nimport { dateToday } from '../../utils/dateUtils';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\n\nconst initialValues: FormValues = {\n    liste: [],\n};\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst ValideringExample = () => {\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>Validering</h2>\n                <p>sif-common-formik komponenter med validering</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={(formik) => {\n                    const fromDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_fra);\n                    const toDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_til);\n                    return (\n                        <Form.Form\n                            submitButtonLabel=\"Ok\"\n                            includeValidationSummary={true}\n                            includeButtons={true}\n                            formErrorHandler={getIntlFormErrorHandler(intl)}>\n                            <ValideringPanel\n                                title=\"Ja/Nei\"\n                                code={`\nexport enum ValidateYesOrNoError {\nyesOrNoIsUnanswered = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult =\n| ValidateYesOrNoError.yesOrNoIsUnanswered\n| undefined;\n\nconst error = getYesOrNoValidator()(value);\n                    `}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.jaNeiSpørsmål}\n                                        legend=\"Har du søkt om andre ytelser i perioden du søker for?\"\n                                        validate={getYesOrNoValidator()}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateYesOrNoError.yesOrNoIsUnanswered]: {\n                                            info: 'spørsmål er ikke besvart',\n                                            example:\n                                                'Du må svare ja eller nei på om du har søkt andre ytelser i perioden du søker for',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n\n                            <ValideringPanel\n                                title=\"Fritekst\"\n                                code={`\nexport enum ValidateStringError {\n    stringHasNoValue = 'stringHasNoValue',\n    stringIsNotAString = 'stringIsNotAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateStringError.stringHasNoValue\n    | ValidateStringError.stringIsNotAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ntype Options = {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst error = getStringValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.tekst}\n                                        label=\"Hva er navnet på dagen i dag? Bruk mellom 5 og 20 tegn\"\n                                        bredde=\"L\"\n                                        validate={getStringValidator({\n                                            required: true,\n                                            maxLength: 20,\n                                            minLength: 5,\n                                        })}></Form.Input>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateStringError.stringHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Skriv inn hvilken dag det er i dag',\n                                        },\n                                        [ValidateStringError.stringIsNotAString]: {\n                                            info: 'feil type data',\n                                            example: 'Navnet på dagen i dag er ikke gyldig',\n                                        },\n                                        [ValidateStringError.stringIsTooLong]: {\n                                            info: 'for lang tekst',\n                                            example: 'Navnet på dagen i dag kan ikke inneholde flere enn 20 tegn.',\n                                        },\n                                        [ValidateStringError.stringIsTooShort]: {\n                                            info: 'for kort tekst',\n                                            example: 'Navnet på dagen i dag må inneholde minst 5 tegn',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Tall\"\n                                code={`\nexport enum ValidateNumberError {\n    numberHasNoValue = 'numberHasNoValue',\n    numberHasInvalidFormat = 'numberHasInvalidFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateNumberError.numberHasNoValue\n    | ValidateNumberError.numberHasInvalidFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst error = getNumberValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.NumberInput\n                                        name={FormFields.tall}\n                                        label=\"Hva er næringsinntekten for virksomheten?\"\n                                        bredde=\"S\"\n                                        validate={getNumberValidator({\n                                            required: true,\n                                            min: 1999,\n                                            max: 2021,\n                                        })}></Form.NumberInput>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateNumberError.numberHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Du må oppgi næringsinntekt for virksomheten',\n                                        },\n                                        [ValidateNumberError.numberHasInvalidFormat]: {\n                                            info: 'verdien er ikke et tall',\n                                            example:\n                                                'Du må oppgi et gyldig tall for næringsinntekten i virksomheten. Et gyldig tall inneholder kun siffer.',\n                                        },\n                                        [ValidateNumberError.numberIsTooSmall]: {\n                                            info: 'for lavt tall',\n                                            example: `Tallet du har oppgitt som næringsinntekt for virksomheten er for lavt. Tallet kan ikke være lavere enn 0.`,\n                                        },\n                                        [ValidateNumberError.numberIsTooLarge]: {\n                                            info: 'for stort tall',\n                                            example: `Tallet du har oppgitt som næringsinntekt for virksomheten er for høyt. Tallet kan ikke være høyere enn 99999999.`,\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Dato\"\n                                code={`\nexport enum ValidateDateError {\n    dateHasNoValue = 'dateHasNoValue',\n    dateHasInvalidFormat = 'dateHasInvalidFormat',\n    dateIsBeforeMin = 'dateIsBeforeMin',\n    dateIsAfterMax = 'dateIsAfterMax',\n    dateIsNotWeekday = 'dateIsNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateDateError.dateHasNoValue\n    | ValidateDateError.dateHasInvalidFormat\n    | ValidateDateError.dateIsBeforeMin\n    | ValidateDateError.dateIsAfterMax\n    | ValidateDateError.dateIsNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst error = getDateValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.DatePicker\n                                        name={FormFields.dato}\n                                        label={\n                                            'Når startet du i arbeidslivet? Dersom dette var en lørdag eller søndag, velg påfølgende mandag.'\n                                        }\n                                        showYearSelector={true}\n                                        validate={getDateValidator({\n                                            required: true,\n                                            min: new Date(2015, 0, 1),\n                                            max: dateToday,\n                                            onlyWeekdays: true,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateDateError.dateHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example:\n                                                'Du må oppgi dato for når du begynte i arbeidslivet. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                        [ValidateDateError.dateHasInvalidFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Du må oppgi dato for når du begynte i arbeidslivet i et gyldig format. Gyldig format er dd.mm.åååå.',\n                                        },\n                                        [ValidateDateError.dateIsBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: `Datoen for når du begynte i arbeidslivet kan ikke være før ${prettifyDate(\n                                                new Date(2015, 0, 1)\n                                            )}. Skriv inn eller velg dato fra datovelgeren.`,\n                                        },\n                                        [ValidateDateError.dateIsAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example:\n                                                'Datoen for når du begynte i arbeidslivet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Periodevelger\"\n                                code={`\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface Options extends DateValidationOptions {\n    fromDate?: Date;\n    toDate?: Date;\n}\n\nconst errorFromDate = getDateRangeValidator(options).validateFromDate(value);\nconst errorToDate = getDateRangeValidator(options).validateToDate(value);\n                                `}>\n                                <Panel>\n                                    <Form.DateRangePicker\n                                        legend=\"Når startet og avsluttet du virksomheten?\"\n                                        fromInputProps={{\n                                            label: 'Startdato',\n                                            name: FormFields.tidsperiode_fra,\n                                            dayPickerProps: { initialMonth: new Date(2021, 0, 1) },\n                                            validate: getDateRangeValidator({\n                                                min: new Date(2021, 0, 1),\n                                                max: new Date(2021, 11, 31),\n                                                toDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }).validateFromDate,\n                                        }}\n                                        toInputProps={{\n                                            label: 'Sluttdato',\n                                            name: FormFields.tidsperiode_til,\n                                            dayPickerProps: { initialMonth: new Date(2021, 11, 31) },\n                                            validate: getDateRangeValidator({\n                                                min: new Date(2000, 0, 1),\n                                                max: dateToday,\n                                                fromDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }).validateToDate,\n                                        }}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger - Startdato\"\n                                    errors={{\n                                        [ValidateDateError.dateHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example:\n                                                'Du må oppgi hvilken dato du startet virksomheten. Skriv inn eller velg startdato fra datovelgeren.',\n                                        },\n                                        [ValidateDateError.dateHasInvalidFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Du må oppgi startdato for virksomheten i et gyldig format. Gyldig format er dd.mm.ååå.',\n                                        },\n                                        [ValidateDateError.dateIsBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: `Startdatoen for når du startet virksomheten kan ikke være før ${prettifyDate(\n                                                new Date(2000, 0, 1)\n                                            )}. Skriv inn eller velg startdato fra datovelgeren.`,\n                                        },\n                                        [ValidateDateError.dateIsAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example:\n                                                'Startdatoen for når du startet virksomhetem må være før dagens dato. Skriv inn eller velg startdato fra datovelgeren.',\n                                        },\n                                        [ValidateDateRangeError.fromDateIsAfterToDate]: {\n                                            info: 'fra-dato er etter til-dato',\n                                            example:\n                                                'Startdatoen for når du startet virksomheten må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                    }}\n                                />\n                                <Box margin=\"xl\">\n                                    <ValidationErrorList\n                                        title=\"Feilmeldinger - Sluttdato\"\n                                        errors={{\n                                            [ValidateDateError.dateHasNoValue]: {\n                                                info: 'ingen verdi',\n                                                example:\n                                                    'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n                                            },\n                                            [ValidateDateError.dateHasInvalidFormat]: {\n                                                info: 'ugyldig verdi',\n                                                example:\n                                                    'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n                                            },\n                                            [ValidateDateError.dateIsBeforeMin]: {\n                                                info: 'dato er for tidlig',\n                                                example: `Sluttdatoen for når du avsluttet virksomheten kan ikke være før ${prettifyDate(\n                                                    new Date(2000, 0, 1)\n                                                )}. Skriv inn eller velg sluttdato fra datovelgeren.`,\n                                            },\n                                            [ValidateDateError.dateIsAfterMax]: {\n                                                info: 'dato er for sen',\n                                                example:\n                                                    'Sluttdatoen for når du avsluttet virksomhetem må være før dagens dato. Skriv inn eller velg sluttdato fra datovelgeren.',\n                                            },\n                                            [ValidateDateRangeError.toDateIsBeforeFromDate]: {\n                                                info: 'fra-dato er etter til-dato',\n                                                example:\n                                                    'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n                                            },\n                                        }}\n                                    />\n                                </Box>\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Norsk fødselsnummer/D-nummer\"\n                                code={`\nexport enum ValidateFødselsnummerError {\n    fødselsnummerHasNoValue = 'fødselsnummerHasNoValue',\n    fødselsnummerIsNot11Chars = 'fødselsnummerIsNot11Chars',\n    fødselsnummerIsInvalid = 'fødselsnummerIsInvalid',\n    fødselsnummerIsNotAllowed = 'fødselsnummerIsNotAllowed',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateFødselsnummerError.fødselsnummerHasNoValue\n    | ValidateFødselsnummerError.fødselsnummerIsNotAllowed\n    | ValidateFødselsnummerError.fødselsnummerIsNot11Chars\n    | ValidateFødselsnummerError.fødselsnummerIsInvalid\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    /** Andre fødselsnumre som ikke er gyldig - f.eks søkers fødselsnummer */\n    disallowedValues?: string[];\n}\n\nconst error = getFødselsnummerValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.fødselsnummer}\n                                        bredde=\"M\"\n                                        description={\n                                            'Eksempelfødselsnummeret \"19081988075\" er ditt eget, og er ikke tillatt'\n                                        }\n                                        label=\"Hva er barnets fødselsnummer / D-nummer?\"\n                                        validate={getFødselsnummerValidator({\n                                            required: true,\n                                            disallowedValues: ['19081988075'],\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example: 'Skriv inn barnets fødselsnummer',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Du har oppgitt et ugyldig fødselsnummer som ikke består av 11 siffer. Et gyldig fødselsnummer består av 11 siffer.',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]: {\n                                            info: 'ikke tillatt fødselsnummer',\n                                            example:\n                                                'Du har oppgitt ditt eget fødselsnummer som barnets fødselsnummer. Skriv inn barnets fødselsnummer.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Organisasjonsnummer\"\n                                code={`\nexport enum ValidateOrgNumberError {\n    orgNumberHasNoValue = 'orgNumberHasNoValue',\n    orgNumberHasInvalidFormat = 'orgNumberHasInvalidFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateOrgNumberError.orgNumberHasNoValue\n    | ValidateOrgNumberError.orgNumberHasInvalidFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst error = getOrgNumberValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.orgnummer}\n                                        legend=\"Hva er NAVs organisasjonsnummer\"\n                                        validate={getOrgNumberValidator({ required: true })}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateOrgNumberError.orgNumberHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example:\n                                                'Skriv inn organisasjonsnummeret. Et gyldig organsisasjonsnummer inneholder 9 siffer',\n                                        },\n                                        [ValidateOrgNumberError.orgNumberHasInvalidFormat]: {\n                                            info: 'ugyldig orgnummer',\n                                            example:\n                                                'Du har oppgitt et ugyldig organisasjonsnummer. Oppgi et gyldig organsisasjonsnummer som inneholder 9 siffer.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Flervalgsliste\"\n                                code={`\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ntype ListValidationResult = undefined | ValidateListError;\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst error = getListValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.CheckboxPanelGroup\n                                        name={FormFields.liste}\n                                        legend=\"Velg dine 2 eller 3 favorittfrukter\"\n                                        checkboxes={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getListValidator({\n                                            required: true,\n                                            minItems: 2,\n                                            maxItems: 3,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateListError.listIsEmpty]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Velg dine 2 eller 3 favorittfrukter. Huk av i listen.',\n                                        },\n                                        [ValidateListError.listHasTooFewItems]: {\n                                            info: 'for få valgt',\n                                            example: 'Du har valgt for få frukter. Du må velge minst 2 frukter.',\n                                        },\n                                        [ValidateListError.listHasTooManyItems]: {\n                                            info: 'for mange valgt',\n                                            example:\n                                                'Du har valgt for mange frukter. Du kan ikke velge flere enn 3 frukter.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Enkeltvalg - radioknapper\"\n                                code={`\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst error = getRequiredFieldValidator()(value);\n`}>\n                                <Panel>\n                                    <Form.RadioPanelGroup\n                                        name={FormFields.radio}\n                                        legend=\"Velg din éne favorittfrukt\"\n                                        radios={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Du må velge din éne favorittfrukt. Huk av i listen.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Enkeltvalg i liste\"\n                                code={`\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst error = getRequiredFieldValidator()(value);\n`}>\n                                <p>Samme valideringslogikk som for en radioliste</p>\n                                <Panel>\n                                    <Form.CountrySelect\n                                        name={FormFields.select}\n                                        label=\"Hvilket land er virksomheten registrert i?\"\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ikke valgt',\n                                            example:\n                                                'Du må velge hvilket land virksomheten din er registrert i. Velg land fra listen.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Avkrysningsvalg\"\n                                code={`\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\ntype CheckedValidationResult = ValidateCheckedError | undefined;\n\nconst error = getCheckedValidator()(value);\n                            `}>\n                                <Panel>\n                                    <Form.Checkbox\n                                        name={FormFields.checked}\n                                        label=\"Kryss av for at du bare må krysse av denne checkboxen\"\n                                        validate={getCheckedValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateCheckedError.notChecked]: {\n                                            info: 'ikke valgt',\n                                            example: 'Du må krysse av for at du bare må gjøre det',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default ValideringExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"@navikt/sif-common-formik\">\n            <h2>Typed formik wrapper for nav-frontend-skjema + validering</h2>\n            <p>\n                Sett av skjema-komponenter laget for team brukerdialog i sykdom-i-familien. Komponentene gjør det\n                enklere og raskere å sette opp skjemaløsninger hvor en bruker typescript, formik og nav-frontend-skjema,\n                og som sørger for at oppførsel og utéendet blir likt på tvers av brukerdialogene. For flere detaljer, se\n                kode.\n            </p>\n\n            <h3>Validering</h3>\n            <p>\n                Det er laget et sett med valideringsfunksjoner som en kan bruke sammen med skjemakomponentene. Disse\n                finner du på{' '}\n                <a href=\"#validering\" className=\"lenke\">\n                    denne siden\n                </a>\n                .{' '}\n            </p>\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport ValideringExample from '../examples/validering-example/ValideringExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'formik-example',\n        title: 'TypedFormExample',\n        renderContent: () => <FormikExample />,\n    },\n    {\n        path: 'validering',\n        title: 'Validering',\n        renderContent: () => <ValideringExample />,\n    },\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = () => {\n    const {\n        location: { pathname },\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent: React.FunctionComponent<Props> = ({ history }) => {\n    const {\n        location: { pathname },\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <nav className=\"asideContent\">\n                <LeftMenu />\n            </nav>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\nconst DevPage = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel tag=\"h1\">sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import React from 'react';\nimport '@formatjs/intl-pluralrules/locale-data/en';\nimport '@formatjs/intl-pluralrules/locale-data/nb';\nimport '@formatjs/intl-pluralrules/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element, Feilmelding } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport './formikInputGroup.less';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<ErrorType, FieldName> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikInputGroup<ErrorType, FieldName>({\n    legend,\n    name,\n    feil,\n    children,\n    validate,\n    className,\n    ...restProps\n}: FormikInputGroupProps<ErrorType, FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const isRenderableErrorMsgType = ['string', 'object'].includes(typeof feilProp);\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        className={`${className ? className : ''} singleInputWrapper`}>\n                        {children}\n                        {/** Må sette inn denne selv pga feil på SkjemaGruppe påvirker styling av alle elementer i gruppen*/}\n                        <div\n                            aria-live=\"polite\"\n                            className={`formikInputGroup__error ${\n                                isRenderableErrorMsgType ? 'formikInputGroup__error--with-message' : ''\n                            }`}>\n                            <div tabIndex={-1} id={field.name} className=\"focusable-feilmelding\">\n                                {isRenderableErrorMsgType && (\n                                    <div>\n                                        <Feilmelding>{feilProp}</Feilmelding>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps, Label, SkjemaelementFeilmelding } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport { guid } from 'nav-frontend-js-utils';\nimport './formikInput.less';\nimport bemUtils from '../../utils/bemUtils';\n\nexport interface InputWithSuffix {\n    suffix?: string;\n    suffixStyle?: 'box' | 'text';\n}\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nconst bem = bemUtils('formikInput');\n\nfunction FormikInput<FieldName, ErrorType>({\n    name,\n    feil,\n    id = guid(),\n    suffix,\n    suffixStyle = 'box',\n    label,\n    description,\n    validate,\n    autoComplete,\n    ...restProps\n}: FormikInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const harFeil = feilProp !== undefined;\n                const feilMessageId = `feil-${id}`;\n                if (suffix === undefined) {\n                    return (\n                        <Input\n                            {...restProps}\n                            {...field}\n                            id={id}\n                            description={description}\n                            label={label}\n                            autoComplete={autoComplete || 'off'}\n                            feil={feilProp}\n                            value={field.value === undefined ? '' : field.value}\n                        />\n                    );\n                }\n                return (\n                    <div\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional('withSuffix', suffix !== undefined),\n                            bem.modifier(`suffixStyle--${suffixStyle}`),\n                            bem.modifierConditional('fullbredde', restProps.bredde === 'fullbredde')\n                        )}>\n                        <Label htmlFor={id}>{label}</Label>\n                        {description && <div className=\"skjemaelement__description\">{description}</div>}\n                        <div className={bem.element('inputWrapper')}>\n                            <Input\n                                {...restProps}\n                                {...field}\n                                id={id}\n                                autoComplete={autoComplete || 'off'}\n                                feil={harFeil}\n                                aria-errormessage={feilMessageId}\n                                value={field.value === undefined ? '' : field.value}\n                            />\n                            {suffix && (\n                                <span className={bem.element('suffix', suffixStyle)} aria-hidden={true}>\n                                    {suffix}\n                                </span>\n                            )}\n                        </div>\n                        <SkjemaelementFeilmelding id={`feil-${id}`}>\n                            {getFeilPropForFormikInput({ field, form, context, feil })}\n                        </SkjemaelementFeilmelding>\n                    </div>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(_evt, value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        radios={radios.map((rb) => {\n                            return {\n                                name: `${name}`,\n                                autoComplete: 'off',\n                                'aria-invalid': undefined,\n                                ...rb,\n                            };\n                        })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined) => void;\n\ninterface TimeInputProps {\n    time?: Time | Partial<Time> | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    onChange: TimeInputChangeFunc;\n    layout?: 'normal' | 'compact';\n}\n\nconst bem = bemUtils('timeInput');\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    if ((time.hours === undefined || isNaN(time.hours)) && (time.minutes === undefined || isNaN(time.minutes))) {\n        onChange(undefined);\n    } else {\n        onChange(time);\n    }\n};\n\nconst getNewTime = (\n    stateTime: Partial<Time> | undefined = {},\n    values: { hours?: string; minutes?: string }\n): Partial<Time> => {\n    if (values.hours !== undefined) {\n        const hours = parseInt(values.hours, 10);\n        if (!isNaN(hours)) {\n            return {\n                ...stateTime,\n                hours,\n            };\n        }\n        return stateTime.minutes ? { ...stateTime, hours: undefined } : { hours: undefined };\n    }\n    if (values.minutes !== undefined) {\n        const minutes = parseInt(values.minutes, 10);\n        if (!isNaN(minutes)) {\n            return {\n                ...stateTime,\n                minutes,\n            };\n        }\n        return stateTime.hours ? { ...stateTime, minutes: undefined } : { minutes: undefined };\n    }\n\n    return stateTime;\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    onChange,\n    layout = 'compact',\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const hours =\n        !stateTime || stateTime.hours === undefined || isNaN(stateTime.hours)\n            ? ''\n            : Math.min(stateTime.hours, maxHours);\n    const minutes =\n        !stateTime || stateTime.minutes === undefined || isNaN(stateTime.minutes)\n            ? ''\n            : Math.min(stateTime.minutes, maxMinutes);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(layout))}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"number\"\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={hours}\n                        autoComplete=\"off\"\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { hours: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"number\"\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={minutes}\n                        autoComplete=\"off\"\n                        onBlur={(evt: React.FocusEvent<HTMLInputElement>) => {\n                            if (evt.target.value === '' || evt.target.value === '0') {\n                                const newTime = {\n                                    ...stateTime,\n                                    minutes: stateTime && stateTime.hours !== undefined ? 0 : undefined,\n                                };\n                                setStateTime(newTime);\n                                handleTimeChange(newTime, onChange);\n                            }\n                        }}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = getNewTime(stateTime, { minutes: evt.target.value });\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps, Label } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\n\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput from './TimeInput';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n}\n\nexport type FormikTimeInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikTimeInput<FieldName, ErrorType>({\n    label,\n    name,\n    validate,\n    feil,\n    ...restProps\n}: FormikTimeInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={field.name}>{label}</Label>\n\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCheckbox<FieldName, ErrorType>({\n    name,\n    validate,\n    afterOnChange,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        autoComplete=\"off\"\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return fieldValues.includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value),\n                            autoComplete: 'off',\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(_evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    Omit<TypedFormInputValidationProps<FieldName, ErrorType>, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName, ErrorType>({\n    children,\n    name,\n    feil,\n    validate,\n    inputProps,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        inputProps={{ ...inputProps, autoComplete: 'off' }}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    return countries.getName(alphaCode, locale);\n};\n\nexport const getCountries = () => countries;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport FormikInputGroup from '../formik-input-group/FormikInputGroup';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName, ErrorType>\n    extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    legend?: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    toDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    description?: React.ReactNode;\n}\n\nfunction FormikDateIntervalPicker<FieldName, ErrorType>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    description,\n    validate,\n}: DateIntervalPickerProps<FieldName, ErrorType>) {\n    const name = `${fromDatepickerProps.name}_${toDatepickerProps.name}` as any;\n    return (\n        <FormikInputGroup\n            name={name}\n            validate={validate ? (value) => validate(value, name) : undefined}\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName, ErrorType> {...toDatepickerProps} />\n            </div>\n        </FormikInputGroup>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport FormikInput, { InputWithSuffix } from '../formik-input/FormikInput';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'type' | 'pattern' | 'inputMode' | 'min' | 'max'> {\n    name: FieldName;\n    integerValue?: boolean;\n}\n\nexport type FormikNumberInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nfunction FormikNumberInput<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    autoComplete,\n    bredde = 'S',\n    integerValue = false,\n    ...restProps\n}: FormikNumberInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <FormikInput\n                        {...restProps}\n                        {...field}\n                        type=\"text\"\n                        bredde={bredde}\n                        autoComplete={autoComplete || 'off'}\n                        inputMode={integerValue ? 'numeric' : 'text'}\n                        pattern={integerValue ? '[0-9]*' : undefined}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikNumberInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Radio, RadioGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n}\n\nexport type FormikRadioGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    ...restProps\n}: FormikRadioGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioGruppe {...restProps} feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {radios.map((rb, idx) => {\n                            const isSelected = field.value === rb.value;\n                            return (\n                                <Radio\n                                    key={idx}\n                                    {...rb}\n                                    name={(name as any) as string}\n                                    checked={isSelected}\n                                    autoComplete=\"off\"\n                                    onChange={(evt) => {\n                                        form.setFieldValue(field.name, evt.target.value);\n                                        if (context) {\n                                            context.onAfterFieldValueSet();\n                                        }\n                                    }}\n                                />\n                            );\n                        })}\n                    </RadioGruppe>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikSelect<FieldName, ErrorType>({\n    name,\n    children,\n    validate,\n    feil,\n    ...restProps\n}: FormikSelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        autoComplete=\"off\"\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikTextarea<FieldName, ErrorType>({\n    name,\n    validate,\n    feil,\n    ...restProps\n}: FormikTextareaProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        autoComplete=\"off\"\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","import React from 'react';\nimport { TypedFormInputValidationProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from '../formik-radio-panel-group/FormikRadioPanelGroup';\n\nexport interface FormikYesOrNoQuestionProps<FieldName, ErrorType>\n    extends Omit<FormikRadioPanelGroupProps<FieldName, ErrorType>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    useTwoColumns?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName, ErrorType>({\n    name,\n    includeDoNotKnowOption,\n    labels,\n    useTwoColumns = true,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName, ErrorType> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName, ErrorType>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : []),\n            ]}\n            {...restProps}\n            name={name}\n            useTwoColumns={includeDoNotKnowOption ? false : useTwoColumns}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps,\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps,\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, { FormikCountrySelectProps } from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps,\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDateRangePicker, { FormikDateRangePickerProps } from './formik-date-range-picker/FormikDateRangePicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikNumberInput, { FormikNumberInputProps } from './formik-number-input/FormikNumberInput';\nimport FormikRadioGroup, { FormikRadioGroupProps } from './formik-radio-group/FormikRadioGroup';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikTimeInput, { FormikTimeInputProps } from './formik-time-input/FormikTimeInput';\nimport FormikYesOrNoQuestion, { FormikYesOrNoQuestionProps } from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, { TypedFormikWrapperProps } from './typed-formik-wrapper/TypedFormikWrapper';\nimport '../styles/nav-frontend-skjema-extension.less';\n\nexport function getTypedFormComponents<FieldName, FormValues, ErrorType = string>() {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldName, ErrorType>) => (\n            <FormikCheckbox<FieldName, ErrorType> {...props} />\n        ),\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikCheckboxPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) => (\n            <FormikConfirmationCheckboxPanel<FieldName, ErrorType> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldName, ErrorType>) => (\n            <FormikCountrySelect<FieldName, ErrorType> {...props} />\n        ),\n        DatePicker: (props: FormikDatepickerProps<FieldName, ErrorType>) => (\n            <FormikDatepicker<FieldName, ErrorType> {...props} />\n        ),\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldName, ErrorType>) => (\n            <FormikDateIntervalPicker<FieldName, ErrorType> {...props} />\n        ),\n        DateRangePicker: (props: FormikDateRangePickerProps<FieldName, ErrorType>) => (\n            <FormikDateRangePicker<FieldName, ErrorType> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldName>) => <FormikFileInput<FieldName, ErrorType> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues, ErrorType>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldName, ErrorType>) => <FormikInput<FieldName, ErrorType> {...props} />,\n        NumberInput: (props: FormikNumberInputProps<FieldName, ErrorType>) => (\n            <FormikNumberInput<FieldName, ErrorType> {...props} />\n        ),\n        InputGroup: (props: FormikInputGroupProps<ErrorType, FieldName>) => (\n            <FormikInputGroup<ErrorType, FieldName> {...props} />\n        ),\n        RadioGroup: (props: FormikRadioGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioGroup<FieldName, ErrorType> {...props} />\n        ),\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldName, ErrorType>) => <FormikSelect<FieldName, ErrorType> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldName, ErrorType>) => (\n            <FormikTextarea<FieldName, ErrorType> {...props} />\n        ),\n        TimeInput: (props: FormikTimeInputProps<FieldName, ErrorType>) => (\n            <FormikTimeInput<FieldName, ErrorType> {...props} />\n        ),\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldName, ErrorType>) => (\n            <FormikYesOrNoQuestion<FieldName, ErrorType> {...props} />\n        ),\n    };\n}\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        const { current } = summaryEl;\n        if (current !== null) {\n            current.focus();\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            innerRef={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllFieldsWithErrors, getErrorForField } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const fieldsWithErrors =\n            !formik.isValid && getAllFieldsWithErrors(formik.errors, context.isHandledErrorTypeChecker);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = fieldsWithErrors\n            ? fieldsWithErrors.map((fieldName) => {\n                  const error = getErrorForField(fieldName, formik.errors);\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorHandler ? context.fieldErrorHandler(error, fieldName) : error,\n                      skjemaelementId: fieldName,\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import React from 'react';\n\nfunction UploadSvg(props: any) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <SkjemagruppeQuestion\n                feil={feil}\n                className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\" // eslint-disable-line\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </SkjemagruppeQuestion>\n        );\n    }\n}\n","import React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName, ErrorType>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick,\n}: FormikFileInputProps<FieldName> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (\n    onluEuAndEftaCountries: boolean,\n    locale: string,\n    useAlpha3Code = true\n): React.ReactNode[] => {\n    const lang = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n\n    const names: [string, any][] = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[0], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option\n                key={countryOptionValue[0]}\n                value={useAlpha3Code ? countries.alpha2ToAlpha3(countryOptionValue[0]) : countryOptionValue[0]}>\n                {countryOptionValue[1]}\n            </option>\n        ));\n};\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale,\n                this.props.useAlpha3Code\n            ),\n        };\n    }\n\n    getCountryOptions(locale: string): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, useAlpha3Code, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)} autoComplete=\"off\">\n                <option value=\"\" />\n                {this.getCountryOptions(locale || 'nb')}\n            </Select>\n        );\n    }\n}\n\nexport default CountrySelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCountrySelect<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    label,\n    useAlpha3Code = true,\n    showOnlyEuAndEftaCountries,\n}: FormikCountrySelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        {...field}\n                        label={label}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                        useAlpha3Code={useAlpha3Code}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(width))}>{children}</div>\n);\n\nexport default DialogFormWrapper;\n","import React from 'react';\nimport { default as NFModal } from 'nav-frontend-modal';\nimport './modal.less';\n\nexport interface ModalProps {\n    className?: string;\n    isOpen: boolean;\n    onRequestClose: () => void;\n    contentLabel: string;\n    shouldCloseOnOverlayClick?: boolean;\n}\n\nconst Modal: React.FunctionComponent<ModalProps> = ({\n    isOpen,\n    onRequestClose,\n    contentLabel,\n    className,\n    shouldCloseOnOverlayClick = false,\n    children,\n}) => (\n    <NFModal\n        className={`modal ${className ? className : ''}`}\n        isOpen={isOpen}\n        shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n        contentLabel={contentLabel}\n        onRequestClose={onRequestClose}>\n        <article className=\"modal__content\">{children}</article>\n    </NFModal>\n);\n\nexport default Modal;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport minMax from 'dayjs/plugin/minMax';\nimport { DateRange } from '../../types';\nimport { DatepickerLimitiations } from '../formik-datepicker/FormikDatepicker';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(minMax);\n\nconst sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nconst sortDateRangeByToDate = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.to).isSameOrBefore(d2.to)) {\n        return -1;\n    }\n    return 1;\n};\nexport const getRangesStartingAfterDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.from).isAfter(date, 'day'));\n};\n\nexport const getRangesEndingBeforeDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.to).isBefore(date, 'day'));\n};\n\nexport const findClosestDateAfterDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isAfter(fromDate, 'day'));\n    return dayjss.length > 0 ? dayjs.min(dayjss).toDate() : undefined;\n};\n\nexport const findClosestDateBeforeDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const findClosestDateBeforeOrEqualDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isSameOrBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const getClosestDateRangeBeforeDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesBeforeDate = getRangesEndingBeforeDate(date, ranges).sort(sortDateRangeByToDate).reverse();\n    return rangesBeforeDate.length === 0 ? undefined : rangesBeforeDate[0];\n};\n\nexport const getClosestDateRangeAfterDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesAfterDate = getRangesStartingAfterDate(date, ranges).sort(sortDateRange);\n    return rangesAfterDate.length === 0 ? undefined : rangesAfterDate[0];\n};\n\nconst getFollowingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.from : dayjs(dateRange.from).subtract(1, 'day').toDate();\n};\n\nexport const getMaxDateForRangeStart = ({\n    fromDate,\n    toDate,\n    maxDate,\n    otherRanges: dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    otherRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!fromDate) {\n        return toDate || maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(fromDate, dateRanges);\n    const followingRangeeDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(toDate ? [toDate] : []),\n        ...(maxDate ? [maxDate] : []),\n        ...(followingRangeeDate ? [followingRangeeDate] : []),\n    ];\n    return findClosestDateAfterDate(fromDate, dates);\n};\nexport const getMaxDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    maxDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(baseDate, dateRanges);\n    const followingDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(maxDate ? [maxDate] : []), ...(followingDate ? [followingDate] : [])];\n    return findClosestDateAfterDate(baseDate, dates) || maxDate;\n};\n\nconst getPreceedingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.to : dayjs(dateRange.to).add(1, 'day').toDate();\n};\n\nexport const getMinDateForRangeStart = ({\n    toDate,\n    minDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!toDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(toDate, dateRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(minDate ? [minDate] : []), ...(preceedingDate ? [preceedingDate] : [])];\n\n    return findClosestDateBeforeDate(toDate, dates);\n};\n\nexport const getMinDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    minDate,\n    dateRanges: otherRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(baseDate, otherRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(fromDate ? [fromDate] : []),\n        ...(minDate ? [minDate] : []),\n        ...(preceedingDate ? [preceedingDate] : []),\n    ];\n    return findClosestDateBeforeOrEqualDate(baseDate, dates);\n};\n\ninterface DateRangePickerLimitations {\n    fromDateLimitations: DatepickerLimitiations;\n    toDateLimitations: DatepickerLimitiations;\n}\n\nexport const getDateRangePickerLimitations = (props: {\n    /** Selected from date */\n    fromDate?: Date;\n    /** Selected to date */\n    toDate?: Date;\n    /** Min allowed date */\n    minDate?: Date;\n    /** Max allowed date */\n    maxDate?: Date;\n    /** Other date ranges which become disabled in the datepicker */\n    dateRanges?: DateRange[];\n    /** Disallow selection of saturday and sunday */\n    disableWeekend?: boolean;\n    /** Allow one dateRange to start on the same date another ends */\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): DateRangePickerLimitations => {\n    return {\n        fromDateLimitations: {\n            minDate: getMinDateForRangeStart(props),\n            maxDate: getMaxDateForRangeStart(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n        toDateLimitations: {\n            minDate: getMinDateForRangeEnd(props),\n            maxDate: getMaxDateForRangeEnd(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n    };\n};\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { ISOStringToDate } from '../formik-datepicker/datepickerUtils';\nimport FormikDatepicker, {\n    DatePickerBaseProps,\n    DatepickerLimitiations,\n    DatePickerPresentationProps,\n} from '../formik-datepicker/FormikDatepicker';\nimport { getDateRangePickerLimitations } from './dateRangePickerUtils';\nimport './dateRangePicker.less';\n\ninterface OwnProps<FieldName, ErrorType> {\n    legend?: string;\n    description?: React.ReactNode;\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    locale?: string;\n    allowRangesToStartAndStopOnSameDate?: boolean;\n    fromInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n    toInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n}\n\nexport type FormikDateRangePickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nfunction FormikDateRangePicker<FieldName, ErrorType>({\n    legend,\n    fromInputProps,\n    toInputProps,\n    description,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    showYearSelector,\n    fullScreenOnMobile,\n    fullscreenOverlay,\n    allowRangesToStartAndStopOnSameDate,\n    locale,\n}: FormikDateRangePickerProps<FieldName, ErrorType>) {\n    const { values } = useFormikContext<any>();\n    const fromDate = ISOStringToDate(values[fromInputProps.name]);\n    const toDate = ISOStringToDate(values[toInputProps.name]);\n    const { fromDateLimitations, toDateLimitations } = getDateRangePickerLimitations({\n        fromDate,\n        toDate,\n        minDate,\n        maxDate,\n        dateRanges: disabledDateRanges,\n        disableWeekend,\n        allowRangesToStartAndStopOnSameDate,\n    });\n    return (\n        <SkjemaGruppe\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateRangePicker\">\n            <div className=\"dateRangePicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...fromInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...fromDateLimitations}\n                    {...locale}\n                />\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...toInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...toDateLimitations}\n                    {...locale}\n                />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateRangePicker;\n"],"sourceRoot":""}