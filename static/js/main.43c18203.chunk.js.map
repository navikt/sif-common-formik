{"version":3,"sources":["dev/components/app-intl-provider/messages.ts","dev/examples/formik-example/ferieuttak-example/ferieuttakMessages.ts","dev/components/app-intl-provider/AppIntlProvider.tsx","dev/components/svg/NAVLogo.tsx","typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper.tsx","dev/utils/bemUtils.ts","dev/components/box/Box.tsx","dev/components/page-intro/PageIntro.tsx","typed-formik-form/utils/typedFormErrorUtils.ts","typed-formik-form/components/helpers/ValidationErrorLink.tsx","typed-formik-form/components/helpers/ValidationSummary.tsx","typed-formik-form/components/formik-validation-error-summary/FormikValidationErrorSummary.tsx","typed-formik-form/components/helpers/button-row/ButtonRow.tsx","typed-formik-form/components/typed-formik-form/TypedFormikForm.tsx","typed-formik-form/components/formik-checkbox/FormikCheckbox.tsx","typed-formik-form/components/formik-checkbox-panel-group/FormikCheckboxPanelGroup.tsx","typed-formik-form/components/formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel.tsx","typed-formik-form/utils/countryUtils.ts","typed-formik-form/components/formik-country-select/CountrySelect.tsx","typed-formik-form/components/formik-country-select/FormikCountrySelect.tsx","typed-formik-form/components/helpers/skjemagruppe-question/SkjemagruppeQuestion.tsx","typed-formik-form/components/formik-datepicker/datepickerUtils.ts","typed-formik-form/components/formik-datepicker/FormikDatepicker.tsx","typed-formik-form/components/formik-input-group/FormikInputGroup.tsx","typed-formik-form/components/formik-date-interval-picker/FormikDateIntervalPicker.tsx","typed-formik-form/components/formik-file-input/file-input/UploadSvg.tsx","typed-formik-form/components/formik-file-input/file-input/FileInput.tsx","typed-formik-form/components/formik-file-input/FormikFileInput.tsx","typed-formik-form/utils/bemUtils.ts","typed-formik-form/components/formik-input/FormikInput.tsx","typed-formik-form/components/formik-number-input/FormikNumberInput.tsx","typed-formik-form/components/formik-modal-form-and-list/dialog-form-wrapper/DialogFormWrapper.tsx","typed-formik-form/components/formik-modal-form-and-list/modal-form-and-list/ModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndList.tsx","typed-formik-form/components/formik-modal-form-and-list/FormikModalFormAndInfo.tsx","typed-formik-form/components/formik-radio-panel-group/FormikRadioPanelGroup.tsx","typed-formik-form/components/formik-radio-group/FormikRadioGroup.tsx","typed-formik-form/components/formik-select/FormikSelect.tsx","typed-formik-form/components/formik-textarea/FormikTextarea.tsx","typed-formik-form/utils/numberInputUtils.ts","typed-formik-form/validation/validationUtils.ts","typed-formik-form/components/formik-time-input/TimeInput.tsx","typed-formik-form/utils/focusUtils.ts","typed-formik-form/components/formik-time-input/FormikTimeInput.tsx","typed-formik-form/types/index.ts","typed-formik-form/components/formik-yes-or-no-question/FormikYesOrNoQuestion.tsx","typed-formik-form/components/formik-date-range-picker/dateRangePickerUtils.ts","typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker.tsx","typed-formik-form/validation/getCheckedValidator.ts","typed-formik-form/components/getTypedFormComponents.tsx","typed-formik-form/validation/getDateValidator.ts","typed-formik-form/validation/getDateRangeValidator.ts","typed-formik-form/validation/getFødselsnummerValidator.ts","typed-formik-form/validation/getListValidator.ts","typed-formik-form/validation/getNumberValidator.ts","typed-formik-form/validation/getOrgNumberValidator.ts","typed-formik-form/validation/getStringValidator.ts","typed-formik-form/validation/getYesOrNoValidator.ts","typed-formik-form/validation/getRequiredFieldValidator.ts","typed-formik-form/validation/getTimeValidator.ts","typed-formik-form/validation/types.ts","typed-formik-form/validation/intlFormErrorHandler.ts","dev/examples/formik-example/ferieuttak-example/types.ts","dev/components/question/Question.tsx","dev/components/tiles/Tiles.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakForm.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakList.tsx","dev/examples/formik-example/ferieuttak-example/FerieuttakListAndDialog.tsx","dev/examples/formik-example/types.ts","dev/examples/formik-example/typed-form-example/Siblings.tsx","dev/examples/validering-example/types.ts","dev/examples/formik-example/typed-form-example/Friends.tsx","dev/examples/formik-example/typed-form-example/TypedFormExample.tsx","dev/examples/formik-example/FormikExample.tsx","dev/components/validation-errors/ValidationErrorList.tsx","dev/examples/validering-example/ValideringPanel.tsx","dev/utils/dateUtils.ts","dev/examples/validering-example/ValideringExample.tsx","dev/Intro.tsx","dev/config/routeConfig.tsx","dev/components/left-menu/LeftMenu.tsx","dev/DevContent.tsx","dev/DevPage.tsx","App.tsx","index.tsx"],"names":["appMessages","invalidTime","ferieuttakMessages","nb","require","nn","allMessages","ferieMessages","AppIntlProvider","locale","onError","children","messages","NAVLogo","props","className","width","viewBox","fill","fillRule","d","TypedFormikWrapper","onSubmit","initialValues","renderFormContent","renderForm","restProps","values","setSubmitting","setTouched","setTimeout","formik","bemUtils","cls","block","element","e","m","modifier","modifierConditional","condition","undefined","child","c","classNames","bem","bemHelper","Box","margin","padBottom","textAlignCenter","PageIntro","title","tag","getFeilPropForFormikInput","feil","field","form","context","getAndRenderFieldErrorMessage","getErrorForField","elementName","errors","fieldErrors","getIn","Array","isArray","length","isValidationErrorsVisible","status","showErrors","ValidationErrorLink","onClick","href","evt","stopPropagation","preventDefault","stopClickEvent","ValidationSummary","errorMessages","summaryEl","useRef","useEffect","current","focus","innerRef","tittel","customFeilRender","elementById","document","getElementById","skjemaelementId","elementByName","getElementsByName","feilmelding","FormikValidationErrorSummary","allErrors","errorObjectChecker","React","useContext","TypedFormikFormContext","useFormikContext","fieldsWithErrors","isValid","isHandledErrorTypeChecker","getFieldsWithErrors","keys","parentKey","createFieldKey","fieldName","isObject","push","Object","forEach","key","error","err","idx","map","fieldErrorHandler","ButtonRow","align","layout","Children","knapp","index","createContext","TypedFormikForm","oldProps","currentProps","resetFormOnCancel","includeValidationSummary","submitButtonLabel","cancelButtonLabel","id","includeButtons","runDelayedFormValidation","cancelButtonType","formErrorHandler","formFooter","onCancel","onValidSubmit","noButtonsContentRenderer","cleanup","handleSubmit","submitCount","setStatus","resetForm","isSubmitting","isValidating","useState","formSubmitCount","setFormSubmitCout","hasCleanedUp","counter","cleanupState","setCleanupState","ref","setValues","runCleanup","noValidate","autoComplete","Provider","value","isHandledErrorTypeFunc","name","onAfterFieldValueSet","validateForm","createTypedFormikFormContext","style","marginTop","type","htmlType","FormikCheckbox","validate","afterOnChange","checked","onChange","newValue","target","setFieldValue","isCheckboxChecked","fieldValues","includes","FormikCheckboxPanelGroup","legend","checkboxes","useTwoColumns","cb","_evt","keyProp","filter","el","FormikConfirmationCheckboxPanel","inputProps","countries","getCountries","filteredListEØSCountries","countryOptionValue","shouldFilter","createCountryOptions","onluEuAndEftaCountries","useAlpha3Code","lang","names","entries","getNames","sort","a","b","localeCompare","alpha2ToAlpha3","CountrySelect","countryOptionsCache","getCountryOptions","bind","updateCache","this","options","showOnlyEuAndEftaCountries","Component","FormikCountrySelect","label","SkjemagruppeQuestion","forwardRef","rest","isFieldsetTag","titleId","guid","tabIndex","role","isoStringFormat","dateToISOString","date","dayjs","format","ISOStringToDate","dateString","getDateFromDateString","isISODateString","Date","datepickerUtils","getDateStringFromValue","toDate","parseDateLimitations","minDate","maxDate","disabledDateRanges","disableWeekend","invalidDateRanges","from","to","weekendsNotSelectable","isValidFormattedDateString","test","getLocaleToUse","FormikDatepicker","showYearSelector","fullscreenOverlay","fullScreenOnMobile","inputTitle","description","placeholder","isWide","useMediaQuery","minWidth","elementId","position","inputName","intl","useIntl","isInvalid","htmlFor","inputId","calendarDateStringFilter","limitations","calendarSettings","FormikInputGroup","feilProp","isRenderableErrorMsgType","FormikDateIntervalPicker","fromDatepickerProps","toDatepickerProps","UploadSvg","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","FileInput","fileSelectHandler","onFileDropHandler","onFileDragOverHandler","onFileSelect","onKeyPress","fileList","files","onFilesSelect","dataTransfer","inputElement","which","click","multiple","acceptedExtensions","onDragOver","onDrop","accept","FormikFileInput","render","arrayHelpers","FormikInput","suffix","suffixStyle","harFeil","feilMessageId","bredde","FormikNumberInput","integerValue","inputMode","pattern","DialogFormWrapper","ModalFormAndList","items","listRenderer","formRenderer","labels","dialogWidth","maxItems","isVisible","modalState","setModalState","resetModal","selectedItem","showListTitle","isOpen","contentLabel","modalTitle","onRequestClose","item","allItems","listTitle","onEdit","onDelete","i","emptyListText","paddingBottom","mini","addLabel","FormikModalFormAndList","sortFunc","onAfterChange","updatedValues","FormikModalFormAndInfo","FormikRadioPanelGroup","radios","rb","FormikRadioGroup","isSelected","FormikSelect","FormikTextarea","getNumberFromNumberInputValue","inputValue","isNaN","replace","trim","numValue","Number","hasValue","getNumberFromStringInput","handleTimeChange","time","hours","minutes","isValidTime","TimeInput","maxHours","maxMinutes","direction","compact","justifyContent","placeholders","stateTime","setStateTime","hoursLabelId","minutesLabelId","min","max","maxLength","newTime","elementSelector","nodelistToArray","nodes","arr","unshift","tabEnabledSelectors","concat","allTabIndexEnabledSelectors","getFocusableElements","onlyTabReachable","querySelectorAll","join","FormikTimeInput","YesOrNo","timeInputLayout","onFocus","elements","focusFirstElement","FormikYesOrNoQuestion","includeDoNotKnowOption","yes","yesLabel","no","noLabel","doNotKnow","doNotKnowLabel","YES","NO","DO_NOT_KNOW","extend","isSameOrBefore","minMax","sortDateRange","d1","d2","sortDateRangeByToDate","findClosestDateAfterDate","fromDate","dates","dayjss","isAfter","getClosestDateRangeBeforeDate","ranges","rangesBeforeDate","dateRange","isBefore","getRangesEndingBeforeDate","reverse","getClosestDateRangeAfterDate","rangesAfterDate","getRangesStartingAfterDate","getFollowingDate","allowRangesToStartAndStopOnSameDate","subtract","getMaxDateForRangeStart","otherRanges","dateRanges","follwingDateRange","followingRangeeDate","getMaxDateForRangeEnd","baseDate","followingDate","getPreceedingDate","add","getMinDateForRangeStart","preceedingDateRange","preceedingDate","findClosestDateBeforeDate","getMinDateForRangeEnd","findClosestDateBeforeOrEqualDate","FormikDateRangePicker","ValidateCheckedError","fromInputProps","toInputProps","fromDateLimitations","toDateLimitations","getTypedFormComponents","Checkbox","CheckboxPanelGroup","ConfirmationCheckbox","DatePicker","DateIntervalPicker","DateRangePicker","Form","FormikWrapper","Input","NumberInput","InputGroup","RadioGroup","RadioPanelGroup","Select","Textarea","YesOrNoQuestion","ValidateDateError","getCheckedValidator","notChecked","isSameOrAfter","isoWeek","ValidateDateRangeError","getDateValidator","required","onlyWeekdays","dateHasNoValue","dateHasInvalidFormat","dateIsBeforeMin","dateIsAfterMax","isoWeekday","dateIsNotWeekday","ValidateFødselsnummerError","getFromDateValidator","dateError","fromDateIsAfterToDate","getToDateValidator","toDateIsBeforeFromDate","getDateRangeValidator","validateFromDate","validateToDate","ValidateListError","getFødselsnummerValidator","disallowedValues","fødselsnummerHasNoValue","result","fnrvalidator","fnr","reasons","fødselsnummerIsNot11Chars","fødselsnummerIsInvalid","some","f","fødselsnummerIsNotAllowed","ValidateNumberError","getListValidator","minItems","numItems","listIsEmpty","listHasTooFewItems","listHasTooManyItems","ValidateOrgNumberError","getNumberValidator","allowDecimals","numberValue","numberHasNoValue","numberHasInvalidFormat","Math","round","numberHasDecimals","numberIsTooSmall","numberIsTooLarge","ValidateStringError","isValidOrgNumber","charAt","strValue","checkNbr","mod","parseInt","getMod11","getOrgNumberValidator","orgNumberHasNoValue","isValidFormat","orgNumberHasInvalidFormat","ValidateYesOrNoError","getStringValidator","minLength","stringHasNoValue","stringIsNotAString","stringIsTooShort","stringIsTooLong","ValidateRequiredFieldError","getYesOrNoValidator","yesOrNoIsUnanswered","ValidateTimeError","getRequiredFieldValidator","noValue","isIntlErrorObject","createFieldErrorIntlKey","errorPrefix","getFieldErrorHandler","formatMessage","keepKeyUnaltered","getIntlFormErrorHandler","Ferieland","getMinutes","valueIsValidNumber","match","getTimeValidator","inputHours","inputMinutes","hoursAreInvalid","minutesAreInvalid","tooManyHours","hoursAreNegative","tooManyMinutes","minutesAreNegative","timeHasNoValue","durationIsTooLong","durationIsTooShort","Question","marginBottom","Tiles","columns","FerieuttakFormFields","defaultLabels","intervalTitle","okButton","cancelButton","FerieuttakForm","ferieuttak","alleFerieuttak","formLabels","land","fom","tom","mapFerieuttakToFormValues","formValues","mapFormValuesToFerieuttak","isFerieuttak","Error","Norge","Sverige","Danmark","validateField","FerieuttakList","getDateTitleString","uttak","prettifyDateExtended","getItemId","getItemTitle","labelRenderer","FerieuttakListAndDialog","FormFields","sortItemsByFom","Siblings","friend","siblings","_sibling","navn","Friends","friends","_friend","border","TypedFormExample","hasKids","question","fødselsnummer","validations","validateFunc","validationResult","validateAll","barnetsFødselsnummer","info","birthdate","birthCountry","firstname","lastname","dateinterval_from","daterange_to","dateinterval_to","daterange_from","tilsynstimer","letters","FormikExample","console","log","ValidationErrorList","example","ValideringPanel","code","activePanel","setActivePanel","tabs","language","docco","utc","isBetween","startOf","endOf","dateToday","liste","ValideringExample","tidsperiode_fra","tidsperiode_til","jaNeiSpørsmål","tekst","tall","dato","prettifyDate","dayPickerProps","initialMonth","orgnummer","radio","select","dag","Intro","routes","path","renderContent","isActiveRoute","pathname","indexOf","lenkeBem","LeftMenu","useHistory","location","route","withRouter","routeConfig","find","getRouteConfig","history","maxWidth","DevPage","App","Modal","setAppElement","ReactDOM"],"mappings":"k4CAAaA,EACL,CACAC,YAAa,6CACb,sBAAuB,gBACvB,8BAA+B,mCAC/B,8CAAyC,6CACzC,oDAA+C,oDAC/C,wBAAsB,+CAPjBD,EASL,GCJOE,EALY,CACvBC,GAAIC,EAAQ,KACZC,GAAID,EAAQ,M,OCSVE,EAAiC,CACnCH,GAAG,2BACIH,GACAO,EAAcJ,IAErBE,GAAG,2BACIL,GACAO,EAAcF,KAaVG,EATqD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC9EC,EAAsB,OAAXH,EAAkBH,EAAYH,GAAKG,EAAYD,GAChE,OACI,cAAC,IAAD,CAAcI,OAAQA,EAAQG,SAAUA,EAAUF,QAASA,EAA3D,SACKC,K,QCPEE,MAjBf,SAAiBC,GACb,OACI,6CAAKC,UAAU,kBAAkBC,MAAO,GAAIC,QAAQ,eAAkBH,GAAtE,aACI,oBAAGI,KAAK,OAAOC,SAAS,UAAxB,UACI,sBACID,KAAK,UACLE,EAAE,0SAEN,sBACIF,KAAK,UACLE,EAAE,soC,oHCgBPC,MAjBf,SAAwCP,GACpC,IAAQQ,EAAyER,EAAzEQ,SAAUC,EAA+DT,EAA/DS,cAA2BC,EAAoCV,EAAhDW,WAAkCC,EAAnE,YAAiFZ,EAAjF,GACA,OACI,cAAC,IAAD,yBACIS,cAAeA,EACfD,SAAU,SAACK,EAAD,GAA4C,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAChCD,GAAc,GACdC,EAAW,IACXC,YAAW,WACPR,EAASK,QAGbD,GATR,aAUK,SAACK,GAAD,OAAqCP,EAAkBO,Q,yBCZrDC,EAVE,SAAXA,EAAYC,GAAD,MAAkB,CAC/BC,MAAOD,EACPE,QAAS,SAACC,EAAYC,GAAb,gBAA+BJ,EAA/B,aAAuCG,GAAvC,OAA2CC,EAAC,WAAOJ,EAAP,aAAeG,EAAf,aAAqBC,GAAM,KAChFC,SAAU,SAACD,GAAD,gBAAmBJ,EAAnB,aAA2BI,IACrCE,oBAAqB,SAACF,EAAuBG,GAAxB,OACH,IAAdA,QAA4BC,IAANJ,EAAtB,UAA2CJ,EAA3C,aAAmDI,QAAMI,GAC7DC,MAAO,SAACC,GAAD,OAAeX,EAASA,EAASC,GAAKE,QAAQQ,KACrDC,iBCIEC,G,OAAMC,EAAU,QAePC,EAbgC,SAAC,GAAiE,IAAD,EAA9DC,EAA8D,EAA9DA,OAAQC,EAAsD,EAAtDA,UAAWlC,EAA2C,EAA3CA,UAAWmC,EAAgC,EAAhCA,gBAAiBvC,EAAe,EAAfA,SACvFiC,EAAaC,EAAID,WACnBC,EAAIX,MACJW,EAAIN,oBAAoBS,OAAmBP,IAAXO,GAChCH,EAAIN,oBAAJ,iBAAkCU,QAA2BR,IAAdQ,IAHhC,mBAKVJ,EAAIP,SAAS,mBAAqBY,GALxB,wBAMPnC,QAA4B0B,IAAd1B,GANP,IASnB,OAAO,qBAAKA,UAAW6B,EAAhB,SAA6BjC,KCFzBwC,EAfmC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOzC,EAAV,EAAUA,SAAV,OAC9C,mCACI,eAAC,EAAD,CAAKqC,OAAO,IAAZ,UACI,cAAC,EAAD,UACI,cAAC,cAAD,UAAcI,MAEjBzC,GACG,cAAC,EAAD,CAAKsC,UAAU,KAAf,SACI,cAAC,UAAD,CAASI,IAAI,MAAb,SAAoB1C,Y,yBCZ3B2C,EAA4B,SAAC,GAUA,IATtCC,EASqC,EATrCA,KACAC,EAQqC,EARrCA,MACAC,EAOqC,EAPrCA,KACAC,EAMqC,EANrCA,QAOA,OAAOH,IAASG,EAAUA,EAAQC,8BAA8BH,EAAOC,QAAQhB,IAGtEmB,EAAmB,SAC5BC,EACAC,GAEA,IAAMC,EAAsCC,YAAMF,EAAQD,GAC1D,GAAoB,OAAhBE,EAAJ,CAGA,IAAIE,MAAMC,QAAQH,GASd,OAAOA,EARP,GAA2B,IAAvBA,EAAYI,QAAmC,OAAnBJ,EAAY,GAI5C,OAAIA,EAAYI,QAAU,EACfJ,EAAY,QADvB,IAQKK,EAA4B,SAACrC,GAAuC,IAAD,EAC5E,OAAsC,KAAzB,OAANA,QAAM,IAANA,GAAA,UAAAA,EAAQsC,cAAR,eAAgBC,a,yBCbZC,EAd6C,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAAS7D,EAA0B,EAA1BA,SAAUI,EAAgB,EAAhBA,UAC9E,OACI,cAAC,IAAD,CACIA,UAAWA,EACX0D,KAAK,IACLD,QAAS,SAACE,IAVC,SAACA,GACpBA,EAAIC,kBACJD,EAAIE,iBASQC,CAAeH,GACfF,KALR,SAOK7D,KCmBEmE,EA/B2C,SAAC,GAA8B,IAA5B1B,EAA2B,EAA3BA,MAAO2B,EAAoB,EAApBA,cAC1DC,EAAYC,iBAAuB,MAOzC,OANAC,qBAAU,WACN,IAAQC,EAAYH,EAAZG,QACQ,OAAZA,GACAA,EAAQC,UAEb,IAEC,cAAC,mBAAD,CACIC,SAAUL,EACVM,OAAQlC,GAAS,gBACjBG,KAAMwB,EACNQ,iBAAkB,SAAChC,GAAD,OACd,cAAC,EAAD,CACIxC,UAAW,QACXyD,QAAS,WACL,IAAMgB,EAAcC,SAASC,eAAenC,EAAKoC,iBAC3CC,EAAgBH,SAASI,kBAAkBtC,EAAKoC,iBAAiB,GACnEH,EACAA,EAAYJ,QACLQ,GACPA,EAAcR,SAR1B,SAWK7B,EAAKuC,kBCHXC,MAzBf,WACI,IHmCmCC,EAAgBC,EGnC7CvC,EAAUwC,IAAMC,WAAWC,GAC3BrE,EAASsE,cACf,GAAItE,GAAU2B,GAAWA,EAAQY,WAAY,CACzC,IAAMgC,GACDvE,EAAOwE,UH+BmBP,EG/BejE,EAAO+B,OH+BNmC,EG/BcvC,EAAQ8C,0BHgC7C,SAAtBC,EAAuB3C,GAAoE,IAAvD4C,EAAsD,uDAArC,GAAIC,EAAiC,uCACtFC,EAAiB,SAACC,GACpB,OAAOF,EAAS,UAAMA,EAAN,YAAmBE,GAAcA,GAErD,GAAI/C,EAAQ,CACR,GAAI6C,GAAaG,YAAShD,IAAWmC,GAAsBA,EAAmBnC,GAE1E,OADA4C,EAAKK,KAAKJ,GACHD,EAEXM,OAAON,KAAK5C,GAAQmD,SAAQ,SAACC,GACzB,IAAMC,EAAQrD,EAAOoD,GACrB,GAAIjD,MAAMC,QAAQiD,GACdA,EAAMF,SAAQ,SAACG,EAAKC,GAChBZ,EAAoBW,EAAKV,EAAME,EAAe,GAAD,OAAIM,EAAJ,YAAWG,YAEzD,CACH,GAAIP,YAASK,GACT,OAAIlB,GAAsBA,EAAmBkB,QACzCT,EAAKK,KAAKH,EAAeM,IAGtBT,EAAoBU,EAAOT,EAAME,EAAe,GAAD,OAAIM,KAE9DR,EAAKK,KAAKH,EAAeM,QAIrC,OAAOR,EAEJD,CAAoBT,EAAW,KG5D5BjB,EAAoDuB,EACpDA,EAAiBgB,KAAI,SAACT,GAClB,IAAMM,EAAQvD,EAAiBiD,EAAW9E,EAAO+B,QAKjD,MAJmC,CAC/BgC,YAAapC,EAAQ6D,kBAAoB7D,EAAQ6D,kBAAkBJ,EAAON,GAAaM,EACvFxB,gBAAiBkB,WAIzBpE,EAEN,GAAIsC,EACA,OAAO,cAAC,EAAD,CAAmBA,cAAeA,IAIjD,OAAO,MCRIyC,G,OAbmC,SAAC,GAAuD,IAArD7G,EAAoD,EAApDA,SAAoD,IAA1C8G,aAA0C,MAAlC,SAAkC,MAAxBC,cAAwB,MAAf,SAAe,EAC/FzF,EAAG,+BAA2BwF,EAA3B,uBAA+CC,GACxD,OACI,qBAAK3G,UAAWkB,EAAhB,SACKiE,IAAMyB,SAASL,IAAI3G,GAAU,SAACiH,EAAOC,GAAR,OAC1B,sBAAkB9G,UAAU,oBAA5B,SACK6G,GADMC,UCqCdzB,G,MAAyB0B,6BAAsDrF,IAyI7EsF,MAvIf,YAiBiD,IAtBdC,EAAuBC,EAMtDtH,EAgB4C,EAhB5CA,SACAuH,EAe4C,EAf5CA,kBACAnH,EAc4C,EAd5CA,UACAoH,EAa4C,EAb5CA,yBACAC,EAY4C,EAZ5CA,kBACAC,EAW4C,EAX5CA,kBACAC,EAU4C,EAV5CA,GAU4C,IAT5CC,sBAS4C,SAR5CC,EAQ4C,EAR5CA,yBACAC,EAO4C,EAP5CA,iBACAC,EAM4C,EAN5CA,iBACAC,EAK4C,EAL5CA,WACAC,EAI4C,EAJ5CA,SACAC,EAG4C,EAH5CA,cACAC,EAE4C,EAF5CA,yBACAC,EAC4C,EAD5CA,QAEMhH,EAASsE,cACP2C,EAAyFjH,EAAzFiH,aAAcC,EAA2ElH,EAA3EkH,YAAaC,EAA8DnH,EAA9DmH,UAAWC,EAAmDpH,EAAnDoH,UAAWC,EAAwCrH,EAAxCqH,aAAc7C,EAA0BxE,EAA1BwE,QAAS8C,EAAiBtH,EAAjBsH,aAChF,EAA6CC,mBAASL,GAAtD,mBAAOM,EAAP,KAAwBC,EAAxB,KACA,EAAwCF,mBAAS,CAAEG,cAAc,EAAOC,QAAS,IAAjF,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAM5E,iBAAY,CAAEmE,eAAc7C,YAwExC,OAtEArB,qBAAU,WACN2E,EAAI1E,QAAU,CACViE,eACA7C,WAEC6C,IACGH,EAAcM,GACVhD,GACAiD,EAAkBP,GAEtBC,EAAU,CAAE5E,YAAY,KAExB4E,EAAU,CAAE5E,YAAY,OAGjC,CAAC2E,EAAaC,EAAWK,EAAiBH,EAAc7C,EAAS8C,IAEpEnE,qBAAU,WACNyE,EAAaF,cAAgBT,MAC9B,CAACW,EAAcX,IAjDahB,EAmDD6B,EAAI1E,QAnDoB8C,EAmDX,CAAE1B,UAAS6C,iBAlD5B,IAA1BpB,EAASoB,eAAuD,IAA9BnB,EAAamB,eAAmD,IAAzBnB,EAAa1B,SAmD9EsC,GACAA,IAgDJ,sBAAMvH,SArCO,SAACoD,GACdkF,EAAgB,2BAAKD,GAAN,IAAoBF,cAAc,UACjChH,IAAZsG,EATW,SAACrE,GAChBA,EAAIC,kBACJD,EAAIE,iBACJ7C,EAAO+H,UAAUf,EAAUA,EAAQhH,EAAOJ,QAAUI,EAAOJ,QAC3DiI,EAAgB,CAAEH,cAAc,EAAMC,QAASC,EAAaD,QAAU,IAMlEK,CAAWrF,GAEXsE,EAAatE,IAgCSsF,YAAY,EAAMjJ,UAAWA,EAAWuH,GAAIA,EAAI2B,aAAa,MAAvF,SACI,eAAC7D,EAAuB8D,SAAxB,CAAiCC,MA7BJ,WACjC,IAAM7F,EAAaF,EAA0BrC,GAC7C,MAAO,CACHuC,aACAiD,kBAAmB,SAACJ,EAAON,GACvB,OAAO6B,EAAmBA,EAAiBnB,kBAAkBJ,EAAON,GAAaM,GAErFX,0BAAyB,OAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAkB0B,uBAC7CzG,8BAA+B,SAACH,EAAOC,GACnC,GAAIa,EAAY,CACZ,IAAM6C,EAAQvD,EAAiBJ,EAAM6G,KAAM5G,EAAKK,QAChD,GAAIqD,EACA,OAAOuB,EAAmBA,EAAiBnB,kBAAkBJ,EAAO3D,EAAM6G,MAAQlD,IAK9FmD,qBAAsB,WACd9B,GAA4BzG,EAAOsC,QAAUtC,EAAOsC,OAAOC,YAC3DxC,YAAW,WACPC,EAAOwI,oBASqBC,GAAxC,UACK7J,EACAwH,IAA6BpG,EAAOwE,SAAWnC,EAA0BrC,IACtE,qBAAK0I,MAAO,CAAEC,UAAW,QAAzB,SACI,cAAC,EAAD,MAGPnC,GACG,qBAAKkC,MAAO,CAAEC,UAAW,QAAzB,SACI,eAAC,EAAD,CAAWhD,OAAQkB,EAAW,UAAY,SAA1C,UACI,cAAC,QAAD,CAAO+B,KAAK,QAAQC,SAAS,SAA7B,SACKxC,GAAqB,OAEzBQ,GACG,cAAC,QAAD,CACI+B,KAAMlC,GAAoB,OAC1BmC,SAAS,SACTpG,QAAS,WACD0D,GACAiB,IAEJP,KAPR,SASKP,GAAqB,iBAMtB,IAAnBE,GAA4BO,GACzB,qBAAK2B,MAAO,CAAEC,UAAW,QAAzB,SAAoC5B,MAEvCH,GAAc,qBAAK8B,MAAO,CAAEC,UAAW,QAAzB,SAAoC/B,U,6CCnIpDkC,MAnCf,YAM+C,IAL3CR,EAK0C,EAL1CA,KACAS,EAI0C,EAJ1CA,SACAC,EAG0C,EAH1CA,cACAxH,EAE0C,EAF1CA,KACG7B,EACuC,iBACpCgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,WAAD,uCACQ/B,GACA8B,GAFR,IAGID,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxDyH,SAAyB,IAAhBxH,EAAM2G,MACfF,aAAa,MACbgB,SAAU,SAACvG,GACP,IAAMwG,EAAWxG,EAAIyG,OAAOH,QAC5BvH,EAAK2H,cAAc5H,EAAM6G,KAAMa,GAC3BH,GACAA,EAAcG,GAEdxH,GACAA,EAAQ4G,+B,mEClBlCe,GAAoB,SAACC,EAAoBnB,GAC3C,OAAQmB,GAAe,IAAIC,SAASpB,IAkDzBqB,OA/Cf,YAQyD,IAPrDnB,EAOoD,EAPpDA,KACAS,EAMoD,EANpDA,SACAW,EAKoD,EALpDA,OACAlI,EAIoD,EAJpDA,KACAmI,EAGoD,EAHpDA,WACAC,EAEoD,EAFpDA,cACGjK,EACiD,iBAC9CgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,uBAAD,uCACQ/B,GACA8B,GAFR,IAGIiI,OAAQA,EAAS,cAAC,UAAD,CAASpI,IAAI,MAAb,SAAoBoI,SAAoBhJ,EACzDiJ,WAAYA,EAAWpE,KAAI,SAACsE,GAAD,mBAAC,eACrBA,GADoB,IAEvBZ,QAASK,GAAkB7H,EAAM2G,MAAOyB,EAAGzB,OAC3CF,aAAc,WAElBlJ,UAAW4K,EAAgB,4BAAyBlJ,EACpDwI,SAAU,SAACY,EAAM1B,GAjCV,IAAChI,EAA4B2J,EAkC5BT,GAAkB7H,EAAM2G,MAAOA,GAC/B1G,EAAK2H,cAAL,UAAsBf,IAnCtBlI,EAmCqDgI,EAAO3G,EAAM2G,MAlCxF4B,QAAO,SAACC,GACV,OAAOF,EAAUE,EAAGF,KAAa3J,EAAQ2J,GAAWE,IAAO7J,QAmC/BqB,EAAM2G,MACN3G,EAAM2G,MAAMpD,KAAKoD,GAEjB3G,EAAM2G,MAAQ,CAACA,GAEnB1G,EAAK2H,cAAL,UAAsBf,GAAQ7G,EAAM2G,OAChCzG,GACAA,EAAQ4G,yBAIpB/G,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,gB,sDClBjE0I,OAjCf,YAOgE,IAN5DtL,EAM2D,EAN3DA,SACA0J,EAK2D,EAL3DA,KACA9G,EAI2D,EAJ3DA,KACAuH,EAG2D,EAH3DA,SACAoB,EAE2D,EAF3DA,WACGxK,EACwD,kBACrDgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,wBAAD,uCACQ/B,GADR,IAEIwK,WAAU,2BAAOA,GAAP,IAAmBjC,aAAc,SACvCzG,GAHR,IAIIwH,SAAyB,IAAhBxH,EAAM2G,MACf5G,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD0H,SAAU,SAACvG,GACPjB,EAAK2H,cAAL,UAAsBf,GAAS3F,EAA4CyG,OAAOH,SAC9EtH,GACAA,EAAQ4G,wBATpB,SAYK3J,S,sDCrCzBwL,kBAAyB/L,EAAQ,MACjC+L,kBAAyB/L,EAAQ,MAE1B,IAIMgM,GAAe,kBAAMD,I,6ECY5BE,GAA2B,SAACC,EAA4BC,GAC1D,IAAIA,EAuCA,MAA8B,OAAvBD,EAtCP,OAAQA,GACJ,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACD,OAAO,EACX,QACI,OAAO,IAQjBE,GAAuB,SACzBC,EACAhM,GAEqB,IADrBiM,IACoB,yDACdC,EAAkB,OAAXlM,EAAkB,KAAO,KAChC0L,EAAYC,KAEZQ,EAAyB5F,OAAO6F,QAAQV,EAAUW,SAASH,IACjE,OAAOC,EACFG,MAAK,SAACC,EAAaC,GAAd,OAA8BD,EAAE,GAAGE,cAAcD,EAAE,GAAIN,MAC5DZ,QAAO,SAACO,GAAD,OACJD,GAAyBC,EAAmB,GAAIG,MAEnDnF,KAAI,SAACgF,GAAD,OACD,wBAEInC,MAAOuC,EAAgBP,EAAUgB,eAAeb,EAAmB,IAAMA,EAAmB,GAFhG,SAGKA,EAAmB,IAFfA,EAAmB,QA6CzBc,G,oDApCX,WAAYtM,GAAe,IAAD,+BACtB,cAAMA,IAFVuM,yBAC0B,EAEtB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,iBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,iBAHG,E,gDAM1B,SAAY9M,GACRgN,KAAKJ,oBAAsB,CACvB5M,SACAiN,QAASlB,KACLiB,KAAK3M,MAAM6M,4BAA6BF,KAAK3M,MAAM6M,2BACnDlN,EACAgN,KAAK3M,MAAM4L,kB,+BAKvB,SAAkBjM,GAId,OAHKgN,KAAKJ,qBAAuB5M,IAAWgN,KAAKJ,oBAAoB5M,QACjEgN,KAAKD,YAAY/M,GAEdgN,KAAKJ,qBAAuBI,KAAKJ,oBAAoBK,QAAUD,KAAKJ,oBAAoBK,QAAU,K,oBAG7G,WAEI,MAA4FD,KAAK3M,MAAzFmK,EAAR,EAAQA,SAAUZ,EAAlB,EAAkBA,KAAkC5J,GAApD,EAAwBkN,2BAAxB,EAAoDlN,QAA0BiB,GAA9E,EAA4DgL,cAA5D,mBACA,OACI,eAAC,SAAD,yBAAQrC,KAAMA,GAAU3I,GAAxB,IAAmCuJ,SAAU,SAAC7I,GAAD,OAAO6I,EAAS7I,EAAE+I,OAAOhB,QAAQF,aAAa,MAA3F,UACI,wBAAQE,MAAM,KACbsD,KAAKH,kBAAkB7M,GAAU,c,GAhCtByF,IAAM0H,WCvCnBC,OAhCf,YAOoD,IANhDxD,EAM+C,EAN/CA,KACA9G,EAK+C,EAL/CA,KACAuH,EAI+C,EAJ/CA,SACAgD,EAG+C,EAH/CA,MAG+C,IAF/CpB,qBAE+C,SAD/CiB,EAC+C,EAD/CA,2BAEMjK,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,GAAD,2BACQD,GADR,IAEIsK,MAAOA,EACPvK,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD0H,SAAU,SAACd,GACP1G,EAAK2H,cAAc5H,EAAM6G,KAAMF,GAC3BzG,GACAA,EAAQ4G,wBAGhBqD,2BAA4BA,EAC5BjB,cAAeA,S,mFCRxBqB,GA5BcC,sBAAW,SAA8BlN,EAA0B+I,GAC5F,IAAQ4B,EAAwD3K,EAAxD2K,OAAQlI,EAAgDzC,EAAhDyC,KAAMF,EAA0CvC,EAA1CuC,IAAK1C,EAAqCG,EAArCH,SAAUI,EAA2BD,EAA3BC,UAAWuH,EAAgBxH,EAAhBwH,GAAO2F,EAAvD,YAAgEnN,EAAhE,IAEMoN,OAAwBzL,IAARY,GAA6B,aAARA,EACrC8K,EAAO,UAAM7F,GAAM8F,kBAAZ,WAEb,OACI,eAAC,eAAD,yBACIvE,IAAKA,EACLwE,SAAU/F,GAAM,OAAI7F,EACpB6F,GAAIA,EACJvH,UAAS,UAAKA,GAAwB,GAA7B,uBACTsC,IAAKA,IAAYoI,EAAS,WAAa,OACvClI,KAAMA,EACN+K,KAAMJ,OAAgBzL,EAAY,QAClC,kBAAiByL,GAAiBzC,OAAShJ,EAAY0L,EACvD1C,OAAQyC,GAAgBzC,EAAS,cAAC,UAAD,CAASpI,IAAI,MAAb,SAAoBoI,SAAgChJ,GACjFwL,GAVR,eAWuB,IAAlBC,GAA2BzC,GACxB,qBAAK1K,UAAU,iCAAiCuH,GAAI6F,EAApD,SACK1C,IAGR9K,SCxBP4N,GAAkB,aAEXC,GAAkB,SAACC,GAAD,OAAkBA,EAAOC,IAAMD,GAAME,OAAOJ,IAAmB,IACjFK,GAAkB,eAACC,EAAD,uDAAc,GAAd,OAAuCC,GAAsBD,IAmCtFC,GAAwB,SAACD,GAC3B,QAAmBpM,IAAfoM,EAGJ,OAAIE,2BAAgBF,GACT,IAAIG,KAAKH,QADpB,GAkBWI,GAPS,CACpBC,uBA/B2B,SAAC/E,GAC5B,IAAIsE,EACJ,GAAItE,GAA0B,kBAAVA,EAAoB,CACpC,IAA+B,IAA3B4E,2BAAgB5E,GAChB,OAAOA,EAEPuE,IAAMvE,EAAOoE,IAAiB,GAAMhI,YACpCkI,EAAOC,IAAMvE,GAAOgF,cAEA,kBAAVhF,IACdsE,EAAOtE,GAEX,OAAOsE,EAAOD,GAAgBC,QAAQhM,GAoBtCqM,yBACAM,qBAnDyB,SAAC,GAKwB,IAJlDC,EAIiD,EAJjDA,QACAC,EAGiD,EAHjDA,QAGiD,IAFjDC,0BAEiD,MAF5B,GAE4B,EADjDC,EACiD,EADjDA,eAEMC,EAA2CF,EAAmBjI,KAAI,SAAClG,GAAD,MAAQ,CAC5EsO,KAAMlB,GAAgBpN,EAAEsO,MACxBC,GAAInB,GAAgBpN,EAAEuO,QAE1B,MAAO,CACHN,QAASA,EAAUb,GAAgBa,QAAW5M,EAC9C6M,QAASA,EAAUd,GAAgBc,QAAW7M,EAC9CmN,sBAAuBJ,EACvBC,sBAsCJI,2BAR+B,WAA+B,IAA9BhB,EAA6B,uDAAhB,GAC7C,MAAO,iCAAiCiB,KAAKjB,K,uOCN3CkB,GAAiB,SAACtP,GACpB,OAAQA,GACJ,IAAK,KACD,MAAO,KACX,IAAK,KACD,MAAO,KACX,IAAK,KACD,MAAO,KACX,QACI,SAoFGuP,OAhFf,YAmBiD,IAlB7ClF,EAkB4C,EAlB5CA,SACAgD,EAiB4C,EAjB5CA,MACAzD,EAgB4C,EAhB5CA,KACA/B,EAe4C,EAf5CA,GACA2H,EAc4C,EAd5CA,iBACAC,EAa4C,EAb5CA,kBACAC,EAY4C,EAZ5CA,mBACA5M,EAW4C,EAX5CA,KACA8L,EAU4C,EAV5CA,QACAC,EAS4C,EAT5CA,QACAE,EAQ4C,EAR5CA,eACAD,EAO4C,EAP5CA,mBACAa,EAM4C,EAN5CA,WACAnF,EAK4C,EAL5CA,SACAoF,EAI4C,EAJ5CA,YACAC,EAG4C,EAH5CA,YACA7P,EAE4C,EAF5CA,OACGiB,EACyC,kBACtCgC,EAAUwC,IAAMC,WAAWC,GAC3BmK,EAASC,yBAAc,CAAEC,SAAU,MACnCC,EAAYpI,GAAM8F,kBAClBuC,EACFT,GAAsBC,IAAiC,IAAXI,EAAoB,kBAAe9N,EAC7EmO,EAAavG,GAAQ,GACrBwG,EAAOC,cAEb,OACI,cAAC,IAAD,CAAOhG,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAA0C,IAAvC7G,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KACDsN,OAAoFtO,KAAvEc,GAAQD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,UAa7E,OACI,eAAC,GAAD,CAAsBA,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SAA9E,UACI,cAAC,QAAD,CAAOyN,QAASN,EAAhB,SAA4B5C,IAC3BuC,GAAe,qBAAKtP,UAAW,6BAAhB,SAA+CsP,IAC/D,cAAC,cAAD,yBACIY,QAASP,EACTjQ,OAAQsP,GAAetP,GAAUoQ,EAAKpQ,SAClCiB,GAHR,IAIIwK,WAAY,CAAE7B,KAAMuG,EAAWN,cAAa,eAAgBS,EAAW3N,MAAOgN,GAC9EjG,MAAO3G,EAAM2G,MACb+G,yBAA0B,SAAC/G,GACvB,GAAI8E,GAAgBY,2BAA2B1F,GAC3C,OAAOA,GAKfgH,YAAalC,GAAgBG,qBAAqB,CAC9CC,UACAC,UACAE,iBACAD,uBAEJU,iBAAkBA,EAClBmB,iBAAkB,CACdT,YAEJ1F,SAvCuC,SAAC4D,GAC5CrL,EAAM2G,QAAU0E,IAChBpL,EAAK2H,cAAc5H,EAAM6G,KAAMwE,GAC3B5D,GACAA,EAAS4D,GAETnL,GACAA,EAAQ4G,mC,uEC1CrB+G,OAzCf,YAQiD,IAP7C5F,EAO4C,EAP5CA,OACApB,EAM4C,EAN5CA,KACA9G,EAK4C,EAL5CA,KACA5C,EAI4C,EAJ5CA,SACAmK,EAG4C,EAH5CA,SACA/J,EAE4C,EAF5CA,UACGW,EACyC,kBACtCgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACD6N,EAAWhO,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SAC7DgO,EAA2B,CAAC,SAAU,UAAUhG,gBAAgB+F,GACtE,OACI,eAAC,eAAD,2BACQ5P,GADR,IAEI+J,OAAQA,EAAS,cAAC,UAAD,CAASpI,IAAI,MAAb,SAAoBoI,SAAoBhJ,EACzD1B,UAAS,UAAKA,GAAwB,GAA7B,uBAHb,UAIKJ,EAED,qBACI,YAAU,SACVI,UAAS,kCACLwQ,EAA2B,wCAA0C,IAH7E,SAKI,qBAAKlD,UAAW,EAAG/F,GAAI9E,EAAM6G,KAAMtJ,UAAU,wBAA7C,SACKwQ,GACG,8BACI,cAAC,cAAD,UAAcD,kB,OCTvCE,OAvBf,YAMmD,IAL/C/F,EAK8C,EAL9CA,OACAgG,EAI8C,EAJ9CA,oBACAC,EAG8C,EAH9CA,kBACArB,EAE8C,EAF9CA,YACAvF,EAC8C,EAD9CA,SAEMT,EAAI,UAAMoH,EAAoBpH,KAA1B,YAAkCqH,EAAkBrH,MAC9D,OACI,cAAC,GAAD,CACIA,KAAMA,EACNS,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EACxDgJ,OAAQA,EAAS,cAAC,UAAD,CAASpI,IAAI,MAAb,SAAoBoI,SAAoBhJ,EACzD4N,YAAaA,EACbtP,UAAU,qBALd,SAMI,sBAAKA,UAAU,oCAAf,UACI,cAAC,GAAD,eAA4C0Q,IAC5C,cAAC,GAAD,eAA4CC,UCb7CC,OAjBf,SAAmB7Q,GACf,OACI,8CAAKE,MAAO,GAAI4Q,OAAQ,GAAI3Q,QAAQ,aAAgBH,GAApD,cACI,gCAAQ,oBACR,sBACIM,EAAE,iIACFyQ,OAAO,UACPC,YAAa,IACb5Q,KAAK,OACLC,SAAS,UACT4Q,cAAc,QACdC,eAAe,eCKVC,I,2DACjB,WAAYnR,GAAwB,IAAD,+BAC/B,cAAMA,IACDoR,kBAAoB,EAAKA,kBAAkB3E,KAAvB,iBACzB,EAAK4E,kBAAoB,EAAKA,kBAAkB5E,KAAvB,iBACzB,EAAK6E,sBAAwB,EAAKA,sBAAsB7E,KAA3B,iBAC7B,EAAK8E,aAAe,EAAKA,aAAa9E,KAAlB,iBACpB,EAAK+E,WAAa,EAAKA,WAAW/E,KAAhB,iBANa,E,sDASnC,SAAkBgF,GACd,IAAMC,EAAQvO,MAAMyL,KAAK6C,GACzB9E,KAAK3M,MAAM2R,cAAcD,K,mCAG7B,SAAsBpQ,GAClBA,EAAEwC,mB,+BAGN,SAAkBxC,GACdA,EAAEwC,iBACF6I,KAAKyE,kBAAkB9P,EAAEsQ,aAAaF,S,0BAG1C,SAAapQ,GACLA,EAAE+I,OAAOqH,QACT/E,KAAKyE,kBAAkB9P,EAAE+I,OAAOqH,OAChCpQ,EAAE+I,OAAOhB,MAAQ,M,wBAIzB,SAAW/H,GACP,IAAQkG,EAAOmF,KAAK3M,MAAZwH,GAEFqK,EAAelN,SAASC,eAAe4C,GADvB,KAElBlG,EAAEwQ,OAA4C,OAAjBD,GAC7BA,EAAaE,U,oBAIrB,WAAU,IAAD,OACL,EAAyEpF,KAAK3M,MAAtEwH,EAAR,EAAQA,GAAI+B,EAAZ,EAAYA,KAAMyD,EAAlB,EAAkBA,MAAOvK,EAAzB,EAAyBA,KAAMuP,EAA/B,EAA+BA,SAAUtO,EAAzC,EAAyCA,QAASuO,EAAlD,EAAkDA,mBAC5C9B,EAAO,UAAM3I,EAAN,UAEb,OACI,cAAC,GAAD,CACI/E,KAAMA,EACNxC,UAAS,yBAAwB0B,IAATc,EAAqB,uBAAyB,IAF1E,SAGI,wBACI+K,KAAK,SACLhG,GAAIA,EACJ+F,SAAU,EACV2C,QAASC,EACTlQ,UAAU,mBACViS,WAAYvF,KAAK2E,sBACjBa,OAAQxF,KAAK0E,kBACbG,WAAY7E,KAAK6E,WACjB9N,QAASA,EATb,UAUI,qBAAKzD,UAAU,yBAAf,SACI,cAAC,GAAD,MAEJ,cAAC,UAAD,CAASA,UAAU,0BAAnB,SAA8C+M,IAC9C,uBACIxF,GAAI2I,EACJ5G,KAAMA,EACNM,KAAK,OACLuI,OAAQH,EACR9H,SAAU,SAAC7I,GAAD,OAAO,EAAKiQ,aAAajQ,IACnC0Q,UAAuB,IAAbA,a,GApEK5M,IAAM0H,YCkC9BuF,OApCf,YAQ2F,IAPvFrF,EAOsF,EAPtFA,MACAzD,EAMsF,EANtFA,KACA0I,EAKsF,EALtFA,mBACAjI,EAIsF,EAJtFA,SACA2H,EAGsF,EAHtFA,cACAlP,EAEsF,EAFtFA,KACAiB,EACsF,EADtFA,QAEMd,EAAUwC,IAAMC,WAAWC,GAEjC,OACI,cAAC,IAAD,CACIiE,KAAI,UAAKA,GACT+I,OAAQ,SAACC,GAAD,OACJ,cAAC,IAAD,CAAOvI,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,GAAD,CACI6E,GAAI9E,EAAM6G,KACVA,KAAM7G,EAAM6G,KACZyD,MAAOA,EACPtJ,QAASA,EACTiO,cAAe,SAACD,GAAD,OAAWC,EAAcD,EAAOa,IAC/CP,UAAU,EACVC,mBAAoBA,EACpBxP,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,kBC9BzEvB,I,OAVE,SAAXA,EAAYC,GAAD,MAAkB,CAC/BC,MAAOD,EACPE,QAAS,SAACC,EAAYC,GAAb,gBAA+BJ,EAA/B,aAAuCG,GAAvC,OAA2CC,EAAC,WAAOJ,EAAP,aAAeG,EAAf,aAAqBC,GAAM,KAChFC,SAAU,SAACD,GAAD,gBAAmBJ,EAAnB,aAA2BI,IACrCE,oBAAqB,SAACF,EAAuBG,GAAxB,OACH,IAAdA,QAA4BC,IAANJ,EAAtB,UAA2CJ,EAA3C,aAAmDI,QAAMI,GAC7DC,MAAO,SAACC,GAAD,OAAeX,EAASA,EAASC,GAAKE,QAAQQ,KACrDC,kB,+FCaEC,GAAMb,GAAS,eAuENsR,OArEf,YAW4C,IAVxCjJ,EAUuC,EAVvCA,KACA9G,EASuC,EATvCA,KASuC,IARvC+E,UAQuC,MARlC8F,kBAQkC,EAPvCmF,EAOuC,EAPvCA,OAOuC,IANvCC,mBAMuC,MANzB,MAMyB,EALvC1F,EAKuC,EALvCA,MACAuC,EAIuC,EAJvCA,YACAvF,EAGuC,EAHvCA,SACAb,EAEuC,EAFvCA,aACGvI,EACoC,kBACjCgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACD6N,EAAWhO,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SAC7DkQ,OAAuBhR,IAAb6O,EACVoC,EAAa,eAAWpL,GAC9B,YAAe7F,IAAX8Q,EAEI,cAAC,QAAD,uCACQ7R,GACA8B,GAFR,IAGI8E,GAAIA,EACJ+H,YAAaA,EACbvC,MAAOA,EACP7D,aAAcA,GAAgB,MAC9B1G,KAAM+N,EACNnH,WAAuB1H,IAAhBe,EAAM2G,MAAsB,GAAK3G,EAAM2G,SAKtD,sBACIpJ,UAAW8B,GAAID,WACXC,GAAIX,MACJW,GAAIN,oBAAoB,kBAAyBE,IAAX8Q,GACtC1Q,GAAIP,SAAJ,uBAA6BkR,IAC7B3Q,GAAIN,oBAAoB,aAAmC,eAArBb,EAAUiS,SALxD,UAOI,cAAC,QAAD,CAAO3C,QAAS1I,EAAhB,SAAqBwF,IACpBuC,GAAe,qBAAKtP,UAAU,6BAAf,SAA6CsP,IAC7D,sBAAKtP,UAAW8B,GAAIV,QAAQ,gBAA5B,UACI,cAAC,QAAD,uCACQT,GACA8B,GAFR,IAGI8E,GAAIA,EACJ2B,aAAcA,GAAgB,MAC9B1G,KAAMkQ,EACN,oBAAmBC,EACnBvJ,WAAuB1H,IAAhBe,EAAM2G,MAAsB,GAAK3G,EAAM2G,SAEjDoJ,GACG,sBAAMxS,UAAW8B,GAAIV,QAAQ,SAAUqR,GAAc,eAAa,EAAlE,SACKD,OAIb,cAAC,2BAAD,CAA0BjL,GAAE,eAAUA,GAAtC,SACKhF,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,kB,qECnChEqQ,OAhCf,YAQkD,IAP9CvJ,EAO6C,EAP7CA,KACA9G,EAM6C,EAN7CA,KACAuH,EAK6C,EAL7CA,SACAb,EAI6C,EAJ7CA,aAI6C,IAH7C0J,cAG6C,MAHpC,IAGoC,MAF7CE,oBAE6C,SAD1CnS,EAC0C,kBACvCgC,EAAUwC,IAAMC,WAAWC,GAEjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,GAAD,uCACQ/B,GACA8B,GAFR,IAGImH,KAAK,OACLgJ,OAAQA,EACR1J,aAAcA,GAAgB,MAC9B6J,UAAWD,EAAe,UAAY,OACtCE,QAASF,EAAe,cAAWpR,EACnCc,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD4G,WAAuB1H,IAAhBe,EAAM2G,MAAsB,GAAK3G,EAAM2G,a,sCCrChEtH,I,OAAMb,GAAS,sBAYNgS,GAJ2C,SAAC,GAAD,QAAGhT,aAAH,MAAW,SAAX,EAAqBL,EAArB,EAAqBA,SAArB,OACtD,yBAASI,UAAW8B,GAAID,WAAWC,GAAIX,MAAOW,GAAIP,SAAStB,IAA3D,SAAqEL,K,OCkG1DsT,OAzEf,YASqB,IAAD,IARhBC,aAQgB,MARR,GAQQ,EAPhBC,EAOgB,EAPhBA,aACAC,EAMgB,EANhBA,aACAC,EAKgB,EALhBA,OACAlN,EAIgB,EAJhBA,MACAmN,EAGgB,EAHhBA,YACAC,EAEgB,EAFhBA,SACAtJ,EACgB,EADhBA,SAEA,EAAoC/E,IAAMoD,SAA0D,CAChGkL,WAAW,IADf,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBMC,EAAa,WACfD,EAAc,CAAEF,WAAW,EAAOI,kBAAcnS,KAG9CoS,EAAgBX,EAAM/P,OAAS,EACrC,OACI,qCACI,cAAC,KAAD,CAAO2Q,OAAQL,EAAWD,UAAWO,aAAcV,EAAOW,WAAYC,eAAgBN,EAAtF,SACI,cAAC,GAAD,CAAmB3T,MAAOsT,EAA1B,SACKF,EAAa,CACV9S,SA3BG,SAACK,GAChBA,EAAO2G,GACP2C,EAAS,GAAD,oBAAKiJ,EAAMnI,QAAO,SAACmJ,GAAD,OAAUA,EAAK5M,KAAO3G,EAAO2G,OAA/C,CAAoD3G,KAE5DsJ,EAAS,GAAD,oBAAKiJ,GAAL,cAAc5L,GAAI8F,mBAAWzM,MAEzC+S,EAAc,CAAEF,WAAW,KAsBX5L,SAAU+L,EACVO,KAAMT,EAAWG,aACjBO,SAAUjB,QAItB,eAAC,GAAD,CAAsBzI,OAAQoJ,EAAgBR,EAAOe,eAAY3S,EAAWc,KAAM4D,EAAO9D,IAAI,MAA7F,UACK6Q,EAAM/P,OAAS,GACZ,qBAAKpD,UAAU,gCAAf,SACKoT,EAAa,CAAED,QAAOmB,OA5BxB,SAACH,GAChBR,EAAc,CAAEF,WAAW,EAAMI,aAAcM,KA2BYI,SAxB1C,SAACJ,GAClBjK,EAAS,aAAIiJ,EAAMnI,QAAO,SAACwJ,GAAD,OAAOA,EAAEjN,KAAO4M,EAAK5M,aA0BrB,IAAjB4L,EAAM/P,QAAgBkQ,EAAOmB,eAC1B,qBAAK/K,MAAO,CAAEgL,cAAe,QAA7B,SACI,cAAC,mBAAD,UAAkBpB,EAAOmB,wBAGlB/S,IAAb8R,GAA0BA,EAAWL,EAAM/P,SACzC,qBACIsG,MAAOoK,EAAgB,CAAEnK,UAAW,aAAWjI,EAC/C1B,UAAW,8BAFf,SAGI,cAAC,QAAD,CAAO6J,SAAS,SAASpG,QAAS,kBAAMkQ,EAAc,CAAEF,WAAW,KAASkB,MAAM,EAAlF,SACKrB,EAAOsB,oBC/CrBC,OAxCf,YAUiE,IAT7DvL,EAS4D,EAT5DA,KACAgK,EAQ4D,EAR5DA,OACAF,EAO4D,EAP5DA,aACAC,EAM4D,EAN5DA,aACAyB,EAK4D,EAL5DA,SACAC,EAI4D,EAJ5DA,cACAvS,EAG4D,EAH5DA,KACAgR,EAE4D,EAF5DA,SACAzJ,EAC4D,EAD5DA,SAEMpH,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAOiE,KAAMA,EAAMS,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAA3E,SACK,YAA8C,IAA3Ce,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KACP,OACI,cAAC,GAAD,CACI4Q,OAAQA,EACRH,MAAO1Q,EAAM2G,MACbhD,MAAO5D,IAASG,EAAUA,EAAQC,8BAA8BH,EAAOC,QAAQhB,GAC/E8R,SAAUA,EACVtJ,SAAU,SAACtJ,GACP,IAAMoU,EAAgBF,EAAWlU,EAAOoL,KAAK8I,GAAYlU,EACzD8B,EAAK2H,cAAc5H,EAAM6G,KAAM0L,GAC3BD,GACAA,EAAcC,GAEdrS,GACAA,EAAQ4G,wBAGhB8J,aAAcA,EACdD,aAAc,gBAAGkB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OAA0BnB,EAAa,CAAED,MAAO1Q,EAAM2G,MAAOmL,WAAUD,kB,OCc9FW,I,uDCLAC,OAxCf,YAOsD,IANlD5L,EAMiD,EANjDA,KACAS,EAKiD,EALjDA,SACAoL,EAIiD,EAJjDA,OACA3S,EAGiD,EAHjDA,KACAoI,EAEiD,EAFjDA,cACGjK,EAC8C,kBAC3CgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,mBAAD,2BACQ/B,GADR,IAEI2I,KAAM7G,EAAM6G,KACZtJ,UAAW4K,EAAgB,4BAAyBlJ,EACpDuI,QAASxH,EAAM2G,MACf5G,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD0H,SAAU,SAACY,EAAM1B,GACb1G,EAAK2H,cAAc5H,EAAM6G,KAAMF,GAC3BzG,GACAA,EAAQ4G,wBAGhB4L,OAAQA,EAAO5O,KAAI,SAAC6O,GAChB,OAAO,aACH9L,KAAK,GAAD,OAAKA,GACTJ,aAAc,MACd,oBAAgBxH,GACb0T,a,uCCOpBC,OAtCf,YAMiD,IAL7C/L,EAK4C,EAL5CA,KACAS,EAI4C,EAJ5CA,SACAoL,EAG4C,EAH5CA,OACA3S,EAE4C,EAF5CA,KACG7B,EACyC,kBACtCgC,EAAUyC,qBAAWC,GAC3B,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,cAAD,2BAAiB/B,GAAjB,IAA4B6B,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SAApF,SACK2S,EAAO5O,KAAI,SAAC6O,EAAI9O,GACb,IAAMgP,EAAa7S,EAAM2G,QAAUgM,EAAGhM,MACtC,OACI,cAAC,QAAD,2BAEQgM,GAFR,IAGI9L,KAAMA,EACNW,QAASqL,EACTpM,aAAa,MACbgB,SAAU,SAACvG,GACPjB,EAAK2H,cAAc5H,EAAM6G,KAAM3F,EAAIyG,OAAOhB,OACtCzG,GACAA,EAAQ4G,0BARXjD,a,yCCQ1BiP,OA1Bf,YAM6C,IALzCjM,EAKwC,EALxCA,KACA1J,EAIwC,EAJxCA,SACAmK,EAGwC,EAHxCA,SACAvH,EAEwC,EAFxCA,KACG7B,EACqC,kBAClCgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,SAAD,uCACQD,GACA9B,GAFR,IAGI6B,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD0G,aAAa,MACbE,WAAuB1H,IAAhBe,EAAM2G,MAAsB,GAAK3G,EAAM2G,MALlD,SAMKxJ,S,8BCYV4V,OA9Bf,YAK+C,IAJ3ClM,EAI0C,EAJ1CA,KACAS,EAG0C,EAH1CA,SACAvH,EAE0C,EAF1CA,KACG7B,EACuC,kBACpCgC,EAAUwC,IAAMC,WAAWC,GACjC,OACI,cAAC,IAAD,CAAO0E,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,WAAD,uCACQ/B,GACA8B,GAFR,IAGID,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD0H,SAAU,SAACvG,GACPjB,EAAK2H,cAAc5H,EAAM6G,KAAM3F,EAAIyG,OAAOhB,OACtCzG,GACAA,EAAQ4G,wBAGhBL,aAAa,MACbE,MAAO3G,EAAM2G,OAAS,UCpCjCqM,GAAgC,SAACC,GAC1C,QAAmBhU,IAAfgU,GAA2C,KAAfA,IAAqBxS,MAAMC,QAAQuS,KAGzC,kBAAfA,IAA2BC,MAAMD,IAA5C,CAGA,IAAMtM,EAAQ,UAAGsM,GAAaE,QAAQ,MAAO,KAAKC,OAC5CC,EAAWC,OAAO3M,GACxB,IAAIuM,MAAMG,GAGV,OAAOA,ICVEE,GAAW,SAAC5M,GAAD,MAAmC,KAAVA,QAA0B1H,IAAV0H,GAAiC,OAAVA,GAiB3E6M,GAA2B,SAACP,GACrC,QAAmBhU,IAAfgU,GAA2C,KAAfA,IAAqBxS,MAAMC,QAAQuS,KAGzC,kBAAfA,IAA2BC,MAAMD,IAA5C,CAGA,IAAMtM,EAAQ,UAAGsM,GAAaE,QAAQ,MAAO,KAAKC,OAC5CC,EAAWC,OAAO3M,GACxB,IAAIuM,MAAMG,GAGV,OAAOA,ICGLhU,I,OAAMb,GAAS,cAQfiV,GAAmB,SAACC,EAAqBjM,GAC3CA,EAASiM,EAPc,SAACA,GACxB,IAAMC,EAAQX,GAA8BU,EAAKC,OAAS,KACpDC,EAAUZ,GAA8BU,EAAKE,SAAW,KAC9D,YAAiB3U,IAAV0U,QAAmC1U,IAAZ2U,EAIfC,CAAYH,KAiFhBI,GA9E4C,SAAC,GAUrD,IAAD,IATFJ,YASE,MATK,CAAEC,WAAO1U,EAAW2U,aAAS3U,GASlC,MARF8U,gBAQE,MA/CY,GA+CZ,MAPFC,kBAOE,MA9Cc,GA8Cd,MANFC,UAAW/P,OAMT,MANkB,SAMlB,MALFgQ,eAKE,aAJFC,sBAIE,MAJe,SAIf,EAHFC,EAGE,EAHFA,aACA3M,EAEE,EAFFA,SACAlK,EACE,EADFA,UAEA,EAAkCuI,mBAAoC4N,GAAtE,mBAAOW,EAAP,KAAkBC,EAAlB,KACMxP,EAAK8F,kBACL2J,EAAY,UAAMzP,EAAN,UACZ0P,EAAc,UAAM1P,EAAN,YACpB,OACI,qBACIvH,UAAW8B,GAAID,WACXC,GAAIX,MACJW,GAAIP,SAASoF,GACb7E,GAAIP,SAAJ,kBAAwBqV,IACxB9U,GAAIN,oBAAoB,UAAWmV,GACnC7U,GAAIN,oBAAoB,YAAawU,GAASG,EAAKC,QAAUJ,GAASG,EAAKE,UAC3EvU,GAAIN,oBAAoB,YAAawU,GAASG,EAAKC,QACnDtU,GAAIN,oBAAoB,cAAewU,GAASG,EAAKE,UACrDrW,GATR,SAWI,sBAAKA,UAAW8B,GAAIV,QAAQ,kBAA5B,UACI,sBAAKpB,UAAW8B,GAAIV,QAAQ,gBAA5B,UACI,uBAAOpB,UAAW8B,GAAIV,QAAQ,SAAU6O,QAAS+G,EAAjD,mBAGA,cAAC,QAAD,CACIzP,GAAIyP,EACJhX,UAAW8B,GAAIV,QAAQ,SACvBwI,KAAK,OACLV,aAAc,MACd6J,UAAW,UACXC,QAAS,SACTzD,YAAW,OAAEsH,QAAF,IAAEA,OAAF,EAAEA,EAAcT,MAC3Bc,IAAK,EACLC,IAAKX,EACLY,UAAW,EACXhO,OAAgB,OAAT0N,QAAS,IAATA,OAAA,EAAAA,EAAWV,QAAS,GAC3BlM,SAAU,SAACvG,GACP,IAAM0T,EAAO,2BAAQP,GAAR,IAAmBV,MAAOzS,EAAIyG,OAAOhB,QAClD2N,EAAaM,GACbnB,GAAiBmB,EAASnN,SAItC,sBAAKlK,UAAW8B,GAAIV,QAAQ,gBAA5B,UACI,uBAAOpB,UAAW8B,GAAIV,QAAQ,SAAU6O,QAASgH,EAAjD,sBAGA,cAAC,QAAD,CACI1P,GAAI0P,EACJjX,UAAW8B,GAAIV,QAAQ,WACvBwI,KAAK,OACLV,aAAc,MACd6J,UAAW,UACXxD,YAAW,OAAEsH,QAAF,IAAEA,OAAF,EAAEA,EAAcR,QAC3BrD,QAAS,SACTkE,IAAK,EACLE,UAAW,EACXD,IAAKV,EACLrN,OAAgB,OAAT0N,QAAS,IAATA,OAAA,EAAAA,EAAWT,UAAW,GAC7BnM,SAAU,SAACvG,GACP,IAAM0T,EAAO,2BAAQP,GAAR,IAAmBT,QAAS1S,EAAIyG,OAAOhB,QACpD2N,EAAaM,GACbnB,GAAiBmB,EAASnN,eCpHhDoN,GAAkB,CACpB,UACA,yBACA,wBACA,2BACA,aACA,0BAGJ,SAASC,GAAgBC,GAErB,IADA,IAAMC,EAAqB,GAClBjD,EAAIgD,EAAMpU,OAAQoR,KACvBiD,EAAIC,QAAQF,EAAMrD,KAAKK,IAE3B,OAAOiD,EAGX,IAAME,GAAsB,CAAC,kBAAkBC,OAAON,IAChDO,GAA8B,CAAC,cAAcD,OAAON,IAEnD,SAASQ,GAAqB7M,GAAkE,IAArD8M,IAAoD,yDAClG,GAAK9M,EAGL,OACWsM,GADPQ,EACuB9M,EAAG+M,iBAAiBL,GAAoBM,KAAK,MAE7ChN,EAAG+M,iBAAiBH,GAA4BI,KAAK,O,4DCL9EnW,GAAMb,GAAS,mBAsDNiX,IC5EHC,GD4EGD,GApDf,YAOgD,IAN5CnL,EAM2C,EAN3CA,MACAzD,EAK2C,EAL3CA,KACAS,EAI2C,EAJ3CA,SACAvH,EAG2C,EAH3CA,KACA4V,EAE2C,EAF3CA,gBACGzX,EACwC,kBACrCgC,EAAUwC,IAAMC,WAAWC,GAC3ByD,EAAM5E,mBACZ,OACI,cAAC,IAAD,CAAO6F,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EAAW4H,KAAMA,EAAhF,SACK,YAAkC,IAA/B7G,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KACP,OACI,cAAC,GAAD,CACIJ,IAAK,MACLtC,UAAW8B,GAAID,WACXC,GAAIX,MACJW,GAAIN,oBAAJ,OACI4W,QADJ,IACIA,OADJ,EACIA,EAAiB1B,eACchV,KAAhB,OAAf0W,QAAe,IAAfA,OAAA,EAAAA,EAAiB1B,aAGzB5N,IAAKA,EACLtG,KAAMD,EAA0B,CAAEE,QAAOC,OAAMC,UAASH,SACxD+E,GAAI+B,EACJ+O,QAAS,SAAC1U,GACFA,EAAIyG,OAAO7C,KAAOuB,EAAI1E,QAAQrE,MAAMwH,IDpB7D,SAA2B0D,GAC9B,IAAMqN,EAAWR,GAAqB7M,GAClCqN,GAAYA,EAASlV,OAAS,EAC7BkV,EAAS,GAAmBjU,QAE5B4G,EAAmB5G,QCgBIkU,CAAkB5U,EAAIyG,SAG9BM,OAAQqC,EAjBZ,SAkBI,cAAC,GAAD,mDACQpM,GACA8B,GACA2V,GAHR,IAIIxB,eAAe,OACfT,KAAM1T,EAAM2G,YAAS1H,EACrBwI,SAAU,SAACiM,GACPzT,EAAK2H,cAAc5H,EAAM6G,KAAM6M,GAC3BxT,GACAA,EAAQ4G,kC,SCjEhC4O,K,UAAAA,E,QAAAA,E,wBAAAA,E,yBAAAA,Q,uECqCGK,OAtBf,YAM4G,IALxGlP,EAKuG,EALvGA,KACAmP,EAIuG,EAJvGA,uBACAnF,EAGuG,EAHvGA,OAGuG,IAFvG1I,qBAEuG,SADpGjK,EACoG,kBACvG,EAA8F2S,GAAU,GAAxG,IAAQoF,IAAKC,OAAb,MAAwB,KAAxB,MAA8BC,GAAIC,OAAlC,MAA4C,MAA5C,MAAmDC,UAAWC,OAA9D,MAA+E,WAA/E,EACA,OACI,cAAC,GAAD,yBACI5D,OAAM,CACF,CAAEpI,MAAO4L,EAAUvP,MAAO+O,GAAQa,KAClC,CAAEjM,MAAO8L,EAASzP,MAAO+O,GAAQc,KAF/B,oBAGER,EAAyB,CAAC,CAAE1L,MAAOgM,EAAgB3P,MAAO+O,GAAQe,cAAiB,MAEvFvY,GANR,IAOI2I,KAAMA,EACNsB,eAAe6N,GAAiC7N,M,wEC1B5D+C,IAAMwL,OAAOC,MACbzL,IAAMwL,OAAOE,MAEb,IAAMC,GAAgB,SAACC,EAAeC,GAClC,OAAI7L,IAAM4L,EAAG5K,MAAMyK,eAAeI,EAAG7K,OACzB,EAEL,GAGL8K,GAAwB,SAACF,EAAeC,GAC1C,OAAI7L,IAAM4L,EAAG3K,IAAIwK,eAAeI,EAAG5K,KACvB,EAEL,GAUE8K,GAA2B,SAACC,EAAgBC,GACrD,IAAMC,EAASD,EAAMrT,KAAI,SAAClG,GAAD,OAAOsN,IAAMtN,MAAI2K,QAAO,SAAC1J,GAAD,OAAOA,EAAEwY,QAAQH,EAAU,UAC5E,OAAOE,EAAOzW,OAAS,EAAIuK,IAAMuJ,IAAI2C,GAAQzL,cAAW1M,GAe/CqY,GAAgC,SAACrM,EAAYsM,GACtD,IAAMC,EAtB+B,SAACvM,GACtC,OADgG,uDAApB,IAC1D1C,QAAO,SAACkP,GAAD,OAAevM,IAAMuM,EAAUtL,IAAIuL,SAASzM,EAAM,UAqBlD0M,CAA0B1M,EAAMsM,GAAQhO,KAAKyN,IAAuBY,UAC7F,OAAmC,IAA5BJ,EAAiB7W,YAAe1B,EAAYuY,EAAiB,IAG3DK,GAA+B,SAAC5M,EAAYsM,GACrD,IAAMO,EA/BgC,SAAC7M,GACvC,OADiG,uDAApB,IAC3D1C,QAAO,SAACkP,GAAD,OAAevM,IAAMuM,EAAUvL,MAAMmL,QAAQpM,EAAM,UA8BpD8M,CAA2B9M,EAAMsM,GAAQhO,KAAKsN,IACtE,OAAkC,IAA3BiB,EAAgBnX,YAAe1B,EAAY6Y,EAAgB,IAGhEE,GAAmB,SACrBP,EACAQ,GAEA,GAAKR,EAGL,OAAOQ,EAAsCR,EAAUvL,KAAOhB,IAAMuM,EAAUvL,MAAMgM,SAAS,EAAG,OAAOvM,UAG9FwM,GAA0B,SAAC,GAYf,IAXrBjB,EAWoB,EAXpBA,SACAvL,EAUoB,EAVpBA,OACAG,EASoB,EATpBA,QASoB,IARpBsM,YAAaC,OAQO,MARM,GAQN,EAPpBJ,EAOoB,EAPpBA,oCAQA,IAAKf,EACD,OAAOvL,GAAUG,EAErB,IAAMwM,EAAoBT,GAA6BX,EAAUmB,GAC3DE,EAAsBP,GAAiBM,EAAmBL,GAC1Dd,EAAa,uBACXxL,EAAS,CAACA,GAAU,IADT,aAEXG,EAAU,CAACA,GAAW,IAFX,aAGXyM,EAAsB,CAACA,GAAuB,KAEtD,OAAOtB,GAAyBC,EAAUC,IAEjCqB,GAAwB,SAAC,GAYb,IAXrBtB,EAWoB,EAXpBA,SACAvL,EAUoB,EAVpBA,OACAG,EASoB,EATpBA,QASoB,IARpBuM,kBAQoB,MARP,GAQO,EAPpBJ,EAOoB,EAPpBA,oCAQMQ,EAAWvB,GAAYvL,EAC7B,IAAK8M,EACD,OAAO3M,EAEX,IAAMwM,EAAoBT,GAA6BY,EAAUJ,GAC3DK,EAAgBV,GAAiBM,EAAmBL,GACpDd,EAAa,uBAAQrL,EAAU,CAACA,GAAW,IAA9B,aAAuC4M,EAAgB,CAACA,GAAiB,KAC5F,OAAOzB,GAAyBwB,EAAUtB,IAAUrL,GAGlD6M,GAAoB,SACtBlB,EACAQ,GAEA,GAAKR,EAGL,OAAOQ,EAAsCR,EAAUtL,GAAKjB,IAAMuM,EAAUtL,IAAIyM,IAAI,EAAG,OAAOjN,UAGrFkN,GAA0B,SAAC,GAUf,IATrBlN,EASoB,EATpBA,OACAE,EAQoB,EARpBA,QAQoB,IAPpBwM,kBAOoB,MAPP,GAOO,EANpBJ,EAMoB,EANpBA,oCAOA,IAAKtM,EACD,OAAOE,EAEX,IAAMiN,EAAsBxB,GAA8B3L,EAAQ0M,GAC5DU,EAAiBJ,GAAkBG,EAAqBb,GAG9D,OA5GqC,SAACf,EAAgBC,GACtD,IAAMC,EAASD,EAAMrT,KAAI,SAAClG,GAAD,OAAOsN,IAAMtN,MAAI2K,QAAO,SAAC1J,GAAD,OAAOA,EAAE6Y,SAASR,EAAU,UAE7E,OADgBE,EAAOzW,OAAS,EAAIuK,IAAMwJ,IAAI0C,GAAQzL,cAAW1M,EA0G1D+Z,CAA0BrN,EAFd,uBAAQE,EAAU,CAACA,GAAW,IAA9B,aAAuCkN,EAAiB,CAACA,GAAkB,OAKrFE,GAAwB,SAAC,GAYb,IAXrB/B,EAWoB,EAXpBA,SACAvL,EAUoB,EAVpBA,OACAE,EASoB,EATpBA,QASoB,IARpBwM,WAAYD,OAQQ,MARM,GAQN,EAPpBH,EAOoB,EAPpBA,oCAQMQ,EAAWvB,GAAYvL,EAC7B,IAAK8M,EACD,OAAO5M,EAEX,IAAMiN,EAAsBxB,GAA8BmB,EAAUL,GAC9DW,EAAiBJ,GAAkBG,EAAqBb,GAM9D,OAjI4C,SAACf,EAAgBC,GAC7D,IAAMC,EAASD,EAAMrT,KAAI,SAAClG,GAAD,OAAOsN,IAAMtN,MAAI2K,QAAO,SAAC1J,GAAD,OAAOA,EAAE8X,eAAeO,EAAU,UAEnF,OADgBE,EAAOzW,OAAS,EAAIuK,IAAMwJ,IAAI0C,GAAQzL,cAAW1M,EA+H1Dia,CAAiCT,EALrB,uBACXvB,EAAW,CAACA,GAAY,IADb,aAEXrL,EAAU,CAACA,GAAW,IAFX,aAGXkN,EAAiB,CAACA,GAAkB,O,OCzFjCI,IC7EHC,GD6EGD,GAlDf,YAcsD,IDuIR7b,ECpJ1C2K,EAaiD,EAbjDA,OACAoR,EAYiD,EAZjDA,eACAC,EAWiD,EAXjDA,aACAzM,EAUiD,EAVjDA,YACAhB,EASiD,EATjDA,QACAC,EAQiD,EARjDA,QACAE,EAOiD,EAPjDA,eACAD,EAMiD,EANjDA,mBACAU,EAKiD,EALjDA,iBACAE,EAIiD,EAJjDA,mBACAD,EAGiD,EAHjDA,kBACAuL,EAEiD,EAFjDA,oCACAhb,EACiD,EADjDA,OAEQkB,EAAW0E,cAAX1E,OACF+Y,EAAW9L,GAAgBjN,EAAOkb,EAAexS,OACjD8E,EAASP,GAAgBjN,EAAOmb,EAAazS,OACnD,EDmJO,CACH0S,oBAAqB,CACjB1N,QAASgN,GAlByBvb,ECnIuC,CAC7E4Z,WACAvL,SACAE,UACAC,UACAuM,WAAYtM,EACZC,iBACAiM,wCD+IInM,QAASqM,GAAwB7a,GACjCyO,mBAAoBzO,EAAM+a,WAC1BrM,eAAgB1O,EAAM0O,gBAE1BwN,kBAAmB,CACf3N,QAASoN,GAAsB3b,GAC/BwO,QAAS0M,GAAsBlb,GAC/ByO,mBAAoBzO,EAAM+a,WAC1BrM,eAAgB1O,EAAM0O,iBC9JtBuN,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,kBAS7B,OACI,cAAC,eAAD,CACIvR,OAAQA,EAAS,cAAC,UAAD,CAASpI,IAAI,MAAb,SAAoBoI,SAAoBhJ,EACzD4N,YAAaA,EACbtP,UAAU,kBAHd,SAII,sBAAKA,UAAU,iCAAf,UACI,cAAC,GAAD,uCACQ8b,GADR,IAEU3M,oBAAmBC,qBAAoBF,oBACzC8M,GACAtc,IAER,cAAC,GAAD,uCACQqc,GADR,IAEU5M,oBAAmBC,qBAAoBF,oBACzC+M,GACAvc,UErBjB,SAASwc,KAKZ,MAAO,CACHC,SAAU,SAACpc,GAAD,OACN,cAAC,EAAD,eAA0CA,KAE9Cqc,mBAAoB,SAACrc,GAAD,OAChB,cAAC,GAAD,eAAoDA,KAExDsc,qBAAsB,SAACtc,GAAD,OAClB,cAAC,GAAD,eAA2DA,KAE/DsM,cAAe,SAACtM,GAAD,OACX,cAAC,GAAD,eAA+CA,KAEnDuc,WAAY,SAACvc,GAAD,OACR,cAAC,GAAD,eAA4CA,KAEhDwc,mBAAoB,SAACxc,GAAD,OAChB,cAAC,GAAD,eAAoDA,KAExDyc,gBAAiB,SAACzc,GAAD,OACb,cAAC,GAAD,eAAiDA,KAErDmR,UAAW,SAACnR,GAAD,OAA4C,cAAC,GAAD,eAA2CA,KAClG0c,KAAM,SAAC1c,GAAD,OAAwD,cAAC,EAAD,eAAqBA,KACnF2c,cAAe,SAAC3c,GAAD,OAAgD,cAAC,EAAD,eAAwBA,KACvF4c,MAAO,SAAC5c,GAAD,OAAmD,cAAC,GAAD,eAAuCA,KACjG6c,YAAa,SAAC7c,GAAD,OACT,cAAC,GAAD,eAA6CA,KAEjD8c,WAAY,SAAC9c,GAAD,OACR,cAAC,GAAD,eAA4CA,KAEhD+c,WAAY,SAAC/c,GAAD,OACR,cAAC,GAAD,eAA4CA,KAEhDgd,gBAAiB,SAAChd,GAAD,OACb,cAAC,GAAD,eAAiDA,KAErDid,OAAQ,SAACjd,GAAD,OAAoD,cAAC,GAAD,eAAwCA,KACpGkd,SAAU,SAACld,GAAD,OACN,cAAC,GAAD,eAA0CA,KAE9CwW,UAAW,SAACxW,GAAD,OACP,cAAC,GAAD,eAA2CA,KAE/Cmd,gBAAiB,SAACnd,GAAD,OACb,cAAC,GAAD,eAAiDA,O,SDpGjD8b,K,yBAAAA,Q,KAMZ,IEIYsB,GFGGC,GAPa,kBAAmD,SAAChU,GAC5E,IAAc,IAAVA,EACA,OAAOyS,GAAqBwB,a,yCEFpC1P,IAAMwL,OAAOmE,MACb3P,IAAMwL,OAAOC,MACbzL,IAAMwL,OAAOoE,M,SAEDJ,K,gCAAAA,E,4CAAAA,E,kCAAAA,E,gCAAAA,E,qCAAAA,Q,KAuBZ,ICzBYK,GDkDGC,GAxBX,eAAC9Q,EAAD,uDAAkC,GAAlC,OACA,SAACvD,GACG,IAAQsU,EAAqC/Q,EAArC+Q,SAAUxG,EAA2BvK,EAA3BuK,IAAKC,EAAsBxK,EAAtBwK,IAAKwG,EAAiBhR,EAAjBgR,aACtBjQ,EAAOQ,GAAgBH,sBAAsB3E,GACnD,GAAIsU,IAAgC,IAApB1H,GAAS5M,GACrB,OAAO+T,GAAkBS,eAE7B,GAAI5H,GAAS5M,GAAQ,CACjB,QAAa1H,IAATgM,EACA,OAAOyP,GAAkBU,qBAE7B,GAAI3G,GAAOvJ,IAAMD,GAAMyM,SAASjD,EAAK,OACjC,OAAOiG,GAAkBW,gBAE7B,GAAI3G,GAAOxJ,IAAMD,GAAMoM,QAAQ3C,EAAK,OAChC,OAAOgG,GAAkBY,eAE7B,GAAIJ,GAAgBhQ,IAAMD,GAAMsQ,aAAe,EAC3C,OAAOb,GAAkBc,oBC/CzCtQ,IAAMwL,OAAOmE,MACb3P,IAAMwL,OAAOC,M,SAEDoE,K,gDAAAA,E,+CAAAA,Q,KAgBZ,ICtBYU,GDsBNC,GACF,SAACxR,GAAD,OACA,SAACvD,GACG,IAAMgV,EAAYX,GAAiB9Q,EAAjB8Q,CAA0BrU,GAC5C,GAAIgV,EACA,OAAOA,EAEX,IAAQhQ,EAAWzB,EAAXyB,OACFV,EAAOQ,GAAgBH,sBAAsB3E,GACnD,OAAKsE,GAASU,GAIVT,IAAMD,GAAMoM,QAAQ1L,EAAQ,OACrBoP,GAAuBa,2BALlC,IAUFC,GACF,SAAC3R,GAAD,OACA,SAACvD,GACG,IAAMgV,EAAYX,GAAiB9Q,EAAjB8Q,CAA0BrU,GAC5C,GAAIgV,EACA,OAAOA,EAEX,IAAQzE,EAAahN,EAAbgN,SACFjM,EAAOQ,GAAgBH,sBAAsB3E,GACnD,OAAKsE,GAASiM,GAGVhM,IAAMD,GAAMyM,SAASR,EAAU,OACxB6D,GAAuBe,4BAJlC,IAcOC,GALe,SAAC7R,GAAD,MAAuB,CACjD8R,iBAAkBN,GAAqBxR,GACvC+R,eAAgBJ,GAAmB3R,K,8BC7D3BuR,K,2DAAAA,E,+DAAAA,E,yDAAAA,E,gEAAAA,Q,KAmBZ,ICrBYS,GDoDGC,GA9BX,eAACjS,EAAD,uDAAoB,GAApB,OACA,SAACvD,GACG,IAAQsU,EAA+B/Q,EAA/B+Q,SAAUmB,EAAqBlS,EAArBkS,iBAClB,IAAwB,IAApB7I,GAAS5M,KAAiC,IAAbsU,EAAjC,CAGA,GAAIA,IAAgC,IAApB1H,GAAS5M,GACrB,OAAO8U,GAA2BY,6BAEtC,GAAI9I,GAAS5M,GAAQ,CACjB,IAAM2V,EAASC,KAAaC,IAAI7V,GAChC,GAAsB,YAAlB2V,EAAOzb,OAAsB,CAI7B,OADoByb,EAAZG,QACI1U,SAFS,wCAGV0T,GAA2BiB,+BAE/BjB,GAA2BkB,4BAEtC,GAAIP,EAEA,GAD8BA,EAAiBQ,MAAK,SAACC,GAAD,OAAOA,IAAMlW,KAE7D,OAAO8U,GAA2BqB,oC,SC7C1CZ,K,0BAAAA,E,wCAAAA,E,2CAAAA,Q,KAcZ,ICbYa,GDkCGC,GApBX,SAAC9S,GAAD,OACA,SAACvD,GACG,MAAyEuD,EAAjE+Q,gBAAR,WAAyE/Q,EAA/C+S,gBAA1B,WAAqChe,EAArC,IAAyEiL,EAAzB6G,gBAAhD,WAA2D9R,EAA3D,EACA,GAAIwB,MAAMC,QAAQiG,GAAQ,CACtB,IAAMuW,EAAWvW,EAAMhG,OACvB,GAAIsa,GAAyB,IAAbiC,EACZ,OAAOhB,GAAkBiB,YAE7B,QAAiBle,IAAbge,GAA0BA,EAAWC,EACrC,OAAOhB,GAAkBkB,mBAE7B,QAAiBne,IAAb8R,GAA0BA,EAAWmM,EACrC,OAAOhB,GAAkBmB,oBAGjC,GAAIpC,IAAaxa,MAAMC,QAAQiG,GAC3B,OAAOuV,GAAkBiB,e,SC9BzBJ,K,oCAAAA,E,gDAAAA,E,oCAAAA,E,oCAAAA,E,uCAAAA,Q,KAuBZ,ICvBYO,GDoDGC,GA5BX,eAACrT,EAAD,uDAAoB,GAApB,OACA,SAACvD,GACG,IAAQsU,EAA6C/Q,EAA7C+Q,SAAUxG,EAAmCvK,EAAnCuK,IAAKC,EAA8BxK,EAA9BwK,IAAvB,EAAqDxK,EAAzBsT,qBAA5B,SACMC,EAAcjK,GAAyB7M,GAE7C,GAAIsU,KACwB,IAApB1H,GAAS5M,IAAsC,kBAAVA,GAA8C,IAAxBA,EAAMyM,OAAOzS,QACxE,OAAOoc,GAAoBW,iBAInC,GAAInK,GAAS5M,GAAQ,CACjB,QAAoB1H,IAAhBwe,EACA,OAAOV,GAAoBY,uBAE/B,IAAsB,IAAlBH,GAA2BI,KAAKC,MAAMJ,KAAiBA,EACvD,OAAOV,GAAoBe,kBAE/B,QAAY7e,IAARwV,GAAqBgJ,EAAchJ,EACnC,OAAOsI,GAAoBgB,iBAE/B,QAAY9e,IAARyV,GAAqB+I,EAAc/I,EACnC,OAAOqI,GAAoBiB,qB,SC9C/BV,K,0CAAAA,E,uDAAAA,Q,KAcZ,ICdYW,GD4BNC,GAAmB,SAACvX,GACtB,SACIA,GACiB,kBAAVA,GACU,IAAjBA,EAAMhG,SACN,WAAW2L,KAAK3F,IACK,MAApBA,EAAMwX,OAAO,IAAkC,MAApBxX,EAAMwX,OAAO,KApBhC,SAACC,GAId,IAHA,IAAIC,EAAW,EACXC,EAAM,EAEDvM,EAAIqM,EAASzd,OAAS,EAAGoR,GAAK,IAAKA,EACxCuM,GAAOC,SAASH,EAASD,OAAOpM,GAAI,IAAMsM,IACpCA,EAAW,IACbA,EAAW,GAGnB,IAAM/B,EAAS,GAAMgC,EAAM,GAC3B,OAAkB,KAAXhC,EAAgB,EAAIA,EAWhBkC,CAAS7X,KAAW4X,SAAS5X,EAAMwX,OAAO,GAAI,KAkB9CM,GAZX,eAACvU,EAAD,uDAAoB,GAApB,OACA,SAACvD,GAEG,GADqBuD,EAAb+Q,WAC4B,IAApB1H,GAAS5M,GACrB,OAAO2W,GAAuBoB,oBAElC,IAAMC,EAAgBT,GAAiBvX,GACvC,OAAI4M,GAAS5M,KAA4B,IAAlBgY,EACZrB,GAAuBsB,+BADlC,K,SCjDIX,K,oCAAAA,E,wCAAAA,E,oCAAAA,E,mCAAAA,Q,KAoBZ,ICpBYY,GD4CGC,GAvBX,eAAC5U,EAAD,uDAAoB,GAApB,OACA,SAACvD,GACG,IAAQsU,EAAmC/Q,EAAnC+Q,SAAU8D,EAAyB7U,EAAzB6U,UAAWpK,EAAczK,EAAdyK,UAE7B,GAAIsG,KACwB,IAApB1H,GAAS5M,IAAsC,kBAAVA,GAA8C,IAAxBA,EAAMyM,OAAOzS,QACxE,OAAOsd,GAAoBe,iBAInC,GAAIzL,GAAS5M,GAAQ,CACjB,GAAqB,kBAAVA,EACP,OAAOsX,GAAoBgB,mBAE/B,QAAkBhgB,IAAd8f,GAA2BpY,EAAMyM,OAAOzS,OAASoe,EACjD,OAAOd,GAAoBiB,iBAE/B,QAAkBjgB,IAAd0V,GAA2BhO,EAAMhG,OAASgU,EAC1C,OAAOsJ,GAAoBkB,oB,SCvC/BN,K,2CAAAA,Q,KAMZ,ICNYO,GDWGC,GALa,kBAAmD,SAAC1Y,GAE5E,OADmBA,IAAU+O,GAAQa,KAAO5P,IAAU+O,GAAQc,IAAM7P,IAAU+O,GAAQe,iBAClExX,EAAY4f,GAAqBS,uB,SCR7CF,K,mBAAAA,Q,KAMZ,ICLYG,GDYGC,GAPmB,kBAAyD,SAAC7Y,GACxF,IAAwB,IAApB4M,GAAS5M,GACT,OAAOyY,GAA2BK,UEF7BC,GAAoB,SAAC/b,GAC9B,MAAwB,kBAAVA,GAA2C,kBAAdA,EAAMD,KCN/Cic,GAA0B,SAAChc,EAAeN,EAAmBuc,GAAnC,gBACzBA,EAAW,UAAMA,EAAN,KAAuB,IADT,OACcvc,EADd,YAC2BM,IAErDkc,GACF,SAACxS,EAAiBuS,GAAlB,OACA,SAACjc,EAAwBN,GACrB,OAAOqc,GAAkB/b,GACnB0J,EAAKyS,cACD,CACIhb,GAAInB,EAAMoc,iBACJpc,EAAMD,IACNic,GAAwBhc,EAAMD,IAAKL,EAAWuc,IAExDjc,EAAMxF,QAEVkP,EAAKyS,cAAc,CAAEhb,GAAI6a,GAAwBhc,EAAON,EAAWuc,OAQlEI,GALiB,SAAC3S,EAAiBuS,GAAlB,MAAqF,CACjH7b,kBAAmB8b,GAAqBxS,EAAMuS,GAC9ChZ,uBAAwB8Y,M,SFpBhBH,K,gCAAAA,E,kCAAAA,E,oCAAAA,E,sCAAAA,E,wCAAAA,E,4BAAAA,E,gCAAAA,E,sCAAAA,E,yCAAAA,Q,KAmCZ,IG5BYU,GH4BNC,GAAa,SAACvM,EAAeC,GAAhB,OAAoD,GAARD,EAAaC,GAEtEuM,GAAqB,SAACxZ,GACxB,QAAIA,GACqC,OAA9BA,EAAMyZ,MAAM,eAuDZC,GAjDX,eAACnW,EAAD,uDAAoB,GAApB,OACA,SAACvD,GACG,IAAQsU,EAAuB/Q,EAAvB+Q,SAAUvG,EAAaxK,EAAbwK,IAAKD,EAAQvK,EAARuK,IACvB,EAAqD9N,GAAS,GAA/C2Z,EAAf,EAAQ3M,MAA4B4M,EAApC,EAA2B3M,QAE3B,GAAIL,GAAS+M,KAAkD,IAAnCH,GAAmBG,GAC3C,OAAOf,GAAkBiB,gBAE7B,GAAIjN,GAASgN,KAAsD,IAArCJ,GAAmBI,GAC7C,OAAOhB,GAAkBkB,kBAG7B,IAAM9M,EAAQH,GAAyB8M,GAAc,KAC/C1M,EAAUJ,GAAyB+M,GAAgB,KAEzD,YAActhB,IAAV0U,EACO4L,GAAkBiB,gBAClB7M,EAAQ,GACR4L,GAAkBmB,aAClB/M,EAAQ,EACR4L,GAAkBoB,sBAEb1hB,IAAZ2U,EACO2L,GAAkBkB,kBAClB7M,EAAU,GACV2L,GAAkBqB,eAClBhN,EAAU,EACV2L,GAAkBsB,mBAGzB5F,GAAsB,IAAVtH,GAA2B,IAAZC,EACpB2L,GAAkBuB,eAGzBpM,GACIwL,GAAWvM,EAAOC,GAAWsM,GAAWxL,EAAIf,MAAOe,EAAId,SAChD2L,GAAkBwB,kBAI7BtM,GACIyL,GAAWvM,EAAOC,GAAWsM,GAAWzL,EAAId,MAAOc,EAAIb,SAChD2L,GAAkByB,wBAFjC,IIrFOC,GAF2B,SAAC,GAAD,IAAG9jB,EAAH,EAAGA,SAAH,OAAkB,qBAAK8J,MAAO,CAAEia,aAAc,QAA5B,SAAuC/jB,KCE7FkC,I,OAAMb,EAAS,UAaN2iB,GAR+B,SAAC,GAAD,QAAGC,eAAH,MAAa,EAAb,EAAgBjkB,EAAhB,EAAgBA,SAAhB,OAC1C,qBAAKI,UAAW8B,GAAID,WAAWC,GAAIX,MAAOW,GAAIP,SAAJ,kBAAwBsiB,KAAlE,SACK1e,IAAMyB,SAASL,IAAI3G,GAAU,SAAC+B,GAAD,OAC1B,qBAAK3B,UAAW8B,GAAIV,QAAQ,QAA5B,SAAsCO,U,uCFDtC+gB,K,cAAAA,E,kBAAAA,E,mBAAAA,Q,KGoBZ,IASYoB,GATNC,GAAsC,CACxC1hB,MAAO,2BACPsX,SAAU,aACVvL,OAAQ,aACR4V,cAAe,eACfC,SAAU,KACVC,aAAc,W,SAGNJ,K,UAAAA,E,UAAAA,E,aAAAA,Q,KAWZ,IAAMrH,GAAOP,KAqIEiI,GA9GwC,SAAC,GAQjD,IAPH5V,EAOE,EAPFA,QACAD,EAME,EANFA,QACAgF,EAKE,EALFA,OACA8Q,EAIE,EAJFA,WAIE,IAHFC,sBAGE,MAHe,GAGf,EAFF9jB,EAEE,EAFFA,SACAsH,EACE,EADFA,SAUMiI,EAAOC,cACPuU,EAAgC,2BAAQP,IAAkBzQ,GAC1D9S,EAAgB4jB,EAxCQ,SAACA,GAAD,mBAAC,eAC5BA,GAD2B,IAE9BG,KAAK,aAAMH,EAAWG,MAAQ,IAC9BC,IAAK/W,GAAgB2W,EAAWI,KAChCC,IAAKhX,GAAgB2W,EAAWK,OAoCGC,CAA0BN,QAAc1iB,EAC3E,OACI,mCACI,cAAC,GAAKgb,cAAN,CACIlc,cAAeA,GAAiB,GAChCD,SAfW,SAACokB,GACpB,IAAMP,EAxBoB,SAACxjB,GAC/B,IAAM4jB,EAAM3W,GAAgBjN,EAAO4jB,KAC7BC,EAAM5W,GAAgBjN,EAAO6jB,KACnC,GAAID,GAAOC,EACP,OAAO,2BACA7jB,GADP,IAEI2jB,KAAK,aAAM3jB,EAAO2jB,MAAQ,IAC1BC,MACAC,QAgBeG,CAA0BD,GAC7C,IAAIP,IH9EgB,SAACA,GACzB,YAA0B1iB,IAAnB0iB,EAAWI,UAAwC9iB,IAAnB0iB,EAAWK,UAAyC/iB,IAApB0iB,EAAWG,KG6E5DM,CAAaT,GAG3B,MAAM,IAAIU,MAAM,mEAFhBvkB,EAAS6jB,IAaL1jB,WAAY,SAACM,GAAD,OACR,eAAC,GAAKyb,KAAN,CAAW5U,SAAUA,EAAUF,iBAAkB8a,GAAwB3S,EAAM,aAA/E,UACI,cAAC,KAAD,CAAK5N,UAAU,IAAf,SACI,cAAC,eAAD,CAAcI,IAAI,KAAlB,SAAwBgiB,EAAWjiB,UAEvC,cAAC,GAAK+Z,mBAAN,CACI9S,KAAMwa,GAAqBS,KAC3B7Z,OAAQ,eACRC,WAAY,CACR,CACIvB,MAAOsZ,GAAUqC,MACjBhY,MAAO,SAEX,CACI3D,MAAOsZ,GAAUsC,QACjBjY,MAAO,WAEX,CACI3D,MAAOsZ,GAAUuC,QACjBlY,MAAO,YAGfhD,SAAU,SAACX,GAEP,OADcqW,GAAiB,CAAE/B,UAAU,GAA7B+B,CAAqCrW,IAE/C,UAAK1H,EACD,OACJ,KAAKid,GAAkBiB,YACnB,MAAO,kBAIvB,cAAC,KAAD,CAAK3d,OAAO,KAAZ,SACI,cAAC,GAAKsa,mBAAN,CACI7R,OAAQ4Z,EAAWN,cACnBtT,oBAAqB,CACjB3D,MAAOuX,EAAW3K,SAClBrQ,KAAMwa,GAAqBU,IAC3BrV,mBAAmB,EACnBb,UACAC,QAASA,GAAWvN,EAAOJ,OAAO6jB,IAClCjW,mBAAoB6V,EACfrZ,QAAO,SAACsU,GAAD,OAAQ8E,GAAaA,EAAW7c,KAAO+X,EAAE/X,MAChDhB,KAAI,SAAC+Y,GAAD,MAAQ,CAAE3Q,KAAM2Q,EAAEkF,IAAK5V,GAAI0Q,EAAEmF,QACtC1a,SAAU,SAACX,GAMP,OALcqU,GAAiB,CAC3BC,UAAU,EACVxG,IAAK5I,EACL6I,IAAK5I,GAHKkP,CAIXrU,IAGPc,SAAU,WACNnJ,YAAW,WACPC,EAAOkkB,cAAcpB,GAAqBW,UAItD9T,kBAAmB,CACf5D,MAAOuX,EAAWlW,OAClB9E,KAAMwa,GAAqBW,IAC3BtV,mBAAmB,EACnBb,QAASA,GAAWtN,EAAOJ,OAAO4jB,IAClCjW,UACAxE,SAAUyU,GAAsB,CAC5B7E,SAAU9L,GAAgB7M,EAAOJ,OAAO4jB,KACxCtN,IAAK5I,EACL6I,IAAK5I,EACLmP,UAAU,IACXgB,eACHxU,SAAU,WACNnJ,YAAW,WACPC,EAAOkkB,cAAcpB,GAAqBU,uB,yCCrIvEW,GA1BwC,SAAC,GAA2C,IAAD,IAAxCf,kBAAwC,MAA3B,GAA2B,EAAvB7P,EAAuB,EAAvBA,SAAUD,EAAa,EAAbA,OAC3E8Q,EAAqB,SAACC,GAAD,gBACpBC,gCAAqBD,EAAMb,KADP,cACiBc,gCAAqBD,EAAMZ,OAYvE,OACI,cAAC,KAAD,CACIc,UAAW,SAACF,GAAD,OAAWA,EAAM9d,IAC5Bie,aAAc,SAACH,GAAD,OAAWD,EAAmBC,IAC5C9Q,SAAUA,EACVD,OAAQA,EACRmR,cAhBsB,SAACJ,GAC3B,IAAMhjB,EAAQ+iB,EAAmBC,GACjC,OACI,qCACK/Q,GAAU,cAAC,KAAD,CAAY7Q,QAAS,kBAAM6Q,EAAO+Q,IAAlC,SAA2ChjB,KACpDiS,GAAU,+BAAOjS,QAYvB8Q,MAAOiR,EAAWpZ,QAAO,SAACqa,GAAD,YAAwB3jB,IAAb2jB,EAAM9d,SCUvCme,ICxCHC,GDwCGD,GA5Bf,YAA6G,IAA/Dpc,EAA8D,EAA9DA,KAAMgF,EAAwD,EAAxDA,QAASC,EAA+C,EAA/CA,QAASxE,EAAsC,EAAtCA,SAAUuJ,EAA4B,EAA5BA,OAC5E,OACI,mCACI,cAAC,GAAD,CACIhK,KAAMA,EACNgK,OAAQA,EACRC,YAAY,SACZxJ,SAAUA,EAAW,SAACX,GAAD,OAAWW,EAASX,EAAOE,SAAQ5H,EACxDoT,SAAU8Q,kBACVpS,SAAU,EACVH,aAAc,gBAAG9S,EAAH,EAAGA,SAAUsH,EAAb,EAAaA,SAAUsM,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,SAA7B,OACV,cAAC,GAAD,CACIgQ,WAAYjQ,EACZkQ,eAAgBjQ,EAChB9F,QAASA,EACTC,QAASA,EACThO,SAAUA,EACVsH,SAAUA,KAGlBuL,aAAc,gBAAGD,EAAH,EAAGA,MAAOmB,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,SAAlB,OACV,cAAC,GAAD,CAAgB6P,WAAYjR,EAAOmB,OAAQA,EAAQC,SAAUA,W,SCjCrEoR,K,sBAAAA,E,sBAAAA,E,oBAAAA,E,sBAAAA,E,4BAAAA,E,kBAAAA,E,4BAAAA,E,8CAAAA,E,sBAAAA,E,YAAAA,E,gCAAAA,E,4BAAAA,E,sCAAAA,E,kCAAAA,E,cAAAA,E,wBAAAA,E,kBAAAA,E,uCAAAA,E,sBAAAA,E,qDAAAA,E,kBAAAA,E,6BAAAA,Q,KCaZ,ICdYA,GDyDGE,GA3CkC,SAAC,GAA2B,IAAzB/f,EAAwB,EAAxBA,UAAWggB,EAAa,EAAbA,OACnDC,EAAaD,EAAbC,SACR,OACI,cAAC,IAAD,CACIzc,KAAMxD,EACNuM,OAAQ,SAACC,GAAD,OACJ,gCACKyT,GACGA,EAAS3iB,OAAS,GAClB2iB,EAASxf,KAAI,SAACyf,EAAUlf,GAAX,OACT,8BACI,cAAC,GAAD,UACI,cAAC,GAAD,CACI8C,KAAK,OACLmD,MAAM,kBACNzD,KAAI,UAAKxD,EAAL,YAAkBgB,EAAlB,SACJiD,SAAU,SAACnJ,GAEP,GADc2gB,GAAmB,CAAE7D,UAAU,GAA/B6D,CAAuC3gB,GAQjD,MANiC,CAC7BuF,IAAK,wBACLvF,OAAQ,CACJqlB,KAAMjQ,GAAS8P,EAAOxc,MAAQwc,EAAOxc,KAA/B,gBAA+CxC,WAZvEA,MAsBlB,cAAC,EAAD,UACI,cAAC,QAAD,CAAO+C,SAAS,SAAS8K,MAAM,EAAMlR,QAAS,kBAAM6O,EAAatM,KAAK,KAAtE,yCEOTkgB,GAxCiC,SAAC,GAAD,IAAGpgB,EAAH,EAAGA,UAAWqgB,EAAd,EAAcA,QAAd,OAC5C,cAAC,IAAD,CACI7c,KAAMxD,EACNuM,OAAQ,SAACC,GAAD,OACJ,gCACK6T,GACGA,EAAQ/iB,OAAS,GACjB+iB,EAAQ5f,KAAI,SAAC6f,EAAStf,GAClB,OACI,8BACI,eAAC,IAAD,CAAOuf,QAAQ,EAAf,UACI,cAAC,GAAD,UACI,cAAC,GAAD,CACIzc,KAAK,OACLmD,MAAM,UACNzD,KAAI,UAAKxD,EAAL,YAAkBgB,EAAlB,SACJiD,SAAUwX,GAAmB,CAAE7D,UAAU,QAGjD,qCACI,+CACA,cAAC,GAAD,CAAU5X,UAAS,UAAKA,EAAL,YAAkBgB,EAAlB,aAAoCgf,OAAQM,WAZjEtf,MAkBtB,cAAC,EAAD,CAAK7E,OAAO,IAAZ,SACI,cAAC,QAAD,CACI4H,SAAS,SACT8K,MAAM,EACNlR,QAAS,kBAAM6O,EAAatM,KAAK,CAAEsD,KAAM,MAAOyc,SAAU,MAH9D,uCCfdtJ,GAAOP,KA0LEoK,GAxLU,WACrB,IAAQ1lB,EAAW0E,cAAX1E,OAEFkP,GADoBxK,cAAlB+E,cACK0F,eACGpC,MAAQgN,SAAS,EAAG,SAASvM,SAC7BT,MAAQ0N,IAAI,EAAG,SAASjN,SACxC,OACI,eAAC,GAAKqO,KAAN,CACIpV,kBAAkB,KAClBD,0BAA0B,EAC1BI,gBAAgB,EAChBG,iBAAkB8a,GAAwB3S,GAJ9C,UAKI,cAAC,GAAD,UACI,cAAC,GAAKoN,gBAAN,CACIxS,OAAQ,cACRpB,KAAMqc,GAAWY,QACjBxc,SAAU,SAACX,GACP,IAAM/C,EAAMyb,KAAsB1Y,GAClC,GAAI/C,EACA,MAAO,CACHF,IAAKE,EACLzF,OAAQ,CAAE4lB,SAAU,mCACpBhE,kBAAkB,SAMrC,EAkBD,cAAC,GAAD,UACI,cAAC,GAAK7F,MAAN,CACIrT,KAAMqc,GAAWc,mBACjB1Z,MAAM,mBACNhD,SAAU,SAACX,GAAD,OhC7EH,SACvBsd,GAEA,IAAI3H,EASJ,OARA2H,EAAYrH,MAAK,SAACsH,GACd,IAAMC,EAAmBD,IACzB,QAAIC,IACA7H,EAAS6H,GACF,MAIR7H,EgCkEa8H,CAA6B,CACzB,kBAAMtF,GAAmB,CAAEC,UAAW,GAAhCD,CAAqCnY,IAC3C,kBAAMwV,GAA0B,CAAElB,UAAU,GAAtCkB,CAA8CxV,WAKpE,cAAC,GAAD,UACI,cAAC,GAAKuT,MAAN,CACIrT,KAAMqc,GAAWmB,0BACjB/Z,MAAM,2BACNhD,SAAU,SAACX,GACP,IAAMhD,EAAQwY,GAA0B,CACpClB,UAAU,EACVmB,iBAAkBje,EAAO6lB,mBAAgB,CAAC7lB,EAAO6lB,yBAAiB/kB,GAFxDkd,CAGXxV,GACH,OAAIhD,IAAU8X,GAA2BqB,+BAC9B,CACHpZ,IAAK,gDACLvF,OAAQ,CACJmmB,KAAM,oDAIX3gB,OAInB,eAAC,EAAD,CAAKnE,OAAO,KAAZ,UACI,cAAC,EAAD,CAAKA,OAAO,IAAIC,UAAU,IAA1B,SACI,cAAC,cAAD,uBAEJ,cAAC,GAAD,UACI,cAAC,GAAD,CAAS4D,UAAU,UAAUqgB,QAASvlB,EAAOulB,SAAW,UAGhE,cAAC,GAAD,UACI,cAAC,GAAD,CACI7c,KAAMqc,GAAWvB,WACjB9Q,OAAQ,CACJsB,SAAU,WACVX,WAAY,aACZI,UAAW,cAEf/F,QAASX,MAAQgN,SAAS,EAAG,QAAQvM,SACrCG,QAASZ,MAAQ0N,IAAI,EAAG,QAAQjN,aAGxC,eAAC,GAAD,WACI,cAAC,GAAKkO,WAAN,CACIhT,KAAMqc,GAAWqB,UACjBja,MAAM,iBACNhD,SAAU0T,GAAiB,CAAEC,UAAU,OAE1C,KAUL,cAAC,GAAD,UACI,cAAC,GAAKrR,cAAN,CACI/C,KAAMqc,GAAWsB,aACjBla,MAAM,iBACNpB,eAAe,EACf5B,SAAUkY,SAGlB,cAAC,GAAD,UACI,eAAC,GAAD,CAAO4B,QAAS,EAAhB,UACI,cAAC,GAAKlH,MAAN,CAAYrT,KAAMqc,GAAWuB,UAAWna,MAAM,UAAUhD,SAAUkY,OAClE,cAAC,GAAKtF,MAAN,CAAYrT,KAAMqc,GAAWwB,SAAUpa,MAAM,YAAYhD,SAAUkY,YAG3E,cAAC,GAAD,UACI,cAAC,GAAD,CACIvX,OAAO,4BACPgG,oBAAqB,CACjBpH,KAAMqc,GAAWyB,kBACjBra,MAAO,MACPwB,QAASV,GAAgBjN,EAAOymB,cAChCtd,SAAUkY,MAEdtR,kBAAmB,CACfrH,KAAMqc,GAAW2B,gBACjBva,MAAO,MACPuB,QAAST,GAAgBjN,EAAO2mB,gBAChCxd,SAAUkY,UAItB,cAAC,GAAD,UACI,cAAC,GAAD,CACI3Y,KAAMqc,GAAWlU,MACjB1E,MAAM,iBACNiF,mBAAoB,MACpBN,cAAe,kBAAM,UAG7B,cAAC,GAAD,UACI,cAAC,GAAKiL,MAAN,CACI5P,MAAM,6DACNzD,KAAMqc,GAAW6B,aACjB/U,YAAY,OACZD,OAAO,QACPI,OAAO,IACPwE,UAAW,EACXrN,SAAU,SAACX,GACP,IAAMhD,EAAQ4Z,GAAmB,CAAE9I,IAAK,EAAGC,IAAK,KAAlC6I,CAA2C5W,GACzD,OAAIhD,IAAUoZ,GAAoBiB,iBACvB,CACHta,IAAKC,EACLxF,OAAQ,CAAEuW,IAAK,MAGnB/Q,IAAUoZ,GAAoBgB,iBACvB,CACHra,IAAKC,EACLxF,OAAQ,CAAEsW,IAAK,IAGhB9Q,WCtMzB5F,GAA4B,CAC9B4jB,WAAY,CACR,CACI7c,GAAI,IACJid,IAAK,IAAIvW,KACTwW,IAAK9W,MAAQ0N,IAAI,EAAG,SAASjN,SAC7BmW,KAAM,IAEV,CACIhd,GAAI,IACJid,IAAK7W,MAAQ0N,IAAI,EAAG,SAASjN,SAC7BqW,IAAK9W,MAAQ0N,IAAI,EAAG,SAASjN,SAC7BmW,KAAM,KAGd4B,QAAS,GACTsB,QAAS,IA0BEC,GAvBO,WAClB,OACI,qCACI,eAAC,EAAD,CAAWrlB,MAAM,4BAAjB,UACI,kDACA,4HAGJ,cAAC,EAAD,CACI7B,cAAeA,GACfD,SAAU,SAACK,GACP+mB,QAAQC,IAAI,sBAAuBhnB,IAEvCF,WAAY,kBACR,cAAC,IAAD,UACI,cAAC,GAAD,aCQTmnB,I,OAhCa,SAAC,GAA8B,IAA5B9kB,EAA2B,EAA3BA,OAAQV,EAAmB,EAAnBA,MACnC,OACI,eAAC,EAAD,CAAKJ,OAAO,KAAZ,UACKI,GAAS,cAAC,UAAD,CAASC,IAAI,KAAb,SAAmBD,IAC7B,cAAC,EAAD,CAAKJ,OAAO,IAAZ,SACI,wBAAOjC,UAAU,sBAAjB,UACI,gCACI,+BACI,sCACA,6CACA,+CAGR,gCACKiG,OAAON,KAAK5C,GAAQwD,KAAI,SAACJ,GACtB,OACI,+BACI,6BACI,+BAAOA,MAEX,6BAAgBpD,EAAOoD,GAAK4gB,MAApB,QACR,6BAAmBhkB,EAAOoD,GAAK2hB,SAAvB,aALH3hB,mB,SJjC7Bwf,K,6CAAAA,E,YAAAA,E,cAAAA,E,uCAAAA,E,YAAAA,E,kCAAAA,E,kCAAAA,E,sBAAAA,E,cAAAA,E,cAAAA,E,gBAAAA,E,kBAAAA,E,aAAAA,Q,kDKkCGoC,GAtByC,SAAC,GAA+B,IAA7B1lB,EAA4B,EAA5BA,MAAOzC,EAAqB,EAArBA,SAAUooB,EAAW,EAAXA,KACxE,EAAsCzf,mBAAS,GAA/C,mBAAO0f,EAAP,KAAoBC,EAApB,KACA,OACI,sBAAKxe,MAAO,CAAEia,aAAc,QAA5B,UACI,cAAC,eAAD,CAAcrhB,IAAI,KAAlB,SAAwBD,IACxB,eAAC,EAAD,CAAKJ,OAAO,IAAZ,UACK+T,GAASgS,IACN,cAAC,KAAD,CACIG,KAAM,CAAC,CAAEpb,MAAO,YAAc,CAAEA,MAAO,SACvC7C,SAAU,SAACY,EAAMxE,GAAP,OAAe4hB,EAAe5hB,MAG/B,IAAhB2hB,GAAqB,mCAAGroB,IACR,IAAhBqoB,GACG,cAAC,KAAD,CAAmBG,SAAS,aAAa1e,MAAO2e,KAAhD,SACKL,W,wCCxBzBra,IAAMwL,OAAOC,MACbzL,IAAMwL,OAAOmP,MACb3a,IAAMwL,OAAOoP,MAoBkB5a,MAAQgN,SAAS,GAAI,SAAS6N,QAAQ,OAAOpa,SAEhDT,MAAQgN,SAAS,EAAG,QAAQ6N,QAAQ,OAAOpa,SAE1CT,MAAQgN,SAAS,EAAG,QAAQ6N,QAAQ,OAAOpa,SAE3CT,MAAQgN,SAAS,EAAG,QAAQ6N,QAAQ,OAAOpa,SAE3CT,MAAQgN,SAAS,EAAG,QAAQ6N,QAAQ,OAAOpa,SAExCT,MAAQ0N,IAAI,EAAG,QAAQoN,MAAM,OAAOra,SA1BpE,IA4Basa,GAAY/a,MAAQS,SCC3B5N,GAA4B,CAC9BmoB,MAAO,IAGLlM,GAAOP,KAgvBE0M,GA9uBW,WACtB,IAAM9Y,EAAOC,cACb,OACI,qCACI,eAAC,EAAD,CAAW1N,MAAM,4BAAjB,UACI,4CACA,gFAGJ,cAAC,EAAD,CACI7B,cAAeA,GACfD,SAAU,SAACK,GACP+mB,QAAQC,IAAI,sBAAuBhnB,IAEvCF,WAAY,SAACM,GAAY,IAAD,kBACd2Y,EAAWzL,GAAgBH,sBAAsB/M,EAAOJ,OAAOioB,iBAC/Dza,EAASF,GAAgBH,sBAAsB/M,EAAOJ,OAAOkoB,iBACnE,OACI,eAAC,GAAKrM,KAAN,CACIpV,kBAAkB,KAClBD,0BAA0B,EAC1BI,gBAAgB,EAChBG,iBAAkB8a,GAAwB3S,GAJ9C,UAKI,eAAC,GAAD,CACIzN,MAAM,SACN2lB,KAAI,yPAFR,UAaI,cAAC,IAAD,UACI,cAAC,GAAK9K,gBAAN,CACI5T,KAAMqc,GAAWoD,wBACjBre,OAAO,8DACPX,SAAU+X,SAElB,cAAC,GAAD,CACIzf,MAAM,gBACNU,OAAM,eACDue,GAAqBS,oBAAsB,CACxCgF,KAAM,iCACNe,QACI,sGAMpB,eAAC,GAAD,CACIzlB,MAAM,WACN2lB,KAAI,4nBAFR,UAyBI,cAAC,IAAD,UACI,cAAC,GAAKrL,MAAN,CACIrT,KAAMqc,GAAWqD,MACjBjc,MAAM,4DACN6F,OAAO,IACP7I,SAAUwX,GAAmB,CACzB7D,UAAU,EACVtG,UAAW,GACXoK,UAAW,QAGvB,cAAC,GAAD,CACInf,MAAM,gBACNU,QAAM,mBACD2d,GAAoBe,iBAAmB,CACpCsF,KAAM,sBACNe,QAAS,uCAHX,cAKDpH,GAAoBgB,mBAAqB,CACtCqF,KAAM,iBACNe,QAAS,4CAPX,cASDpH,GAAoBkB,gBAAkB,CACnCmF,KAAM,iBACNe,QAAS,mEAXX,cAaDpH,GAAoBiB,iBAAmB,CACpCoF,KAAM,iBACNe,QAAS,0DAfX,QAoBd,eAAC,GAAD,CACIzlB,MAAM,OACN2lB,KAAI,2tBAFR,UA2BI,cAAC,IAAD,UACI,cAAC,GAAKpL,YAAN,CACItT,KAAMqc,GAAWsD,KACjBlc,MAAM,+CACN6F,OAAO,IACP7I,SAAUiW,GAAmB,CACzBtC,UAAU,EACVxG,IAAK,KACLC,IAAK,KACL8I,eAAe,QAG3B,cAAC,GAAD,CACI5d,MAAM,gBACNU,QAAM,mBACDyc,GAAoBW,iBAAmB,CACpC4G,KAAM,sBACNe,QAAS,sDAHX,cAKDtI,GAAoBY,uBAAyB,CAC1C2G,KAAM,0BACNe,QACI,gHARN,cAUDtI,GAAoBgB,iBAAmB,CACpCuG,KAAM,gBACNe,QAAQ,oHAZV,cAcDtI,GAAoBiB,iBAAmB,CACpCsG,KAAM,iBACNe,QAAQ,iIAhBV,cAkBDtI,GAAoBe,kBAAoB,CACrCwG,KAAM,4BACNe,QAAQ,wEApBV,QAyBd,eAAC,GAAD,CACIzlB,MAAM,OACN2lB,KAAI,ssBAFR,UA4BI,cAAC,IAAD,UACI,cAAC,GAAK1L,WAAN,CACIhT,KAAMqc,GAAWuD,KACjBnc,MACI,iHAEJmC,kBAAkB,EAClBnF,SAAU0T,GAAiB,CACvBC,UAAU,EACVxG,IAAK,IAAIjJ,KAAK,KAAM,EAAG,GACvBkJ,IAAKuR,GACL/K,cAAc,QAI1B,cAAC,GAAD,CACItb,MAAM,gBACNU,QAAM,mBACDoa,GAAkBS,eAAiB,CAChCmJ,KAAM,sBACNe,QACI,0GAJN,cAMD3K,GAAkBU,qBAAuB,CACtCkJ,KAAM,gBACNe,QACI,0HATN,cAWD3K,GAAkBW,gBAAkB,CACjCiJ,KAAM,qBACNe,QAAQ,uEAAD,OAAgEqB,wBACnE,IAAIlb,KAAK,KAAM,EAAG,IADf,mDAbT,cAiBDkP,GAAkBY,eAAiB,CAChCgJ,KAAM,kBACNe,QACI,gIApBN,QAyBd,eAAC,GAAD,CACIzlB,MAAM,gBACN2lB,KAAI,qnBAFR,UAsBI,cAAC,IAAD,UACI,cAAC,GAAKxL,gBAAN,CACI9R,OAAO,+CACPoR,eAAgB,CACZ/O,MAAO,YACPzD,KAAMqc,GAAWkD,gBACjBO,eAAgB,CAAEC,aAAc,IAAIpb,KAAK,KAAM,EAAG,IAClDlE,SAAUyU,GAAsB,CAC5BtH,IAAK,IAAIjJ,KAAK,KAAM,EAAG,GACvBkJ,IAAK,IAAIlJ,KAAK,KAAM,GAAI,IACxBG,SACAsP,UAAU,EACVC,cAAc,IACfc,kBAEP1C,aAAc,CACVhP,MAAO,YACPzD,KAAMqc,GAAWmD,gBACjBM,eAAgB,CAAEC,aAAc,IAAIpb,KAAK,KAAM,GAAI,KACnDlE,SAAUyU,GAAsB,CAC5BtH,IAAK,IAAIjJ,KAAK,IAAM,EAAG,GACvBkJ,IAAKuR,GACL/O,WACA+D,UAAU,EACVC,cAAc,IACfe,oBAIf,cAAC,GAAD,CACIrc,MAAM,4BACNU,QAAM,mBACDoa,GAAkBS,eAAiB,CAChCmJ,KAAM,cACNe,QACI,0GAJN,cAMD3K,GAAkBU,qBAAuB,CACtCkJ,KAAM,gBACNe,QACI,uGATN,cAWD3K,GAAkBW,gBAAkB,CACjCiJ,KAAM,qBACNe,QAAQ,0EAAD,OAAmEqB,wBACtE,IAAIlb,KAAK,IAAM,EAAG,IADf,wDAbT,cAiBDkP,GAAkBY,eAAiB,CAChCgJ,KAAM,kBACNe,QACI,sIApBN,cAsBDtK,GAAuBa,sBAAwB,CAC5C0I,KAAM,6BACNe,QACI,wKAzBN,KA6BV,cAAC,EAAD,CAAK7lB,OAAO,KAAZ,SACI,cAAC,GAAD,CACII,MAAM,4BACNU,QAAM,mBACDoa,GAAkBS,eAAiB,CAChCmJ,KAAM,cACNe,QACI,uGAJN,cAMD3K,GAAkBU,qBAAuB,CACtCkJ,KAAM,gBACNe,QACI,uGATN,cAWD3K,GAAkBW,gBAAkB,CACjCiJ,KAAM,qBACNe,QAAQ,4EAAD,OAAqEqB,wBACxE,IAAIlb,KAAK,IAAM,EAAG,IADf,wDAbT,cAiBDkP,GAAkBY,eAAiB,CAChCgJ,KAAM,kBACNe,QACI,wIApBN,cAsBDtK,GAAuBe,uBAAyB,CAC7CwI,KAAM,6BACNe,QACI,2IAzBN,UA+BlB,eAAC,GAAD,CACIzlB,MAAM,kCACN2lB,KAAI,u2BAFR,UAyBI,cAAC,IAAD,UACI,cAAC,GAAKrL,MAAN,CACIrT,KAAMqc,GAAWc,mBACjB7T,OAAO,IACPtD,YACI,4EAEJvC,MAAM,8CACNhD,SAAU6U,GAA0B,CAChClB,UAAU,EACVmB,iBAAkB,CAAC,qBAI/B,cAAC,GAAD,CACIxc,MAAM,gBACNU,QAAM,mBACDmb,GAA2BY,6BAA0B,CAClDiI,KAAM,cACNe,QAAS,uCAHX,cAKD5J,GAA2BiB,+BAA4B,CACpD4H,KAAM,eACNe,QACI,mGARN,cAUD5J,GAA2BkB,4BAAyB,CACjD2H,KAAM,eACNe,QACI,mIAbN,cAeD5J,GAA2BqB,+BAA4B,CACpDwH,KAAM,gCACNe,QACI,gHAlBN,QAuBd,eAAC,GAAD,CACIzlB,MAAM,sBACN2lB,KAAI,yaAFR,UAmBI,cAAC,IAAD,UACI,cAAC,GAAK9K,gBAAN,CACI5T,KAAMqc,GAAW2D,UACjB5e,OAAO,kCACPX,SAAUmX,GAAsB,CAAExD,UAAU,QAEpD,cAAC,GAAD,CACIrb,MAAM,gBACNU,QAAM,mBACDgd,GAAuBoB,oBAAsB,CAC1C4F,KAAM,cACNe,QACI,wFAJN,cAMD/H,GAAuBsB,0BAA4B,CAChD0F,KAAM,oBACNe,QACI,iHATN,QAcd,eAAC,GAAD,CACIzlB,MAAM,iBACN2lB,KAAI,iYAFR,UAmBI,cAAC,IAAD,UACI,cAAC,GAAK5L,mBAAN,CACI9S,KAAMqc,GAAWgD,MACjBje,OAAO,sCACPC,WAAY,CACR,CACIoC,MAAO,OACP3D,MAAO,QAEX,CACI2D,MAAO,QACP3D,MAAO,SAEX,CACI2D,MAAO,UACP3D,MAAO,WAEX,CACI2D,MAAO,qDACP3D,MAAO,eAGfW,SAAU0V,GAAiB,CACvB/B,UAAU,EACVgC,SAAU,EACVlM,SAAU,QAItB,cAAC,GAAD,CACInR,MAAM,gBACNU,QAAM,mBACD4b,GAAkBiB,YAAc,CAC7BmH,KAAM,sBACNe,QAAS,0DAHX,cAKDnJ,GAAkBkB,mBAAqB,CACpCkH,KAAM,kBACNe,QAAS,oEAPX,cASDnJ,GAAkBmB,oBAAsB,CACrCiH,KAAM,kBACNe,QACI,2EAZN,QAiBd,eAAC,GAAD,CACIzlB,MAAM,4BACN2lB,KAAI,2NAFR,UAWI,cAAC,IAAD,UACI,cAAC,GAAKjL,gBAAN,CACIzT,KAAMqc,GAAW4D,MACjB7e,OAAO,gCACPyK,OAAQ,CACJ,CACIpI,MAAO,OACP3D,MAAO,QAEX,CACI2D,MAAO,QACP3D,MAAO,SAEX,CACI2D,MAAO,UACP3D,MAAO,WAEX,CACI2D,MAAO,qDACP3D,MAAO,eAGfW,SAAUkY,SAGlB,cAAC,GAAD,CACI5f,MAAM,gBACNU,OAAM,eACD8e,GAA2BK,QAAU,CAClC6E,KAAM,sBACNe,QAAS,mEAKzB,eAAC,GAAD,CACIzlB,MAAM,qBACN2lB,KAAI,2NAFR,UAWI,8EACA,cAAC,IAAD,UACI,cAAC,GAAK3b,cAAN,CACI/C,KAAMqc,GAAW6D,OACjBzc,MAAM,6CACNhD,SAAUkY,SAGlB,cAAC,GAAD,CACI5f,MAAM,gBACNU,OAAM,eACD8e,GAA2BK,QAAU,CAClC6E,KAAM,aACNe,QACI,6FAKpB,eAAC,GAAD,CACIzlB,MAAM,kBACN2lB,KAAI,6NAFR,UAWI,cAAC,IAAD,UACI,cAAC,GAAK7L,SAAN,CACI7S,KAAMqc,GAAW1b,QACjB8C,MAAM,2DACNhD,SAAUqT,SAGlB,cAAC,GAAD,CACI/a,MAAM,gBACNU,OAAM,eACD8Y,GAAqBwB,WAAa,CAC/B0J,KAAM,aACNe,QAAS,8DAMzB,eAAC,GAAD,CACIzlB,MAAM,YACN2lB,KAAI,0jCAFR,UAwCI,cAAC,IAAD,UACI,cAAC,GAAKzR,UAAN,CACIjN,KAAMqc,GAAWxP,KACjBpJ,MAAM,4CACNhD,SAAU,SAACoM,GACP,IAAM/P,EAAQ0c,GAAiB,CAC3BpF,UAAU,EACVxG,IAAK,CAAEd,MAAO,EAAGC,QAAS,GAC1Bc,IAAK,CAAEf,MAAO,EAAGC,QAAS,KAHhByM,CAIX3M,GACH,OAAO/P,EACD,CACID,IAAKC,EACLxF,OAAQ,CAAE6oB,IAAK,sBACfjH,kBAAkB,QAEtB9gB,OAGlB,cAAC,GAAD,CACIW,MAAM,gBACNU,QAAM,mBACDif,GAAkBuB,eAAiB,CAChCwD,KAAM,iCACNe,QAAS,wCAHX,cAKD9F,GAAkBiB,gBAAkB,CACjC8D,KAAM,0CACNe,QAAS,wCAPX,cASD9F,GAAkBoB,iBAAmB,CAClC2D,KAAM,iCACNe,QAAS,+CAXX,cAaD9F,GAAkBkB,kBAAoB,CACnC6D,KAAM,6CACNe,QAAS,2CAfX,cAiBD9F,GAAkBsB,mBAAqB,CACpCyD,KAAM,oCACNe,QAAS,kDAnBX,cAqBD9F,GAAkBmB,aAAe,CAC9B4D,KAAM,uBACNe,QAAS,uCAvBX,cAyBD9F,GAAkBqB,eAAiB,CAChC0D,KAAM,0BACNe,QAAS,0CA3BX,cA6BD9F,GAAkBwB,kBAAoB,CACnCuD,KAAM,eACNe,QAAS,oDA/BX,cAiCD9F,GAAkByB,mBAAqB,CACpCsD,KAAM,eACNe,QAAS,8CAnCX,kBCjtB3B4B,GAxBD,kBACV,mCACI,eAAC,EAAD,CAAWrnB,MAAM,4BAAjB,UACI,2FACA,+WAOA,4CACA,qJAEiB,IACb,mBAAGqB,KAAK,cAAc1D,UAAU,QAAhC,yBAHJ,IAMM,aCVL2pB,GAAwB,CACjC,CACIC,KAAM,YACNvnB,MAAO,UACPwnB,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,iBACNvnB,MAAO,mBACPwnB,cAAe,kBAAM,cAAC,GAAD,MAEzB,CACID,KAAM,aACNvnB,MAAO,aACPwnB,cAAe,kBAAM,cAAC,GAAD,OAQhBC,GAAgB,SAACF,EAAcG,GACxC,OAAOA,EAASC,QAAQJ,IAAS,GC5B/BK,GAAWhpB,EAAS,SAuBXipB,GArBE,WACb,IACgBH,EACZI,cADAC,SAAYL,SAEhB,OACI,qBAAK/pB,UAAU,WAAf,SACK2pB,GAAOpjB,KAAI,SAAC8jB,GAAD,OACR,cAAC,IAAD,CAEIzb,GAAIyb,EAAMT,KACV5pB,UAAWiqB,GAASpoB,WAChBooB,GAAS9oB,MACT8oB,GAASzoB,oBAAoB,SAAUsoB,GAAcO,EAAMT,KAAMG,KALzE,SAOKM,EAAMhoB,OANFgoB,EAAMT,YCShBU,gBAjBoC,SAAC,GAAiB,IAI3DC,EFiBoB,SAACR,GAC3B,OAAOJ,GAAOa,MAAK,SAAClL,GAAD,OAAOwK,GAAcxK,EAAEsK,KAAMG,MElB5BU,CAJ4C,EAAdC,QAE9CN,SAAYL,UAGhB,OACI,qCACI,qBAAK/pB,UAAU,eAAf,SACI,cAAC,GAAD,MAEJ,yBAAS0J,MAAO,CAAEihB,SAAU,UAAY3qB,UAAU,cAAlD,SACKuqB,EAAcA,EAAYV,gBAAkB,cAAC,GAAD,YCQ9Ce,I,OApBC,WACZ,OACI,uBAAM5qB,UAAU,UAAhB,UACI,yBAAQA,UAAU,SAAlB,UACI,sBAAMA,UAAU,UAAhB,SACI,cAAC,EAAD,MAEJ,sBAAMA,UAAU,gBAAhB,SACI,cAAC,eAAD,CAAcsC,IAAI,KAAlB,oCAGR,qBAAKtC,UAAU,iBAAf,SACI,cAAC,IAAD,UACI,cAAC,GAAD,aCCL6qB,I,OAVO,WAClB,OACI,cAAC,cAAD,CAAavoB,IAAI,MAAjB,SACI,cAAC,EAAD,CAAiB5C,OAAQ,KAAzB,SACI,cAAC,GAAD,UCVhBorB,IAAMC,cAAc,SACpBC,IAAS3Y,OAAO,cAAC,GAAD,IAAS3N,SAASC,eAAe,U","file":"static/js/main.43c18203.chunk.js","sourcesContent":["export const appMessages = {\n    nb: {\n        invalidTime: 'Timer og minutter er ikke gyldig for {dag}',\n        'letters.listIsEmpty': 'Whooa {value}',\n        'hasKids.yesOrNoIsUnanswered': 'You have not answered {question}',\n        'fødselsnummer.disallowedFødselsnummer': 'Du kan ikke bruke dette fødselsnummeret',\n        'fødselsnummer.disallowedFødselsnummerCustom': 'Du kan ikke bruke dette fødselsnummeret {info}',\n        'søskennavn.mangler': 'Ett av søskenene til {navn} mangler navn',\n    },\n    nn: {},\n};\n","const ferieuttakMessages = {\n    nb: require('./ferieuttak.nb.json'),\n    nn: require('./ferieuttak.nn.json'),\n};\n\nexport default ferieuttakMessages;\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { appMessages } from './messages';\nimport ferieMessages from '../../examples/formik-example/ferieuttak-example/ferieuttakMessages';\nimport { MessageFileFormat } from '../../utils/devIntlUtils';\n\nexport interface IntlProviderProps {\n    locale: string;\n    onError?: (error: any) => void;\n}\n\nconst allMessages: MessageFileFormat = {\n    nb: {\n        ...appMessages.nb,\n        ...ferieMessages.nb,\n    },\n    nn: {\n        ...appMessages.nn,\n        ...ferieMessages.nn,\n    },\n};\n\nconst AppIntlProvider: React.FunctionComponent<IntlProviderProps> = ({ locale, onError, children }) => {\n    const messages = locale === 'nb' ? allMessages.nb : allMessages.nn;\n    return (\n        <IntlProvider locale={locale} messages={messages} onError={onError}>\n            {children}\n        </IntlProvider>\n    );\n};\n\nexport default AppIntlProvider;\n","import React from 'react';\n\nfunction NAVLogo(props) {\n    return (\n        <svg className=\"prefix__navLogo\" width={90} viewBox=\"0 0 269 169\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#C30000\"\n                    d=\"M125.31 168.942c-46.642 0-84.46-37.817-84.46-84.465C40.85 37.824 78.667 0 125.31 0c46.657 0 84.48 37.824 84.48 84.477 0 46.648-37.823 84.465-84.48 84.465zM0 121.359l17.265-42.73h16.589l-17.243 42.73zm213.044 0l17.044-42.73h9.044l-17.043 42.73zM246.564 121.359l17.04-42.73h4.803l-17.043 42.731z\"\n                />\n                <path\n                    fill=\"#FEFEFE\"\n                    d=\"M197.36 78.63h-15.016s-1.035 0-1.4.914l-8.31 25.439-8.304-25.44c-.366-.913-1.407-.913-1.407-.913h-28.872c-.625 0-1.149.522-1.149 1.143v8.639c0-6.853-7.292-9.782-11.562-9.782-9.562 0-15.963 6.298-17.956 15.873-.108-6.352-.636-8.628-2.347-10.96-.786-1.141-1.922-2.101-3.159-2.895-2.547-1.492-4.834-2.018-9.749-2.018h-5.77s-1.044 0-1.412.914l-5.25 13.013V79.773c0-.621-.52-1.143-1.145-1.143H61.198s-1.03 0-1.406.914l-5.459 13.53s-.545 1.354.701 1.354h5.133v25.784c0 .64.504 1.147 1.147 1.147h13.238c.624 0 1.144-.507 1.144-1.147V94.428h5.16c2.961 0 3.588.08 4.74.618.694.262 1.32.792 1.66 1.403.698 1.314.873 2.892.873 7.545v16.218c0 .64.514 1.147 1.15 1.147h12.687s1.434 0 2.001-1.416l2.812-6.95c3.74 5.237 9.893 8.366 17.541 8.366h1.671s1.443 0 2.014-1.416l4.897-12.128v12.397c0 .64.524 1.147 1.15 1.147h12.951s1.43 0 2.003-1.416c0 0 5.18-12.861 5.2-12.958h.008c.2-1.07-1.153-1.07-1.153-1.07h-4.623V83.847l14.545 36.096c.568 1.416 2 1.416 2 1.416h15.301s1.44 0 2.008-1.416l16.125-39.93c.558-1.383-1.057-1.383-1.057-1.383zm-64.458 27.285h-8.7c-3.463 0-6.28-2.804-6.28-6.271 0-3.461 2.817-6.283 6.28-6.283h2.433c3.454 0 6.267 2.822 6.267 6.283v6.27z\"\n                />\n            </g>\n        </svg>\n    );\n}\n\nexport default NAVLogo;\n","import React from 'react';\nimport { Formik, FormikProps, FormikConfig } from 'formik';\n\nexport interface TypedFormikWrapperProps<FormValues> extends Omit<Partial<FormikProps<FormValues>>, 'initialValues'> {\n    initialValues: Partial<FormValues>;\n    renderForm: (formik: FormikProps<FormValues>) => React.ReactNode;\n    onSubmit: (values: Partial<FormValues>) => void;\n}\n\ntype Props<FormValues> = TypedFormikWrapperProps<FormValues> & FormikConfig<Partial<FormValues>>;\n\nfunction TypedFormikWrapper<FormValues>(props: Props<FormValues>) {\n    const { onSubmit, initialValues, renderForm: renderFormContent, ...restProps } = props;\n    return (\n        <Formik<Partial<FormValues>>\n            initialValues={initialValues}\n            onSubmit={(values, { setSubmitting, setTouched }) => {\n                setSubmitting(false);\n                setTouched({});\n                setTimeout(() => {\n                    onSubmit(values);\n                });\n            }}\n            {...restProps}>\n            {(formik: FormikProps<FormValues>) => renderFormContent(formik)}\n        </Formik>\n    );\n}\nexport default TypedFormikWrapper;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React from 'react';\nimport bemHelper from '../../utils/bemUtils';\nimport './box.less';\n\ntype BoxMargin = 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' | 'none';\n\ninterface BoxProps {\n    margin?: BoxMargin;\n    padBottom?: BoxMargin;\n    textAlignCenter?: boolean;\n    className?: string;\n}\n\nconst bem = bemHelper('box');\n\nconst Box: React.FunctionComponent<BoxProps> = ({ margin, padBottom, className, textAlignCenter, children }) => {\n    const classNames = bem.classNames(\n        bem.block,\n        bem.modifierConditional(margin, margin !== undefined),\n        bem.modifierConditional(`bottom-${padBottom}`, padBottom !== undefined),\n        {\n            [bem.modifier('textAlignCenter')]: textAlignCenter,\n            [`${className}`]: className !== undefined,\n        }\n    );\n    return <div className={classNames}>{children}</div>;\n};\n\nexport default Box;\n","import React from 'react';\nimport { Ingress, Undertittel } from 'nav-frontend-typografi';\nimport Box from '../box/Box';\n\ninterface Props {\n    title: string;\n}\n\nconst PageIntro: React.FunctionComponent<Props> = ({ title, children }) => (\n    <>\n        <Box margin=\"m\">\n            <Box>\n                <Undertittel>{title}</Undertittel>\n            </Box>\n            {children && (\n                <Box padBottom=\"xl\">\n                    <Ingress tag=\"div\">{children}</Ingress>\n                </Box>\n            )}\n        </Box>\n    </>\n);\n\nexport default PageIntro;\n","import { FieldInputProps, FormikErrors, FormikProps, getIn, isObject } from 'formik';\nimport { TypedFormikFormContextType } from '../components/typed-formik-form/TypedFormikForm';\nimport { ErrorTypeChecker, NavFrontendSkjemaFeil } from '../types';\n\nexport const getFeilPropForFormikInput = ({\n    feil,\n    field,\n    form,\n    context,\n}: {\n    feil: NavFrontendSkjemaFeil;\n    field: FieldInputProps<any>;\n    form: FormikProps<any>;\n    context?: TypedFormikFormContextType;\n}): NavFrontendSkjemaFeil | undefined => {\n    return feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined);\n};\n\nexport const getErrorForField = <FormValues>(\n    elementName: string,\n    errors: FormikErrors<FormValues>\n): any | undefined => {\n    const fieldErrors: Array<string> | string = getIn(errors, elementName);\n    if (fieldErrors === null) {\n        return undefined;\n    }\n    if (Array.isArray(fieldErrors)) {\n        if (fieldErrors.length === 1 && fieldErrors[0] === null) {\n            /** Filter out fieldArray errors containing only null item */\n            return undefined;\n        }\n        if (fieldErrors.length >= 1) {\n            return fieldErrors[0];\n        }\n    } else {\n        return fieldErrors;\n    }\n};\n\nexport const isValidationErrorsVisible = (formik: FormikProps<any>): boolean => {\n    return formik?.status?.showErrors === true;\n};\n\nexport const getAllFieldsWithErrors = (allErrors: any, errorObjectChecker?: ErrorTypeChecker): string[] => {\n    const getFieldsWithErrors = (errors: any, keys: string[] = [], parentKey?: string): string[] => {\n        const createFieldKey = (fieldName: string): string => {\n            return parentKey ? `${parentKey}.${fieldName}` : fieldName;\n        };\n        if (errors) {\n            if (parentKey && isObject(errors) && errorObjectChecker && errorObjectChecker(errors)) {\n                keys.push(parentKey);\n                return keys;\n            }\n            Object.keys(errors).forEach((key) => {\n                const error = errors[key];\n                if (Array.isArray(error)) {\n                    error.forEach((err, idx) => {\n                        getFieldsWithErrors(err, keys, createFieldKey(`${key}.${idx}`));\n                    });\n                } else {\n                    if (isObject(error)) {\n                        if (errorObjectChecker && errorObjectChecker(error)) {\n                            keys.push(createFieldKey(key));\n                            return;\n                        }\n                        return getFieldsWithErrors(error, keys, createFieldKey(`${key}`));\n                    }\n                    keys.push(createFieldKey(key));\n                }\n            });\n        }\n        return keys;\n    };\n    return getFieldsWithErrors(allErrors, []);\n};\n","import React from 'react';\nimport Lenke from 'nav-frontend-lenker';\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nconst stopClickEvent = (evt: React.MouseEvent<HTMLAnchorElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n};\n\nconst ValidationErrorLink: React.FunctionComponent<Props> = ({ onClick, children, className }) => {\n    return (\n        <Lenke\n            className={className}\n            href=\"#\"\n            onClick={(evt) => {\n                stopClickEvent(evt);\n                onClick();\n            }}>\n            {children}\n        </Lenke>\n    );\n};\n\nexport default ValidationErrorLink;\n","import React, { useEffect, useRef } from 'react';\nimport { Feiloppsummering, FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport ValidationErrorLink from './ValidationErrorLink';\n\ninterface Props {\n    title?: string;\n    errorMessages: FeiloppsummeringFeil[];\n    focusOnMount?: boolean;\n}\n\nconst ValidationSummary: React.FunctionComponent<Props> = ({ title, errorMessages }) => {\n    const summaryEl = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        const { current } = summaryEl;\n        if (current !== null) {\n            current.focus();\n        }\n    }, []);\n    return (\n        <Feiloppsummering\n            innerRef={summaryEl}\n            tittel={title || 'Feil i skjema'}\n            feil={errorMessages}\n            customFeilRender={(feil) => (\n                <ValidationErrorLink\n                    className={'lenke'}\n                    onClick={() => {\n                        const elementById = document.getElementById(feil.skjemaelementId);\n                        const elementByName = document.getElementsByName(feil.skjemaelementId)[0];\n                        if (elementById) {\n                            elementById.focus();\n                        } else if (elementByName) {\n                            elementByName.focus();\n                        }\n                    }}>\n                    {feil.feilmelding}\n                </ValidationErrorLink>\n            )}\n        />\n    );\n};\nexport default ValidationSummary;\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FeiloppsummeringFeil } from 'nav-frontend-skjema';\nimport { getAllFieldsWithErrors, getErrorForField } from '../../utils/typedFormErrorUtils';\nimport ValidationSummary from '../helpers/ValidationSummary';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\nfunction FormikValidationErrorSummary() {\n    const context = React.useContext(TypedFormikFormContext);\n    const formik = useFormikContext();\n    if (formik && context && context.showErrors) {\n        const fieldsWithErrors =\n            !formik.isValid && getAllFieldsWithErrors(formik.errors, context.isHandledErrorTypeChecker);\n        const errorMessages: FeiloppsummeringFeil[] | undefined = fieldsWithErrors\n            ? fieldsWithErrors.map((fieldName) => {\n                  const error = getErrorForField(fieldName, formik.errors);\n                  const feil: FeiloppsummeringFeil = {\n                      feilmelding: context.fieldErrorHandler ? context.fieldErrorHandler(error, fieldName) : error,\n                      skjemaelementId: fieldName,\n                  };\n                  return feil;\n              })\n            : undefined;\n\n        if (errorMessages) {\n            return <ValidationSummary errorMessages={errorMessages} />;\n        }\n    }\n\n    return null;\n}\n\nexport default FormikValidationErrorSummary;\n","import React from 'react';\nimport './buttonRow.less';\n\nexport interface Props {\n    align?: 'left' | 'right' | 'center';\n    layout?: 'normal' | 'mobile-50-50' | 'stretch';\n}\n\nconst ButtonRow: React.FunctionComponent<Props> = ({ children, align = 'center', layout = 'normal' }) => {\n    const cls = `buttonRow buttonRow--${align} buttonRow--${layout}`;\n    return (\n        <div className={cls}>\n            {React.Children.map(children, (knapp, index) => (\n                <span key={index} className=\"buttonRow__button\">\n                    {knapp}\n                </span>\n            ))}\n        </div>\n    );\n};\n\nexport default ButtonRow;\n","import React, { createContext, useEffect, useRef, useState } from 'react';\nimport { FieldInputProps, FormikProps, useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport {\n    CancelButtonTypes,\n    CustomFormErrorHandler,\n    ErrorTypeChecker,\n    FieldErrorHandler,\n    NavFrontendSkjemaFeil,\n} from '../../types';\nimport { getErrorForField, isValidationErrorsVisible } from '../../utils/typedFormErrorUtils';\nimport FormikValidationErrorSummary from '../formik-validation-error-summary/FormikValidationErrorSummary';\nimport ButtonRow from '../helpers/button-row/ButtonRow';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\nexport interface TypedFormikFormProps<FormValues, ErrorType> {\n    children: React.ReactNode;\n    className?: string;\n    includeValidationSummary?: boolean;\n    includeButtons?: boolean;\n    resetFormOnCancel?: boolean;\n    submitButtonLabel?: string;\n    cancelButtonLabel?: string;\n    id?: string;\n    cancelButtonType?: CancelButtonTypes;\n    runDelayedFormValidation?: boolean;\n    formErrorHandler?: CustomFormErrorHandler<ErrorType>;\n    formFooter?: React.ReactNode;\n    noButtonsContentRenderer?: () => React.ReactNode;\n    cleanup?: (values: FormValues) => FormValues;\n    onValidSubmit?: () => void;\n    onCancel?: () => void;\n}\n\nexport type TypedFormikFormContextType = {\n    showErrors: boolean;\n    fieldErrorHandler?: FieldErrorHandler<any>;\n    isHandledErrorTypeChecker?: ErrorTypeChecker<any>;\n    getAndRenderFieldErrorMessage: (field: FieldInputProps<any>, form: FormikProps<any>) => NavFrontendSkjemaFeil;\n    onAfterFieldValueSet: () => void;\n};\n\ninterface SubmitProps {\n    isSubmitting: boolean;\n    isValid: boolean;\n}\n\nconst userHasSubmittedValidForm = (oldProps: SubmitProps, currentProps: SubmitProps) =>\n    oldProps.isSubmitting === true && currentProps.isSubmitting === false && currentProps.isValid === true;\n\nexport const TypedFormikFormContext = createContext<TypedFormikFormContextType | undefined>(undefined);\n\nfunction TypedFormikForm<FormValues, ErrorType>({\n    children,\n    resetFormOnCancel,\n    className,\n    includeValidationSummary,\n    submitButtonLabel,\n    cancelButtonLabel,\n    id,\n    includeButtons = true,\n    runDelayedFormValidation,\n    cancelButtonType,\n    formErrorHandler,\n    formFooter,\n    onCancel,\n    onValidSubmit,\n    noButtonsContentRenderer,\n    cleanup,\n}: TypedFormikFormProps<FormValues, ErrorType>) {\n    const formik = useFormikContext<FormValues>();\n    const { handleSubmit, submitCount, setStatus, resetForm, isSubmitting, isValid, isValidating } = formik;\n    const [formSubmitCount, setFormSubmitCout] = useState(submitCount);\n    const [cleanupState, setCleanupState] = useState({ hasCleanedUp: false, counter: 0 });\n\n    const ref = useRef<any>({ isSubmitting, isValid });\n\n    useEffect(() => {\n        ref.current = {\n            isSubmitting,\n            isValid,\n        };\n        if (!isSubmitting) {\n            if (submitCount > formSubmitCount) {\n                if (isValid) {\n                    setFormSubmitCout(submitCount);\n                }\n                setStatus({ showErrors: true });\n            } else {\n                setStatus({ showErrors: false });\n            }\n        }\n    }, [submitCount, setStatus, formSubmitCount, isSubmitting, isValid, isValidating]);\n\n    useEffect(() => {\n        cleanupState.hasCleanedUp && handleSubmit();\n    }, [cleanupState, handleSubmit]);\n\n    if (userHasSubmittedValidForm(ref.current, { isValid, isSubmitting })) {\n        if (onValidSubmit) {\n            onValidSubmit();\n        }\n    }\n\n    const runCleanup = (evt: React.FormEvent<HTMLFormElement>) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n        formik.setValues(cleanup ? cleanup(formik.values) : formik.values);\n        setCleanupState({ hasCleanedUp: true, counter: cleanupState.counter + 1 });\n    };\n\n    const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n        setCleanupState({ ...cleanupState, hasCleanedUp: false });\n        if (cleanup !== undefined) {\n            runCleanup(evt);\n        } else {\n            handleSubmit(evt);\n        }\n    };\n\n    const createTypedFormikFormContext = (): TypedFormikFormContextType => {\n        const showErrors = isValidationErrorsVisible(formik);\n        return {\n            showErrors,\n            fieldErrorHandler: (error, fieldName) => {\n                return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, fieldName) : error;\n            },\n            isHandledErrorTypeChecker: formErrorHandler?.isHandledErrorTypeFunc,\n            getAndRenderFieldErrorMessage: (field, form) => {\n                if (showErrors) {\n                    const error = getErrorForField(field.name, form.errors);\n                    if (error) {\n                        return formErrorHandler ? formErrorHandler.fieldErrorHandler(error, field.name) : error;\n                    }\n                }\n                return undefined;\n            },\n            onAfterFieldValueSet: () => {\n                if (runDelayedFormValidation && formik.status && formik.status.showErrors) {\n                    setTimeout(() => {\n                        formik.validateForm();\n                    });\n                }\n            },\n        };\n    };\n\n    return (\n        <form onSubmit={onSubmit} noValidate={true} className={className} id={id} autoComplete=\"off\">\n            <TypedFormikFormContext.Provider value={createTypedFormikFormContext()}>\n                {children}\n                {includeValidationSummary && !formik.isValid && isValidationErrorsVisible(formik) && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <FormikValidationErrorSummary />\n                    </div>\n                )}\n                {includeButtons && (\n                    <div style={{ marginTop: '2rem' }}>\n                        <ButtonRow layout={onCancel ? 'stretch' : 'normal'}>\n                            <Knapp type=\"hoved\" htmlType=\"submit\">\n                                {submitButtonLabel || 'Ok'}\n                            </Knapp>\n                            {onCancel && (\n                                <Knapp\n                                    type={cancelButtonType || 'flat'}\n                                    htmlType=\"button\"\n                                    onClick={() => {\n                                        if (resetFormOnCancel) {\n                                            resetForm();\n                                        }\n                                        onCancel();\n                                    }}>\n                                    {cancelButtonLabel || 'Avbryt'}\n                                </Knapp>\n                            )}\n                        </ButtonRow>\n                    </div>\n                )}\n                {includeButtons === false && noButtonsContentRenderer && (\n                    <div style={{ marginTop: '2rem' }}>{noButtonsContentRenderer()}</div>\n                )}\n                {formFooter && <div style={{ marginTop: '2rem' }}>{formFooter}</div>}\n            </TypedFormikFormContext.Provider>\n        </form>\n    );\n}\n\nexport default TypedFormikForm;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Checkbox, CheckboxProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<CheckboxProps, 'name'> {\n    name: FieldName;\n    afterOnChange?: (newValue: boolean) => void;\n}\n\nexport type FormikCheckboxProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCheckbox<FieldName, ErrorType>({\n    name,\n    validate,\n    afterOnChange,\n    feil,\n    ...restProps\n}: FormikCheckboxProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Checkbox\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        checked={field.value === true}\n                        autoComplete=\"off\"\n                        onChange={(evt) => {\n                            const newValue = evt.target.checked;\n                            form.setFieldValue(field.name, newValue);\n                            if (afterOnChange) {\n                                afterOnChange(newValue);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckbox;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { CheckboksPanelGruppe, CheckboksPanelGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<CheckboksPanelGruppeProps, 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikCheckboxPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nconst removeElementFromArray = (element: any, array: any[], keyProp?: string) =>\n    array.filter((el) => {\n        return keyProp ? el[keyProp] !== element[keyProp] : el !== element;\n    });\n\nconst isCheckboxChecked = (fieldValues: any[], value: any): boolean => {\n    return (fieldValues || []).includes(value);\n};\n\nfunction FormikCheckboxPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    legend,\n    feil,\n    checkboxes,\n    useTwoColumns,\n    ...restProps\n}: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CheckboksPanelGruppe\n                        {...restProps}\n                        {...field}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        checkboxes={checkboxes.map((cb) => ({\n                            ...cb,\n                            checked: isCheckboxChecked(field.value, cb.value),\n                            autoComplete: 'off',\n                        }))}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        onChange={(_evt, value) => {\n                            if (isCheckboxChecked(field.value, value)) {\n                                form.setFieldValue(`${name}`, removeElementFromArray(value, field.value));\n                            } else {\n                                if (field.value) {\n                                    field.value.push(value);\n                                } else {\n                                    field.value = [value];\n                                }\n                                form.setFieldValue(`${name}`, field.value);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }\n                        }}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCheckboxPanelGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { BekreftCheckboksPanel, BekreftCheckboksPanelProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<BekreftCheckboksPanelProps, 'onChange' | 'checked'> {\n    name: FieldName;\n}\n\nexport type FormikConfirmationCheckboxPanelProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    Omit<TypedFormInputValidationProps<FieldName, ErrorType>, 'info'>;\n\nfunction FormikConfirmationCheckboxPanel<FieldName, ErrorType>({\n    children,\n    name,\n    feil,\n    validate,\n    inputProps,\n    ...restProps\n}: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <BekreftCheckboksPanel\n                        {...restProps}\n                        inputProps={{ ...inputProps, autoComplete: 'off' }}\n                        {...field}\n                        checked={field.value === true}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(`${name}`, (evt as React.ChangeEvent<HTMLInputElement>).target.checked);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}>\n                        {children}\n                    </BekreftCheckboksPanel>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikConfirmationCheckboxPanel;\n","import * as countries from 'i18n-iso-countries';\n\ncountries.registerLocale(require('i18n-iso-countries/langs/nb.json'));\ncountries.registerLocale(require('i18n-iso-countries/langs/nn.json'));\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    return countries.getName(alphaCode, locale);\n};\n\nexport const getCountries = () => countries;\n","import React from 'react';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { getCountries } from '../../utils/countryUtils';\n\ninterface Props extends Omit<SelectProps, 'onChange' | 'children'> {\n    label: React.ReactNode;\n    name: string;\n    defaultValue?: string;\n    locale?: string;\n    onChange: (countryCode: string) => void;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type ChangeEvent = React.ChangeEvent<HTMLSelectElement>;\n\ninterface CountryOptionsCache {\n    locale: string;\n    options: React.ReactNode[];\n}\n\nconst filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE':\n            case 'BG':\n            case 'DK':\n            case 'EE':\n            case 'FI':\n            case 'FR':\n            case 'GR':\n            case 'IE':\n            case 'IS':\n            case 'IT':\n            case 'HR':\n            case 'CY':\n            case 'LV':\n            case 'LI':\n            case 'LT':\n            case 'LU':\n            case 'MT':\n            case 'NL':\n            case 'PL':\n            case 'PT':\n            case 'RO':\n            case 'SK':\n            case 'SI':\n            case 'ES':\n            case 'GB':\n            case 'SE':\n            case 'CZ':\n            case 'DE':\n            case 'HU':\n            case 'AT':\n            case 'CH':\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nconst createCountryOptions = (\n    onluEuAndEftaCountries: boolean,\n    locale: string,\n    useAlpha3Code = true\n): React.ReactNode[] => {\n    const lang = locale === 'en' ? 'nn' : 'nb';\n    const countries = getCountries();\n\n    const names: [string, any][] = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) =>\n            filteredListEØSCountries(countryOptionValue[0], onluEuAndEftaCountries)\n        )\n        .map((countryOptionValue: string[]) => (\n            <option\n                key={countryOptionValue[0]}\n                value={useAlpha3Code ? countries.alpha2ToAlpha3(countryOptionValue[0]) : countryOptionValue[0]}>\n                {countryOptionValue[1]}\n            </option>\n        ));\n};\n\nclass CountrySelect extends React.Component<Props> {\n    countryOptionsCache: CountryOptionsCache | undefined;\n    constructor(props: Props) {\n        super(props);\n        this.getCountryOptions = this.getCountryOptions.bind(this);\n        this.updateCache = this.updateCache.bind(this);\n    }\n\n    updateCache(locale: string) {\n        this.countryOptionsCache = {\n            locale,\n            options: createCountryOptions(\n                this.props.showOnlyEuAndEftaCountries ? this.props.showOnlyEuAndEftaCountries : false,\n                locale,\n                this.props.useAlpha3Code\n            ),\n        };\n    }\n\n    getCountryOptions(locale: string): React.ReactNode[] {\n        if (!this.countryOptionsCache || locale !== this.countryOptionsCache.locale) {\n            this.updateCache(locale);\n        }\n        return this.countryOptionsCache && this.countryOptionsCache.options ? this.countryOptionsCache.options : [];\n    }\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onChange, name, showOnlyEuAndEftaCountries, locale, useAlpha3Code, ...restProps } = this.props;\n        return (\n            <Select name={name} {...restProps} onChange={(e) => onChange(e.target.value)} autoComplete=\"off\">\n                <option value=\"\" />\n                {this.getCountryOptions(locale || 'nb')}\n            </Select>\n        );\n    }\n}\n\nexport default CountrySelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport CountrySelect from './CountrySelect';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name' | 'children'> {\n    name: FieldName;\n    showOnlyEuAndEftaCountries?: boolean;\n    useAlpha3Code?: boolean;\n}\n\nexport type FormikCountrySelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikCountrySelect<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    label,\n    useAlpha3Code = true,\n    showOnlyEuAndEftaCountries,\n}: FormikCountrySelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <CountrySelect\n                        {...field}\n                        label={label}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        showOnlyEuAndEftaCountries={showOnlyEuAndEftaCountries}\n                        useAlpha3Code={useAlpha3Code}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikCountrySelect;\n","import React, { forwardRef } from 'react';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { guid } from 'nav-frontend-js-utils';\n\nconst SkjemagruppeQuestion = forwardRef(function SkjemagruppeQuestion(props: SkjemaGruppeProps, ref: React.Ref<any>) {\n    const { legend, feil, tag, children, className, id, ...rest } = props;\n\n    const isFieldsetTag = tag === undefined || tag === 'fieldset';\n    const titleId = `${id || guid()}__title`;\n\n    return (\n        <SkjemaGruppe\n            ref={ref}\n            tabIndex={id ? -1 : undefined}\n            id={id}\n            className={`${className ? className : ''} singleInputWrapper`}\n            tag={tag ? tag : legend ? 'fieldset' : 'div'}\n            feil={feil}\n            role={isFieldsetTag ? undefined : 'group'}\n            aria-labelledby={isFieldsetTag && legend ? undefined : titleId}\n            legend={isFieldsetTag ? legend ? <Element tag=\"div\">{legend}</Element> : undefined : undefined}\n            {...rest}>\n            {isFieldsetTag === false && legend && (\n                <div className=\"skjemaelement__label divLegend\" id={titleId}>\n                    {legend}\n                </div>\n            )}\n            {children}\n        </SkjemaGruppe>\n    );\n});\n\nexport default SkjemagruppeQuestion;\n","import dayjs from 'dayjs';\nimport { DatepickerLimitations, DatepickerDateRange, isISODateString } from 'nav-datovelger';\nimport { DatepickerLimitiations } from './FormikDatepicker';\n\nconst isoStringFormat = 'YYYY-MM-DD';\n\nexport const dateToISOString = (date?: Date) => (date ? dayjs(date).format(isoStringFormat) : '');\nexport const ISOStringToDate = (dateString = ''): Date | undefined => getDateFromDateString(dateString);\n\nconst parseDateLimitations = ({\n    minDate,\n    maxDate,\n    disabledDateRanges = [],\n    disableWeekend,\n}: DatepickerLimitiations): DatepickerLimitations => {\n    const invalidDateRanges: DatepickerDateRange[] = disabledDateRanges.map((d) => ({\n        from: dateToISOString(d.from),\n        to: dateToISOString(d.to),\n    }));\n    return {\n        minDate: minDate ? dateToISOString(minDate) : undefined,\n        maxDate: maxDate ? dateToISOString(maxDate) : undefined,\n        weekendsNotSelectable: disableWeekend,\n        invalidDateRanges,\n    };\n};\n\nconst getDateStringFromValue = (value?: Date | string): string | undefined => {\n    let date;\n    if (value && typeof value === 'string') {\n        if (isISODateString(value) === false) {\n            return value;\n        }\n        if (dayjs(value, isoStringFormat, true).isValid()) {\n            date = dayjs(value).toDate();\n        }\n    } else if (typeof value === 'object') {\n        date = value;\n    }\n    return date ? dateToISOString(date) : undefined;\n};\n\nconst getDateFromDateString = (dateString: string | undefined): Date | undefined => {\n    if (dateString === undefined) {\n        return undefined;\n    }\n    if (isISODateString(dateString)) {\n        return new Date(dateString);\n    }\n    return undefined;\n};\n\n/** Check if dateString has format DD.MM.YYYY, or D.M.YY */\nconst isValidFormattedDateString = (dateString = ''): boolean => {\n    return /\\d{1,2}.\\d{1,2}.(\\d{2}|\\d{4})$/.test(dateString);\n};\n\nconst datepickerUtils = {\n    getDateStringFromValue,\n    getDateFromDateString,\n    parseDateLimitations,\n    isValidFormattedDateString,\n};\n\nexport default datepickerUtils;\n","import React from 'react';\nimport { DayPickerProps } from 'react-day-picker';\nimport { useIntl } from 'react-intl';\nimport { useMediaQuery } from 'react-responsive';\nimport { Field, FieldProps } from 'formik';\nimport { CalendarPlacement, Datepicker, DatepickerChange } from 'nav-datovelger';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Label } from 'nav-frontend-skjema';\nimport { DateRange, NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport datepickerUtils from './datepickerUtils';\nimport './datepicker.less';\n\nexport interface DatepickerLimitiations {\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDateRanges?: DateRange[];\n    disableWeekend?: boolean;\n}\n\nexport interface DatePickerBaseProps<FieldName, ErrorType> extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    label: string;\n    disabled?: boolean;\n    feil?: NavFrontendSkjemaFeil;\n    inputTitle?: string;\n    placeholder?: string;\n    dayPickerProps?: DayPickerProps;\n    invalidFormatError?: string;\n    locale?: 'nb' | 'nn' | 'en';\n    onChange?: (date: string) => void;\n}\nexport interface DatePickerPresentationProps {\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n}\ninterface OwnProps<FieldName, ErrorType> extends DatePickerBaseProps<FieldName, ErrorType> {\n    id?: string;\n    description?: React.ReactNode;\n}\n\nexport type FormikDatepickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nconst getLocaleToUse = (locale: string): 'nb' | 'nn' | 'en' | undefined => {\n    switch (locale) {\n        case 'nb':\n            return 'nb';\n        case 'nn':\n            return 'nn';\n        case 'en':\n            return 'en';\n        default:\n            return undefined;\n    }\n};\n\nfunction FormikDatepicker<FieldName, ErrorType>({\n    validate,\n    label,\n    name,\n    id,\n    showYearSelector,\n    fullscreenOverlay,\n    fullScreenOnMobile,\n    feil,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    inputTitle,\n    onChange,\n    description,\n    placeholder,\n    locale,\n    ...restProps\n}: FormikDatepickerProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const isWide = useMediaQuery({ minWidth: 736 });\n    const elementId = id || guid();\n    const position: CalendarPlacement | undefined =\n        fullscreenOverlay || (fullScreenOnMobile && isWide === false) ? 'fullscreen' : undefined;\n    const inputName = (name || '') as string;\n    const intl = useIntl();\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps<string>) => {\n                const isInvalid = (feil || getFeilPropForFormikInput({ field, form, context, feil })) !== undefined;\n                const handleOnDatepickerChange: DatepickerChange = (dateString) => {\n                    if (field.value !== dateString) {\n                        form.setFieldValue(field.name, dateString);\n                        if (onChange) {\n                            onChange(dateString);\n                        }\n                        if (context) {\n                            context.onAfterFieldValueSet();\n                        }\n                    }\n                };\n\n                return (\n                    <SkjemagruppeQuestion feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        <Label htmlFor={elementId}>{label}</Label>\n                        {description && <div className={'skjemaelement__description'}>{description}</div>}\n                        <Datepicker\n                            inputId={elementId}\n                            locale={getLocaleToUse(locale || intl.locale)}\n                            {...restProps}\n                            inputProps={{ name: inputName, placeholder, 'aria-invalid': isInvalid, title: inputTitle }}\n                            value={field.value}\n                            calendarDateStringFilter={(value) => {\n                                if (datepickerUtils.isValidFormattedDateString(value)) {\n                                    return value;\n                                }\n                                // Date is not valid, open calendar with no date specified\n                                return undefined;\n                            }}\n                            limitations={datepickerUtils.parseDateLimitations({\n                                minDate,\n                                maxDate,\n                                disableWeekend,\n                                disabledDateRanges,\n                            })}\n                            showYearSelector={showYearSelector}\n                            calendarSettings={{\n                                position,\n                            }}\n                            onChange={handleOnDatepickerChange}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikDatepicker;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { SkjemaGruppe, SkjemaGruppeProps } from 'nav-frontend-skjema';\nimport { Element, Feilmelding } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport './formikInputGroup.less';\n\ninterface OwnProps<FieldName> extends SkjemaGruppeProps {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n}\n\nexport type FormikInputGroupProps<ErrorType, FieldName> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikInputGroup<ErrorType, FieldName>({\n    legend,\n    name,\n    feil,\n    children,\n    validate,\n    className,\n    ...restProps\n}: FormikInputGroupProps<ErrorType, FieldName>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const isRenderableErrorMsgType = ['string', 'object'].includes(typeof feilProp);\n                return (\n                    <SkjemaGruppe\n                        {...restProps}\n                        legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n                        className={`${className ? className : ''} singleInputWrapper`}>\n                        {children}\n                        {/** Må sette inn denne selv pga feil på SkjemaGruppe påvirker styling av alle elementer i gruppen*/}\n                        <div\n                            aria-live=\"polite\"\n                            className={`formikInputGroup__error ${\n                                isRenderableErrorMsgType ? 'formikInputGroup__error--with-message' : ''\n                            }`}>\n                            <div tabIndex={-1} id={field.name} className=\"focusable-feilmelding\">\n                                {isRenderableErrorMsgType && (\n                                    <div>\n                                        <Feilmelding>{feilProp}</Feilmelding>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </SkjemaGruppe>\n                );\n            }}\n        </Field>\n    );\n}\nexport default FormikInputGroup;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { TypedFormInputValidationProps } from '../../types';\nimport FormikDatepicker, { FormikDatepickerProps } from '../formik-datepicker/FormikDatepicker';\nimport FormikInputGroup from '../formik-input-group/FormikInputGroup';\nimport './dateIntervalPicker.less';\n\nexport interface DateIntervalPickerProps<FieldName, ErrorType>\n    extends TypedFormInputValidationProps<FieldName, ErrorType> {\n    legend?: string;\n    fromDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    toDatepickerProps: FormikDatepickerProps<FieldName, ErrorType>;\n    description?: React.ReactNode;\n}\n\nfunction FormikDateIntervalPicker<FieldName, ErrorType>({\n    legend,\n    fromDatepickerProps,\n    toDatepickerProps,\n    description,\n    validate,\n}: DateIntervalPickerProps<FieldName, ErrorType>) {\n    const name = `${fromDatepickerProps.name}_${toDatepickerProps.name}` as any;\n    return (\n        <FormikInputGroup\n            name={name}\n            validate={validate ? (value) => validate(value, name) : undefined}\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateIntervalPicker\">\n            <div className=\"dateIntervalPicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType> {...fromDatepickerProps} />\n                <FormikDatepicker<FieldName, ErrorType> {...toDatepickerProps} />\n            </div>\n        </FormikInputGroup>\n    );\n}\n\nexport default FormikDateIntervalPicker;\n","import React from 'react';\n\nfunction UploadSvg(props: any) {\n    return (\n        <svg width={22} height={22} viewBox=\"0 0 24 24\" {...props}>\n            <title>{'Opplastingsikon'}</title>\n            <path\n                d=\"M22 18.435v1.826C22 21.773 20.832 23 19.392 23H4.608C3.168 23 2 21.773 2 20.26v-1.825M12 2v15.522m-6.364-9.13L12 2l6.364 6.391\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.93}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n}\n\nexport default UploadSvg;\n","import React from 'react';\nimport { Element } from 'nav-frontend-typografi';\nimport { NavFrontendSkjemaFeil } from '../../../types';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport UploadSvg from './UploadSvg';\nimport './fileInput.less';\n\ninterface FileInputProps {\n    id: string;\n    label: string;\n    name: string;\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onClick?: () => void;\n}\n\nexport default class FileInput extends React.Component<FileInputProps> {\n    constructor(props: FileInputProps) {\n        super(props);\n        this.fileSelectHandler = this.fileSelectHandler.bind(this);\n        this.onFileDropHandler = this.onFileDropHandler.bind(this);\n        this.onFileDragOverHandler = this.onFileDragOverHandler.bind(this);\n        this.onFileSelect = this.onFileSelect.bind(this);\n        this.onKeyPress = this.onKeyPress.bind(this);\n    }\n\n    fileSelectHandler(fileList: FileList) {\n        const files = Array.from(fileList) as File[];\n        this.props.onFilesSelect(files);\n    }\n\n    onFileDragOverHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n    }\n\n    onFileDropHandler(e: React.DragEvent<HTMLLabelElement>) {\n        e.preventDefault();\n        this.fileSelectHandler(e.dataTransfer.files);\n    }\n\n    onFileSelect(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            this.fileSelectHandler(e.target.files);\n            e.target.value = '';\n        }\n    }\n\n    onKeyPress(e: React.KeyboardEvent<HTMLLabelElement>) {\n        const { id } = this.props;\n        const ENTER_KEYCODE = 13;\n        const inputElement = document.getElementById(id);\n        if (e.which === ENTER_KEYCODE && inputElement !== null) {\n            inputElement.click();\n        }\n    }\n\n    render() {\n        const { id, name, label, feil, multiple, onClick, acceptedExtensions } = this.props;\n        const inputId = `${id}-input`;\n\n        return (\n            <SkjemagruppeQuestion\n                feil={feil}\n                className={`fileInput ${feil !== undefined ? 'fileInput--withError' : ''}`}>\n                <label\n                    role=\"button\" // eslint-disable-line\n                    id={id}\n                    tabIndex={0}\n                    htmlFor={inputId}\n                    className=\"attachmentButton\"\n                    onDragOver={this.onFileDragOverHandler}\n                    onDrop={this.onFileDropHandler}\n                    onKeyPress={this.onKeyPress}\n                    onClick={onClick}>\n                    <div className=\"attachmentButton__icon\">\n                        <UploadSvg />\n                    </div>\n                    <Element className=\"attachmentButton__label\">{label}</Element>\n                    <input\n                        id={inputId}\n                        name={name}\n                        type=\"file\"\n                        accept={acceptedExtensions}\n                        onChange={(e) => this.onFileSelect(e)}\n                        multiple={multiple === true}\n                    />\n                </label>\n            </SkjemagruppeQuestion>\n        );\n    }\n}\n","import React from 'react';\nimport { ArrayHelpers, Field, FieldArray, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport FileInput from './file-input/FileInput';\n\nexport interface FormikFileInputProps<FieldName> {\n    name: FieldName;\n    label: string;\n    acceptedExtensions: string;\n    feil?: NavFrontendSkjemaFeil;\n    onFilesSelect: (files: File[], arrayHelpers: ArrayHelpers) => void;\n    onClick?: () => void;\n}\n\nfunction FormikFileInput<FieldName, ErrorType>({\n    label,\n    name,\n    acceptedExtensions,\n    validate,\n    onFilesSelect,\n    feil,\n    onClick,\n}: FormikFileInputProps<FieldName> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <FieldArray\n            name={`${name}`}\n            render={(arrayHelpers) => (\n                <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n                    {({ field, form }: FieldProps) => {\n                        return (\n                            <FileInput\n                                id={field.name}\n                                name={field.name}\n                                label={label}\n                                onClick={onClick}\n                                onFilesSelect={(files) => onFilesSelect(files, arrayHelpers)}\n                                multiple={true}\n                                acceptedExtensions={acceptedExtensions}\n                                feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                            />\n                        );\n                    }}\n                </Field>\n            )}\n        />\n    );\n}\n\nexport default FormikFileInput;\n","import classNames from 'classnames';\n\nconst bemUtils = (cls: string) => ({\n    block: cls,\n    element: (e?: string, m?: string) => `${cls}__${e}${m ? ` ${cls}__${e}--${m}` : ''}`,\n    modifier: (m?: string) => `${cls}--${m}`,\n    modifierConditional: (m: string | undefined, condition: boolean | undefined) =>\n        condition === true && m !== undefined ? `${cls}--${m}` : undefined,\n    child: (c: string) => bemUtils(bemUtils(cls).element(c)),\n    classNames,\n});\n\nexport default bemUtils;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Input, InputProps, Label, SkjemaelementFeilmelding } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport { guid } from 'nav-frontend-js-utils';\nimport './formikInput.less';\nimport bemUtils from '../../utils/bemUtils';\n\nexport interface InputWithSuffix {\n    suffix?: string;\n    suffixStyle?: 'box' | 'text';\n}\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nconst bem = bemUtils('formikInput');\n\nfunction FormikInput<FieldName, ErrorType>({\n    name,\n    feil,\n    id = guid(),\n    suffix,\n    suffixStyle = 'box',\n    label,\n    description,\n    validate,\n    autoComplete,\n    ...restProps\n}: FormikInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                const feilProp = getFeilPropForFormikInput({ field, form, context, feil });\n                const harFeil = feilProp !== undefined;\n                const feilMessageId = `feil-${id}`;\n                if (suffix === undefined) {\n                    return (\n                        <Input\n                            {...restProps}\n                            {...field}\n                            id={id}\n                            description={description}\n                            label={label}\n                            autoComplete={autoComplete || 'off'}\n                            feil={feilProp}\n                            value={field.value === undefined ? '' : field.value}\n                        />\n                    );\n                }\n                return (\n                    <div\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional('withSuffix', suffix !== undefined),\n                            bem.modifier(`suffixStyle--${suffixStyle}`),\n                            bem.modifierConditional('fullbredde', restProps.bredde === 'fullbredde')\n                        )}>\n                        <Label htmlFor={id}>{label}</Label>\n                        {description && <div className=\"skjemaelement__description\">{description}</div>}\n                        <div className={bem.element('inputWrapper')}>\n                            <Input\n                                {...restProps}\n                                {...field}\n                                id={id}\n                                autoComplete={autoComplete || 'off'}\n                                feil={harFeil}\n                                aria-errormessage={feilMessageId}\n                                value={field.value === undefined ? '' : field.value}\n                            />\n                            {suffix && (\n                                <span className={bem.element('suffix', suffixStyle)} aria-hidden={true}>\n                                    {suffix}\n                                </span>\n                            )}\n                        </div>\n                        <SkjemaelementFeilmelding id={`feil-${id}`}>\n                            {getFeilPropForFormikInput({ field, form, context, feil })}\n                        </SkjemaelementFeilmelding>\n                    </div>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikInput;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport FormikInput, { InputWithSuffix } from '../formik-input/FormikInput';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'type' | 'pattern' | 'inputMode' | 'min' | 'max'> {\n    name: FieldName;\n    integerValue?: boolean;\n}\n\nexport type FormikNumberInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType> &\n    InputWithSuffix;\n\nfunction FormikNumberInput<FieldName, ErrorType>({\n    name,\n    feil,\n    validate,\n    autoComplete,\n    bredde = 'S',\n    integerValue = false,\n    ...restProps\n}: FormikNumberInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <FormikInput\n                        {...restProps}\n                        {...field}\n                        type=\"text\"\n                        bredde={bredde}\n                        autoComplete={autoComplete || 'off'}\n                        inputMode={integerValue ? 'numeric' : 'text'}\n                        pattern={integerValue ? '[0-9]*' : undefined}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        value={field.value === undefined ? '' : field.value}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikNumberInput;\n","import React from 'react';\nimport bemUtils from '../../../utils/bemUtils';\nimport './dialogFormWrapper.less';\n\nconst bem = bemUtils('dialogFormWrapper');\n\nexport type DialogFormWrapperWidths = 'narrow' | 'wide';\n\ninterface Props {\n    width?: DialogFormWrapperWidths;\n}\n\nconst DialogFormWrapper: React.FunctionComponent<Props> = ({ width = 'narrow', children }) => (\n    <article className={bem.classNames(bem.block, bem.modifier(width))}>{children}</article>\n);\n\nexport default DialogFormWrapper;\n","import React from 'react';\nimport { AlertStripeInfo } from 'nav-frontend-alertstriper';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport Modal from 'nav-frontend-modal';\nimport SkjemagruppeQuestion from '../../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport DialogFormWrapper, { DialogFormWrapperWidths } from '../dialog-form-wrapper/DialogFormWrapper';\nimport { ModalFormAndListLabels, ModalFormAndListListItemBase } from '../types';\nimport './modalFormAndList.less';\n\ntype ModalFormRenderer<ItemType> = (props: {\n    item?: ItemType;\n    allItems?: ItemType[];\n    onSubmit: (item: ItemType) => void;\n    onCancel: () => void;\n}) => React.ReactNode;\n\ntype ListRenderer<ItemType> = (props: {\n    items: ItemType[];\n    onEdit: (item: ItemType) => void;\n    onDelete: (item: ItemType) => void;\n}) => React.ReactNode;\n\nexport interface ModalFormAndListProps<ItemType extends ModalFormAndListListItemBase> {\n    labels: ModalFormAndListLabels;\n    maxItems?: number;\n    listRenderer: ListRenderer<ItemType>;\n    formRenderer: ModalFormRenderer<ItemType>;\n    dialogWidth?: DialogFormWrapperWidths;\n}\ninterface PrivateProps<ItemType> {\n    onChange: (data: ItemType[]) => void;\n    items: ItemType[];\n    error?: React.ReactNode | boolean;\n}\n\ntype Props<ItemType> = ModalFormAndListProps<ItemType> & PrivateProps<ItemType>;\n\nfunction ModalFormAndList<ItemType extends ModalFormAndListListItemBase>({\n    items = [],\n    listRenderer,\n    formRenderer,\n    labels,\n    error,\n    dialogWidth,\n    maxItems,\n    onChange,\n}: Props<ItemType>) {\n    const [modalState, setModalState] = React.useState<{ isVisible: boolean; selectedItem?: ItemType }>({\n        isVisible: false,\n    });\n\n    const handleOnSubmit = (values: ItemType) => {\n        if (values.id) {\n            onChange([...items.filter((item) => item.id !== values.id), values]);\n        } else {\n            onChange([...items, { id: guid(), ...values }]);\n        }\n        setModalState({ isVisible: false });\n    };\n\n    const handleEdit = (item: ItemType) => {\n        setModalState({ isVisible: true, selectedItem: item });\n    };\n\n    const handleDelete = (item: ItemType) => {\n        onChange([...items.filter((i) => i.id !== item.id)]);\n    };\n\n    const resetModal = () => {\n        setModalState({ isVisible: false, selectedItem: undefined });\n    };\n\n    const showListTitle = items.length > 0;\n    return (\n        <>\n            <Modal isOpen={modalState.isVisible} contentLabel={labels.modalTitle} onRequestClose={resetModal}>\n                <DialogFormWrapper width={dialogWidth}>\n                    {formRenderer({\n                        onSubmit: handleOnSubmit,\n                        onCancel: resetModal,\n                        item: modalState.selectedItem,\n                        allItems: items,\n                    })}\n                </DialogFormWrapper>\n            </Modal>\n            <SkjemagruppeQuestion legend={showListTitle ? labels.listTitle : undefined} feil={error} tag=\"div\">\n                {items.length > 0 && (\n                    <div className=\"modalFormAndList__listWrapper\">\n                        {listRenderer({ items, onEdit: handleEdit, onDelete: handleDelete })}\n                    </div>\n                )}\n                {items.length === 0 && labels.emptyListText && (\n                    <div style={{ paddingBottom: '2rem' }}>\n                        <AlertStripeInfo>{labels.emptyListText}</AlertStripeInfo>\n                    </div>\n                )}\n                {(maxItems === undefined || maxItems > items.length) && (\n                    <div\n                        style={showListTitle ? { marginTop: '1rem' } : undefined}\n                        className={'modalFormAndList__addButton'}>\n                        <Knapp htmlType=\"button\" onClick={() => setModalState({ isVisible: true })} mini={true}>\n                            {labels.addLabel}\n                        </Knapp>\n                    </div>\n                )}\n            </SkjemagruppeQuestion>\n        </>\n    );\n}\n\nexport default ModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList, { ModalFormAndListProps } from './modal-form-and-list/ModalFormAndList';\n\nexport interface FormikModalFormAndListProps<FieldName, ItemType, ErrorType>\n    extends ModalFormAndListProps<ItemType>,\n        TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    sortFunc?: (a: ItemType, b: ItemType) => number;\n    onAfterChange?: (values: ItemType[]) => void;\n}\n\nfunction FormikModalFormAndList<FieldName, ItemType, ErrorType>({\n    name,\n    labels,\n    listRenderer,\n    formRenderer,\n    sortFunc,\n    onAfterChange,\n    feil,\n    maxItems,\n    validate,\n}: FormikModalFormAndListProps<FieldName, ItemType, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate ? (value) => validate(value, name) : undefined}>\n            {({ field, form }: FieldProps<ItemType[]>) => {\n                return (\n                    <ModalFormAndList<ItemType>\n                        labels={labels}\n                        items={field.value}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        maxItems={maxItems}\n                        onChange={(values) => {\n                            const updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                            form.setFieldValue(field.name, updatedValues);\n                            if (onAfterChange) {\n                                onAfterChange(updatedValues);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        listRenderer={({ onEdit, onDelete }) => listRenderer({ items: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndList;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { NavFrontendSkjemaFeil, TypedFormInputValidationProps } from '../../types';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndInfo, { ModalFormAndInfoProps } from './modal-form-and-info/ModalFormAndInfo';\n\nexport interface FormikModalFormAndInfoProps<FieldName, InfoType, ErrorType>\n    extends ModalFormAndInfoProps<InfoType>,\n        TypedFormInputValidationProps<FieldName, ErrorType> {\n    name: FieldName;\n    feil?: NavFrontendSkjemaFeil;\n    defaultValue?: InfoType;\n    onAfterChange?: (data: InfoType) => void;\n}\n\nfunction FormikModalFormAndInfo<FieldName, ItemType, ErrorType>({\n    name,\n    labels,\n    defaultValue,\n    infoRenderer,\n    formRenderer,\n    onAfterChange,\n    renderEditButtons,\n    renderDeleteButton,\n    dialogWidth,\n    dialogClassName,\n    feil,\n    validate,\n}: FormikModalFormAndInfoProps<FieldName, ItemType, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field name={name} validate={validate ? (value) => validate(value, name) : undefined}>\n            {({ field, form }: FieldProps<ItemType>) => {\n                return (\n                    <ModalFormAndInfo<ItemType>\n                        labels={labels}\n                        data={field.value || defaultValue}\n                        dialogClassName={dialogClassName}\n                        dialogWidth={dialogWidth}\n                        renderEditButtons={renderEditButtons}\n                        renderDeleteButton={renderDeleteButton}\n                        error={feil || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined)}\n                        onDelete={() => form.setFieldValue(field.name, undefined)}\n                        onChange={(value) => {\n                            form.setFieldValue(field.name, value);\n                            if (onAfterChange) {\n                                onAfterChange(value);\n                            }\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        formRenderer={formRenderer}\n                        infoRenderer={({ onEdit, onDelete }) => infoRenderer({ data: field.value, onDelete, onEdit })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikModalFormAndInfo;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { RadioPanelGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n    useTwoColumns?: boolean;\n}\n\nexport type FormikRadioPanelGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioPanelGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    useTwoColumns,\n    ...restProps\n}: FormikRadioPanelGroupProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioPanelGruppe\n                        {...restProps}\n                        name={field.name}\n                        className={useTwoColumns ? 'twoColumnPanelGruppe' : undefined}\n                        checked={field.value}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(_evt, value) => {\n                            form.setFieldValue(field.name, value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        radios={radios.map((rb) => {\n                            return {\n                                name: `${name}`,\n                                autoComplete: 'off',\n                                'aria-invalid': undefined,\n                                ...rb,\n                            };\n                        })}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioPanelGroup;\n","import React, { useContext } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Radio, RadioGruppe, RadioPanelGruppeProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport '../../styles/nav-frontend-skjema-extension.less';\n\ninterface OwnProps<FieldName> extends Omit<RadioPanelGruppeProps, 'name' | 'onChange'> {\n    name: FieldName;\n}\n\nexport type FormikRadioGroupProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikRadioGroup<FieldName, ErrorType>({\n    name,\n    validate,\n    radios,\n    feil,\n    ...restProps\n}: FormikRadioGroupProps<FieldName, ErrorType>) {\n    const context = useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <RadioGruppe {...restProps} feil={getFeilPropForFormikInput({ field, form, context, feil })}>\n                        {radios.map((rb, idx) => {\n                            const isSelected = field.value === rb.value;\n                            return (\n                                <Radio\n                                    key={idx}\n                                    {...rb}\n                                    name={name as any}\n                                    checked={isSelected}\n                                    autoComplete=\"off\"\n                                    onChange={(evt) => {\n                                        form.setFieldValue(field.name, evt.target.value);\n                                        if (context) {\n                                            context.onAfterFieldValueSet();\n                                        }\n                                    }}\n                                />\n                            );\n                        })}\n                    </RadioGruppe>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikRadioGroup;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Select, SelectProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<SelectProps, 'name'> {\n    name: FieldName;\n}\n\nexport type FormikSelectProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikSelect<FieldName, ErrorType>({\n    name,\n    children,\n    validate,\n    feil,\n    ...restProps\n}: FormikSelectProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Select\n                        {...field}\n                        {...restProps}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        autoComplete=\"off\"\n                        value={field.value === undefined ? '' : field.value}>\n                        {children}\n                    </Select>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikSelect;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Textarea, TextareaControlledProps } from 'nav-frontend-skjema';\nimport { TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\n\ninterface OwnProps<FieldName> extends Omit<TextareaControlledProps, 'name' | 'defaultValue'> {\n    name: FieldName;\n}\n\nexport type FormikTextareaProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nfunction FormikTextarea<FieldName, ErrorType>({\n    name,\n    validate,\n    feil,\n    ...restProps\n}: FormikTextareaProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <Textarea\n                        {...restProps}\n                        {...field}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        onChange={(evt) => {\n                            form.setFieldValue(field.name, evt.target.value);\n                            if (context) {\n                                context.onAfterFieldValueSet();\n                            }\n                        }}\n                        autoComplete=\"off\"\n                        value={field.value || ''}\n                    />\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTextarea;\n","export const getNumberFromNumberInputValue = (inputValue: string | undefined): number | undefined => {\n    if (inputValue === undefined || inputValue === '' || Array.isArray(inputValue)) {\n        return undefined;\n    }\n    if (typeof inputValue === 'number' && isNaN(inputValue)) {\n        return undefined;\n    }\n    const value = `${inputValue}`.replace(/\\,/g, '.').trim();\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n        return undefined;\n    }\n    return numValue;\n};\n","import { ValidationError, ValidationResult } from './types';\n\nexport const hasValue = (value: any): boolean => value !== '' && value !== undefined && value !== null;\n\nexport const validateAll = <ErrorType = ValidationError>(\n    validations: Array<() => ValidationResult<ErrorType>>\n): ErrorType | undefined => {\n    let result: ValidationResult<ErrorType>;\n    validations.some((validateFunc) => {\n        const validationResult = validateFunc();\n        if (validationResult) {\n            result = validationResult;\n            return true;\n        }\n        return false;\n    });\n    return result;\n};\n\nexport const getNumberFromStringInput = (inputValue: string | undefined): number | undefined => {\n    if (inputValue === undefined || inputValue === '' || Array.isArray(inputValue)) {\n        return undefined;\n    }\n    if (typeof inputValue === 'number' && isNaN(inputValue)) {\n        return undefined;\n    }\n    const value = `${inputValue}`.replace(/\\,/g, '.').trim();\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n        return undefined;\n    }\n    return numValue;\n};\n","import React, { useState } from 'react';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Input } from 'nav-frontend-skjema';\nimport { Time } from '../../types';\nimport bemUtils from '../../utils/bemUtils';\nimport { getNumberFromNumberInputValue } from '../../utils/numberInputUtils';\nimport { hasValue } from '../../validation/validationUtils';\nimport './timeInput.less';\n\nconst MAX_HOURS = 23;\nconst MAX_MINUTES = 59;\n\ntype TimeInputChangeFunc = (time: Partial<Time> | undefined, isValidTime: boolean) => void;\n\nexport type TimeInputLayout = 'vertical' | 'horizontal';\n\nexport interface TimeInputLayoutProps {\n    direction?: TimeInputLayout;\n    compact?: boolean;\n    justifyContent?: 'left' | 'center' | 'right';\n    placeholders?: {\n        hours: string;\n        minutes: string;\n    };\n}\n\ninterface TimeInputProps extends TimeInputLayoutProps {\n    time?: Time | Partial<Time> | undefined;\n    maxHours?: number;\n    maxMinutes?: number;\n    className?: string;\n    onChange: TimeInputChangeFunc;\n}\n\nconst bem = bemUtils('timeInput');\n\nexport const isValidTime = (time: Partial<Time>): time is Time => {\n    const hours = getNumberFromNumberInputValue(time.hours || '0');\n    const minutes = getNumberFromNumberInputValue(time.minutes || '0');\n    return hours !== undefined && minutes !== undefined;\n};\n\nconst handleTimeChange = (time: Partial<Time>, onChange: TimeInputChangeFunc) => {\n    onChange(time, isValidTime(time));\n};\n\nconst TimeInput: React.FunctionComponent<TimeInputProps> = ({\n    time = { hours: undefined, minutes: undefined },\n    maxHours = MAX_HOURS,\n    maxMinutes = MAX_MINUTES,\n    direction: layout = 'normal',\n    compact = true,\n    justifyContent = 'center',\n    placeholders,\n    onChange,\n    className,\n}) => {\n    const [stateTime, setStateTime] = useState<Partial<Time> | undefined>(time);\n    const id = guid();\n    const hoursLabelId = `${id}-hours`;\n    const minutesLabelId = `${id}-minutes`;\n    return (\n        <div\n            className={bem.classNames(\n                bem.block,\n                bem.modifier(layout),\n                bem.modifier(`content-${justifyContent}`),\n                bem.modifierConditional('compact', compact),\n                bem.modifierConditional('withValue', hasValue(time.hours) || hasValue(time.minutes)),\n                bem.modifierConditional('withHours', hasValue(time.hours)),\n                bem.modifierConditional('withMinutes', hasValue(time.minutes)),\n                className\n            )}>\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={hoursLabelId}>\n                        Timer\n                    </label>\n                    <Input\n                        id={hoursLabelId}\n                        className={bem.element('hours')}\n                        type=\"text\"\n                        autoComplete={'off'}\n                        inputMode={'numeric'}\n                        pattern={'[0-9]*'}\n                        placeholder={placeholders?.hours}\n                        min={0}\n                        max={maxHours}\n                        maxLength={2}\n                        value={stateTime?.hours || ''}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = { ...stateTime, hours: evt.target.value };\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n                <div className={bem.element('inputWrapper')}>\n                    <label className={bem.element('label')} htmlFor={minutesLabelId}>\n                        Minutter\n                    </label>\n                    <Input\n                        id={minutesLabelId}\n                        className={bem.element('minutes')}\n                        type=\"text\"\n                        autoComplete={'off'}\n                        inputMode={'numeric'}\n                        placeholder={placeholders?.minutes}\n                        pattern={'[0-9]*'}\n                        min={0}\n                        maxLength={2}\n                        max={maxMinutes}\n                        value={stateTime?.minutes || ''}\n                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                            const newTime = { ...stateTime, minutes: evt.target.value };\n                            setStateTime(newTime);\n                            handleTimeChange(newTime, onChange);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default TimeInput;\n","const elementSelector = [\n    'a[href]',\n    'select:not([disabled])',\n    'input:not([disabled])',\n    'textarea:not([disabled])',\n    '[tabindex]',\n    'button:not([disabled])',\n];\n\nfunction nodelistToArray(nodes: NodeList): HTMLElement[] {\n    const arr: HTMLElement[] = [];\n    for (let i = nodes.length; i--; ) {\n        arr.unshift(nodes.item(i) as HTMLElement);\n    }\n    return arr;\n}\n\nconst tabEnabledSelectors = [`[tabIndex='0']`].concat(elementSelector);\nconst allTabIndexEnabledSelectors = [`[tabIndex]`].concat(elementSelector);\n\nexport function getFocusableElements(el: Element, onlyTabReachable = true): HTMLElement[] | undefined {\n    if (!el) {\n        return undefined;\n    }\n    if (onlyTabReachable) {\n        return nodelistToArray(el.querySelectorAll(tabEnabledSelectors.join(',')));\n    } else {\n        return nodelistToArray(el.querySelectorAll(allTabIndexEnabledSelectors.join(',')));\n    }\n}\n\nexport function focusFirstElement(el: Element) {\n    const elements = getFocusableElements(el);\n    if (elements && elements.length > 0) {\n        (elements[0] as HTMLElement).focus();\n    } else {\n        (el as HTMLElement).focus();\n    }\n}\n\nexport function focusLastElement(el: Element) {\n    const elements = getFocusableElements(el);\n    if (elements && elements.length > 0) {\n        (elements[elements.length - 1] as HTMLElement).focus();\n    } else {\n        (el as HTMLElement).focus();\n    }\n}\n","import React, { useRef } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { InputProps } from 'nav-frontend-skjema';\nimport { Time, TypedFormInputValidationProps } from '../../types';\nimport { getFeilPropForFormikInput } from '../../utils/typedFormErrorUtils';\n\nimport SkjemagruppeQuestion from '../helpers/skjemagruppe-question/SkjemagruppeQuestion';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport TimeInput, { TimeInputLayoutProps } from './TimeInput';\nimport { focusFirstElement } from '../../utils/focusUtils';\nimport bemUtils from '../../utils/bemUtils';\n\ninterface OwnProps<FieldName> extends Omit<InputProps, 'name' | 'onChange'> {\n    name: FieldName;\n    maxHours?: number;\n    maxMinutes?: number;\n    timeInputLayout?: TimeInputLayoutProps;\n}\n\nexport type FormikTimeInputProps<FieldName, ErrorType> = OwnProps<FieldName> &\n    TypedFormInputValidationProps<FieldName, ErrorType>;\n\nconst bem = bemUtils('formikTimeInput');\n\nfunction FormikTimeInput<FieldName, ErrorType>({\n    label,\n    name,\n    validate,\n    feil,\n    timeInputLayout,\n    ...restProps\n}: FormikTimeInputProps<FieldName, ErrorType>) {\n    const context = React.useContext(TypedFormikFormContext);\n    const ref = useRef<any>();\n    return (\n        <Field validate={validate ? (value) => validate(value, name) : undefined} name={name}>\n            {({ field, form }: FieldProps) => {\n                return (\n                    <SkjemagruppeQuestion\n                        tag={'div'}\n                        className={bem.classNames(\n                            bem.block,\n                            bem.modifierConditional(\n                                timeInputLayout?.direction,\n                                timeInputLayout?.direction !== undefined\n                            )\n                        )}\n                        ref={ref}\n                        feil={getFeilPropForFormikInput({ field, form, context, feil })}\n                        id={name as any}\n                        onFocus={(evt) => {\n                            if (evt.target.id === ref.current.props.id) {\n                                focusFirstElement(evt.target);\n                            }\n                        }}\n                        legend={label}>\n                        <TimeInput\n                            {...restProps}\n                            {...field}\n                            {...timeInputLayout}\n                            justifyContent=\"left\"\n                            time={field.value || undefined}\n                            onChange={(time: Partial<Time> | undefined) => {\n                                form.setFieldValue(field.name, time);\n                                if (context) {\n                                    context.onAfterFieldValueSet();\n                                }\n                            }}\n                        />\n                    </SkjemagruppeQuestion>\n                );\n            }}\n        </Field>\n    );\n}\n\nexport default FormikTimeInput;\n","export enum YesOrNo {\n    'YES' = 'yes',\n    'NO' = 'no',\n    'UNANSWERED' = 'unanswered',\n    'DO_NOT_KNOW' = 'doNotKnow',\n}\n\nexport interface Time {\n    hours: string;\n    minutes: string;\n}\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport type CancelButtonTypes = 'standard' | 'hoved' | 'fare' | 'flat';\n\nexport type NavFrontendSkjemaFeil = React.ReactNode | boolean;\n\nexport interface TypedFormInputValidationProps<FieldName, ErrorType> {\n    validate?: (value: any, fieldName: FieldName) => ErrorType | undefined;\n}\n\nexport interface CustomFormErrorHandler<ErrorType> {\n    fieldErrorHandler: FieldErrorHandler<ErrorType>;\n    isHandledErrorTypeFunc?: ErrorTypeChecker<ErrorType>;\n}\n\nexport type FieldErrorHandler<ErrorType> = (error: ErrorType, fieldName: string) => string;\nexport type ErrorTypeChecker<ErrorType = any> = (error: ErrorType) => boolean;\n","import React from 'react';\nimport { TypedFormInputValidationProps, YesOrNo } from '../../types';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from '../formik-radio-panel-group/FormikRadioPanelGroup';\n\nexport interface FormikYesOrNoQuestionProps<FieldName, ErrorType>\n    extends Omit<FormikRadioPanelGroupProps<FieldName, ErrorType>, 'radios'> {\n    includeDoNotKnowOption?: boolean;\n    useTwoColumns?: boolean;\n    labels?: {\n        [YesOrNo.YES]?: string;\n        [YesOrNo.NO]?: string;\n        [YesOrNo.DO_NOT_KNOW]?: string;\n    };\n}\n\nfunction FormikYesOrNoQuestion<FieldName, ErrorType>({\n    name,\n    includeDoNotKnowOption,\n    labels,\n    useTwoColumns = true,\n    ...restProps\n}: FormikYesOrNoQuestionProps<FieldName, ErrorType> & TypedFormInputValidationProps<FieldName, ErrorType>) {\n    const { yes: yesLabel = 'Ja', no: noLabel = 'Nei', doNotKnow: doNotKnowLabel = 'Vet ikke' } = labels || {};\n    return (\n        <FormikRadioPanelGroup<FieldName, ErrorType>\n            radios={[\n                { label: yesLabel, value: YesOrNo.YES },\n                { label: noLabel, value: YesOrNo.NO },\n                ...(includeDoNotKnowOption ? [{ label: doNotKnowLabel, value: YesOrNo.DO_NOT_KNOW }] : []),\n            ]}\n            {...restProps}\n            name={name}\n            useTwoColumns={includeDoNotKnowOption ? false : useTwoColumns}\n        />\n    );\n}\n\nexport default FormikYesOrNoQuestion;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport minMax from 'dayjs/plugin/minMax';\nimport { DateRange } from '../../types';\nimport { DatepickerLimitiations } from '../formik-datepicker/FormikDatepicker';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(minMax);\n\nconst sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nconst sortDateRangeByToDate = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.to).isSameOrBefore(d2.to)) {\n        return -1;\n    }\n    return 1;\n};\nexport const getRangesStartingAfterDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.from).isAfter(date, 'day'));\n};\n\nexport const getRangesEndingBeforeDate = (date: Date, dateRanges: DateRange[] = []): DateRange[] => {\n    return dateRanges.filter((dateRange) => dayjs(dateRange.to).isBefore(date, 'day'));\n};\n\nexport const findClosestDateAfterDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isAfter(fromDate, 'day'));\n    return dayjss.length > 0 ? dayjs.min(dayjss).toDate() : undefined;\n};\n\nexport const findClosestDateBeforeDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const findClosestDateBeforeOrEqualDate = (fromDate: Date, dates: Date[]): Date | undefined => {\n    const dayjss = dates.map((d) => dayjs(d)).filter((m) => m.isSameOrBefore(fromDate, 'day'));\n    const maxDate = dayjss.length > 0 ? dayjs.max(dayjss).toDate() : undefined;\n    return maxDate;\n};\n\nexport const getClosestDateRangeBeforeDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesBeforeDate = getRangesEndingBeforeDate(date, ranges).sort(sortDateRangeByToDate).reverse();\n    return rangesBeforeDate.length === 0 ? undefined : rangesBeforeDate[0];\n};\n\nexport const getClosestDateRangeAfterDate = (date: Date, ranges: DateRange[]): DateRange | undefined => {\n    const rangesAfterDate = getRangesStartingAfterDate(date, ranges).sort(sortDateRange);\n    return rangesAfterDate.length === 0 ? undefined : rangesAfterDate[0];\n};\n\nconst getFollowingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.from : dayjs(dateRange.from).subtract(1, 'day').toDate();\n};\n\nexport const getMaxDateForRangeStart = ({\n    fromDate,\n    toDate,\n    maxDate,\n    otherRanges: dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    otherRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!fromDate) {\n        return toDate || maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(fromDate, dateRanges);\n    const followingRangeeDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(toDate ? [toDate] : []),\n        ...(maxDate ? [maxDate] : []),\n        ...(followingRangeeDate ? [followingRangeeDate] : []),\n    ];\n    return findClosestDateAfterDate(fromDate, dates);\n};\nexport const getMaxDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    maxDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    maxDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return maxDate;\n    }\n    const follwingDateRange = getClosestDateRangeAfterDate(baseDate, dateRanges);\n    const followingDate = getFollowingDate(follwingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(maxDate ? [maxDate] : []), ...(followingDate ? [followingDate] : [])];\n    return findClosestDateAfterDate(baseDate, dates) || maxDate;\n};\n\nconst getPreceedingDate = (\n    dateRange: DateRange | undefined,\n    allowRangesToStartAndStopOnSameDate?: boolean\n): Date | undefined => {\n    if (!dateRange) {\n        return undefined;\n    }\n    return allowRangesToStartAndStopOnSameDate ? dateRange.to : dayjs(dateRange.to).add(1, 'day').toDate();\n};\n\nexport const getMinDateForRangeStart = ({\n    toDate,\n    minDate,\n    dateRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    if (!toDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(toDate, dateRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [...(minDate ? [minDate] : []), ...(preceedingDate ? [preceedingDate] : [])];\n\n    return findClosestDateBeforeDate(toDate, dates);\n};\n\nexport const getMinDateForRangeEnd = ({\n    fromDate,\n    toDate,\n    minDate,\n    dateRanges: otherRanges = [],\n    allowRangesToStartAndStopOnSameDate,\n}: {\n    fromDate?: Date;\n    toDate?: Date;\n    minDate?: Date;\n    dateRanges?: DateRange[];\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): Date | undefined => {\n    const baseDate = fromDate || toDate;\n    if (!baseDate) {\n        return minDate;\n    }\n    const preceedingDateRange = getClosestDateRangeBeforeDate(baseDate, otherRanges);\n    const preceedingDate = getPreceedingDate(preceedingDateRange, allowRangesToStartAndStopOnSameDate);\n    const dates: Date[] = [\n        ...(fromDate ? [fromDate] : []),\n        ...(minDate ? [minDate] : []),\n        ...(preceedingDate ? [preceedingDate] : []),\n    ];\n    return findClosestDateBeforeOrEqualDate(baseDate, dates);\n};\n\ninterface DateRangePickerLimitations {\n    fromDateLimitations: DatepickerLimitiations;\n    toDateLimitations: DatepickerLimitiations;\n}\n\nexport const getDateRangePickerLimitations = (props: {\n    /** Selected from date */\n    fromDate?: Date;\n    /** Selected to date */\n    toDate?: Date;\n    /** Min allowed date */\n    minDate?: Date;\n    /** Max allowed date */\n    maxDate?: Date;\n    /** Other date ranges which become disabled in the datepicker */\n    dateRanges?: DateRange[];\n    /** Disallow selection of saturday and sunday */\n    disableWeekend?: boolean;\n    /** Allow one dateRange to start on the same date another ends */\n    allowRangesToStartAndStopOnSameDate?: boolean;\n}): DateRangePickerLimitations => {\n    return {\n        fromDateLimitations: {\n            minDate: getMinDateForRangeStart(props),\n            maxDate: getMaxDateForRangeStart(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n        toDateLimitations: {\n            minDate: getMinDateForRangeEnd(props),\n            maxDate: getMaxDateForRangeEnd(props),\n            disabledDateRanges: props.dateRanges,\n            disableWeekend: props.disableWeekend,\n        },\n    };\n};\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { ISOStringToDate } from '../formik-datepicker/datepickerUtils';\nimport FormikDatepicker, {\n    DatePickerBaseProps,\n    DatepickerLimitiations,\n    DatePickerPresentationProps,\n} from '../formik-datepicker/FormikDatepicker';\nimport { getDateRangePickerLimitations } from './dateRangePickerUtils';\nimport './dateRangePicker.less';\n\ninterface OwnProps<FieldName, ErrorType> {\n    legend?: string;\n    description?: React.ReactNode;\n    showYearSelector?: boolean;\n    fullscreenOverlay?: boolean;\n    fullScreenOnMobile?: boolean;\n    locale?: string;\n    allowRangesToStartAndStopOnSameDate?: boolean;\n    fromInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n    toInputProps: DatePickerBaseProps<FieldName, ErrorType>;\n}\n\nexport type FormikDateRangePickerProps<FieldName, ErrorType> = OwnProps<FieldName, ErrorType> &\n    DatePickerPresentationProps &\n    DatepickerLimitiations;\n\nfunction FormikDateRangePicker<FieldName, ErrorType>({\n    legend,\n    fromInputProps,\n    toInputProps,\n    description,\n    minDate,\n    maxDate,\n    disableWeekend,\n    disabledDateRanges,\n    showYearSelector,\n    fullScreenOnMobile,\n    fullscreenOverlay,\n    allowRangesToStartAndStopOnSameDate,\n    locale,\n}: FormikDateRangePickerProps<FieldName, ErrorType>) {\n    const { values } = useFormikContext<any>();\n    const fromDate = ISOStringToDate(values[fromInputProps.name]);\n    const toDate = ISOStringToDate(values[toInputProps.name]);\n    const { fromDateLimitations, toDateLimitations } = getDateRangePickerLimitations({\n        fromDate,\n        toDate,\n        minDate,\n        maxDate,\n        dateRanges: disabledDateRanges,\n        disableWeekend,\n        allowRangesToStartAndStopOnSameDate,\n    });\n    return (\n        <SkjemaGruppe\n            legend={legend ? <Element tag=\"div\">{legend}</Element> : undefined}\n            description={description}\n            className=\"dateRangePicker\">\n            <div className=\"dateRangePicker__flexContainer\">\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...fromInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...fromDateLimitations}\n                    {...locale}\n                />\n                <FormikDatepicker<FieldName, ErrorType>\n                    {...toInputProps}\n                    {...{ fullscreenOverlay, fullScreenOnMobile, showYearSelector }}\n                    {...toDateLimitations}\n                    {...locale}\n                />\n            </div>\n        </SkjemaGruppe>\n    );\n}\n\nexport default FormikDateRangePicker;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\ntype CheckedValidationResult = ValidateCheckedError | undefined;\n\nconst getCheckedValidator = (): ValidationFunction<CheckedValidationResult> => (value: any) => {\n    if (value !== true) {\n        return ValidateCheckedError.notChecked;\n    }\n    return undefined;\n};\n\nexport default getCheckedValidator;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormikCheckboxPanelGroup, {\n    FormikCheckboxPanelGroupProps,\n} from './formik-checkbox-panel-group/FormikCheckboxPanelGroup';\nimport FormikCheckbox, { FormikCheckboxProps } from './formik-checkbox/FormikCheckbox';\nimport FormikConfirmationCheckboxPanel, {\n    FormikConfirmationCheckboxPanelProps,\n} from './formik-confirmation-checkbox-panel/FormikConfirmationCheckboxPanel';\nimport FormikCountrySelect, { FormikCountrySelectProps } from './formik-country-select/FormikCountrySelect';\nimport FormikDateIntervalPicker, {\n    DateIntervalPickerProps,\n} from './formik-date-interval-picker/FormikDateIntervalPicker';\nimport FormikDateRangePicker, { FormikDateRangePickerProps } from './formik-date-range-picker/FormikDateRangePicker';\nimport FormikDatepicker, { FormikDatepickerProps } from './formik-datepicker/FormikDatepicker';\nimport FormikFileInput, { FormikFileInputProps } from './formik-file-input/FormikFileInput';\nimport FormikInputGroup, { FormikInputGroupProps } from './formik-input-group/FormikInputGroup';\nimport FormikInput, { FormikInputProps } from './formik-input/FormikInput';\nimport FormikNumberInput, { FormikNumberInputProps } from './formik-number-input/FormikNumberInput';\nimport FormikRadioGroup, { FormikRadioGroupProps } from './formik-radio-group/FormikRadioGroup';\nimport FormikRadioPanelGroup, { FormikRadioPanelGroupProps } from './formik-radio-panel-group/FormikRadioPanelGroup';\nimport FormikSelect, { FormikSelectProps } from './formik-select/FormikSelect';\nimport FormikTextarea, { FormikTextareaProps } from './formik-textarea/FormikTextarea';\nimport FormikTimeInput, { FormikTimeInputProps } from './formik-time-input/FormikTimeInput';\nimport FormikYesOrNoQuestion, { FormikYesOrNoQuestionProps } from './formik-yes-or-no-question/FormikYesOrNoQuestion';\nimport TypedFormikForm, { TypedFormikFormProps } from './typed-formik-form/TypedFormikForm';\nimport TypedFormikWrapper, { TypedFormikWrapperProps } from './typed-formik-wrapper/TypedFormikWrapper';\nimport '../styles/nav-frontend-skjema-extension.less';\n\nexport interface TypedFormComponents<FieldName, FormValues, ErrorType> {\n    Checkbox: (props: FormikCheckboxProps<FieldName, ErrorType>) => JSX.Element;\n    CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) => JSX.Element;\n    ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) => JSX.Element;\n    CountrySelect: (props: FormikCountrySelectProps<FieldName, ErrorType>) => JSX.Element;\n    DatePicker: (props: FormikDatepickerProps<FieldName, ErrorType>) => JSX.Element;\n    DateIntervalPicker: (props: DateIntervalPickerProps<FieldName, ErrorType>) => JSX.Element;\n    DateRangePicker: (props: FormikDateRangePickerProps<FieldName, ErrorType>) => JSX.Element;\n    FileInput: (props: FormikFileInputProps<FieldName>) => JSX.Element;\n    Form: (props: TypedFormikFormProps<FormValues, ErrorType>) => JSX.Element;\n    FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => JSX.Element;\n    Input: (props: FormikInputProps<FieldName, ErrorType>) => JSX.Element;\n    NumberInput: (props: FormikNumberInputProps<FieldName, ErrorType>) => JSX.Element;\n    InputGroup: (props: FormikInputGroupProps<ErrorType, FieldName>) => JSX.Element;\n    RadioGroup: (props: FormikRadioGroupProps<FieldName, ErrorType>) => JSX.Element;\n    RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldName, ErrorType>) => JSX.Element;\n    Select: (props: FormikSelectProps<FieldName, ErrorType>) => JSX.Element;\n    Textarea: (props: FormikTextareaProps<FieldName, ErrorType>) => JSX.Element;\n    TimeInput: (props: FormikTimeInputProps<FieldName, ErrorType>) => JSX.Element;\n    YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldName, ErrorType>) => JSX.Element;\n}\n\nexport function getTypedFormComponents<FieldName, FormValues, ErrorType = string>(): TypedFormComponents<\n    FieldName,\n    FormValues,\n    ErrorType\n> {\n    return {\n        Checkbox: (props: FormikCheckboxProps<FieldName, ErrorType>) => (\n            <FormikCheckbox<FieldName, ErrorType> {...props} />\n        ),\n        CheckboxPanelGroup: (props: FormikCheckboxPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikCheckboxPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        ConfirmationCheckbox: (props: FormikConfirmationCheckboxPanelProps<FieldName, ErrorType>) => (\n            <FormikConfirmationCheckboxPanel<FieldName, ErrorType> {...props} />\n        ),\n        CountrySelect: (props: FormikCountrySelectProps<FieldName, ErrorType>) => (\n            <FormikCountrySelect<FieldName, ErrorType> {...props} />\n        ),\n        DatePicker: (props: FormikDatepickerProps<FieldName, ErrorType>) => (\n            <FormikDatepicker<FieldName, ErrorType> {...props} />\n        ),\n        DateIntervalPicker: (props: DateIntervalPickerProps<FieldName, ErrorType>) => (\n            <FormikDateIntervalPicker<FieldName, ErrorType> {...props} />\n        ),\n        DateRangePicker: (props: FormikDateRangePickerProps<FieldName, ErrorType>) => (\n            <FormikDateRangePicker<FieldName, ErrorType> {...props} />\n        ),\n        FileInput: (props: FormikFileInputProps<FieldName>) => <FormikFileInput<FieldName, ErrorType> {...props} />,\n        Form: (props: TypedFormikFormProps<FormValues, ErrorType>) => <TypedFormikForm {...props} />,\n        FormikWrapper: (props: TypedFormikWrapperProps<FormValues>) => <TypedFormikWrapper {...props} />,\n        Input: (props: FormikInputProps<FieldName, ErrorType>) => <FormikInput<FieldName, ErrorType> {...props} />,\n        NumberInput: (props: FormikNumberInputProps<FieldName, ErrorType>) => (\n            <FormikNumberInput<FieldName, ErrorType> {...props} />\n        ),\n        InputGroup: (props: FormikInputGroupProps<ErrorType, FieldName>) => (\n            <FormikInputGroup<ErrorType, FieldName> {...props} />\n        ),\n        RadioGroup: (props: FormikRadioGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioGroup<FieldName, ErrorType> {...props} />\n        ),\n        RadioPanelGroup: (props: FormikRadioPanelGroupProps<FieldName, ErrorType>) => (\n            <FormikRadioPanelGroup<FieldName, ErrorType> {...props} />\n        ),\n        Select: (props: FormikSelectProps<FieldName, ErrorType>) => <FormikSelect<FieldName, ErrorType> {...props} />,\n        Textarea: (props: FormikTextareaProps<FieldName, ErrorType>) => (\n            <FormikTextarea<FieldName, ErrorType> {...props} />\n        ),\n        TimeInput: (props: FormikTimeInputProps<FieldName, ErrorType>) => (\n            <FormikTimeInput<FieldName, ErrorType> {...props} />\n        ),\n        YesOrNoQuestion: (props: FormikYesOrNoQuestionProps<FieldName, ErrorType>) => (\n            <FormikYesOrNoQuestion<FieldName, ErrorType> {...props} />\n        ),\n    };\n}\n","import dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isoWeek);\n\nexport enum ValidateDateError {\n    dateHasNoValue = 'dateHasNoValue',\n    dateHasInvalidFormat = 'dateHasInvalidFormat',\n    dateIsBeforeMin = 'dateIsBeforeMin',\n    dateIsAfterMax = 'dateIsAfterMax',\n    dateIsNotWeekday = 'dateIsNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateDateError.dateHasNoValue\n    | ValidateDateError.dateHasInvalidFormat\n    | ValidateDateError.dateIsBeforeMin\n    | ValidateDateError.dateIsAfterMax\n    | ValidateDateError.dateIsNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst getDateValidator =\n    (options: DateValidationOptions = {}): ValidationFunction<DateValidationResult> =>\n    (value: any) => {\n        const { required, min, max, onlyWeekdays } = options;\n        const date = datepickerUtils.getDateFromDateString(value);\n        if (required && hasValue(value) === false) {\n            return ValidateDateError.dateHasNoValue;\n        }\n        if (hasValue(value)) {\n            if (date === undefined) {\n                return ValidateDateError.dateHasInvalidFormat;\n            }\n            if (min && dayjs(date).isBefore(min, 'day')) {\n                return ValidateDateError.dateIsBeforeMin;\n            }\n            if (max && dayjs(date).isAfter(max, 'day')) {\n                return ValidateDateError.dateIsAfterMax;\n            }\n            if (onlyWeekdays && dayjs(date).isoWeekday() > 5) {\n                return ValidateDateError.dateIsNotWeekday;\n            }\n        }\n        return undefined;\n    };\n\nexport default getDateValidator;\n","import dayjs from 'dayjs';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport datepickerUtils from '../components/formik-datepicker/datepickerUtils';\nimport getDateValidator, { DateValidationOptions, DateValidationResult } from './getDateValidator';\nimport { ValidationFunction } from './types';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface Options extends DateValidationOptions {\n    fromDate?: Date;\n    toDate?: Date;\n}\n\nconst getFromDateValidator =\n    (options: Options): ValidationFunction<DateRangeValidationResult> =>\n    (value: any) => {\n        const dateError = getDateValidator(options)(value);\n        if (dateError) {\n            return dateError;\n        }\n        const { toDate } = options;\n        const date = datepickerUtils.getDateFromDateString(value);\n        if (!date || !toDate) {\n            return undefined;\n        }\n\n        if (dayjs(date).isAfter(toDate, 'day')) {\n            return ValidateDateRangeError.fromDateIsAfterToDate;\n        }\n        return undefined;\n    };\n\nconst getToDateValidator =\n    (options: Options): ValidationFunction<DateRangeValidationResult> =>\n    (value: any) => {\n        const dateError = getDateValidator(options)(value);\n        if (dateError) {\n            return dateError;\n        }\n        const { fromDate } = options;\n        const date = datepickerUtils.getDateFromDateString(value);\n        if (!date || !fromDate) {\n            return undefined;\n        }\n        if (dayjs(date).isBefore(fromDate, 'day')) {\n            return ValidateDateRangeError.toDateIsBeforeFromDate;\n        }\n        return undefined;\n    };\n\nconst getDateRangeValidator = (options: Options) => ({\n    validateFromDate: getFromDateValidator(options),\n    validateToDate: getToDateValidator(options),\n});\n\nexport default getDateRangeValidator;\n","import fnrvalidator from '@navikt/fnrvalidator';\nimport { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateFødselsnummerError {\n    fødselsnummerHasNoValue = 'fødselsnummerHasNoValue',\n    fødselsnummerIsNot11Chars = 'fødselsnummerIsNot11Chars',\n    fødselsnummerIsInvalid = 'fødselsnummerIsInvalid',\n    fødselsnummerIsNotAllowed = 'fødselsnummerIsNotAllowed',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateFødselsnummerError.fødselsnummerHasNoValue\n    | ValidateFødselsnummerError.fødselsnummerIsNotAllowed\n    | ValidateFødselsnummerError.fødselsnummerIsNot11Chars\n    | ValidateFødselsnummerError.fødselsnummerIsInvalid\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    disallowedValues?: string[];\n}\n\nconst getFødselsnummerValidator =\n    (options: Options = {}): ValidationFunction<FødselsnummerValidationResult> =>\n    (value: any) => {\n        const { required, disallowedValues } = options;\n        if (hasValue(value) === false && required === false) {\n            return undefined;\n        }\n        if (required && hasValue(value) === false) {\n            return ValidateFødselsnummerError.fødselsnummerHasNoValue;\n        }\n        if (hasValue(value)) {\n            const result = fnrvalidator.fnr(value);\n            if (result.status === 'invalid') {\n                /** Errors from @navikt/fnrvalidator */\n                const LENGTH_ERROR = 'fnr or dnr must consist of 11 digits';\n                const { reasons } = result;\n                if (reasons.includes(LENGTH_ERROR)) {\n                    return ValidateFødselsnummerError.fødselsnummerIsNot11Chars;\n                }\n                return ValidateFødselsnummerError.fødselsnummerIsInvalid;\n            }\n            if (disallowedValues) {\n                const equalsDisallowedValue = disallowedValues.some((f) => f === value);\n                if (equalsDisallowedValue) {\n                    return ValidateFødselsnummerError.fødselsnummerIsNotAllowed;\n                }\n            }\n        }\n        return undefined;\n    };\n\nexport default getFødselsnummerValidator;\n","import { ValidationFunction } from './types';\n\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ntype ListValidationResult = undefined | ValidateListError;\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst getListValidator =\n    (options: Options): ValidationFunction<ListValidationResult> =>\n    (value: any) => {\n        const { required = false, minItems = undefined, maxItems = undefined } = options;\n        if (Array.isArray(value)) {\n            const numItems = value.length;\n            if (required && numItems === 0) {\n                return ValidateListError.listIsEmpty;\n            }\n            if (minItems !== undefined && minItems > numItems) {\n                return ValidateListError.listHasTooFewItems;\n            }\n            if (maxItems !== undefined && maxItems < numItems) {\n                return ValidateListError.listHasTooManyItems;\n            }\n        }\n        if (required && !Array.isArray(value)) {\n            return ValidateListError.listIsEmpty;\n        }\n    };\n\nexport default getListValidator;\n","import { getNumberFromStringInput, hasValue } from './validationUtils';\nimport { ValidationFunction } from './types';\n\nexport enum ValidateNumberError {\n    numberHasNoValue = 'numberHasNoValue',\n    numberHasInvalidFormat = 'numberHasInvalidFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge',\n    numberHasDecimals = 'numberHasDecimals',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateNumberError.numberHasNoValue\n    | ValidateNumberError.numberHasInvalidFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall\n    | ValidateNumberError.numberHasDecimals;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n    allowDecimals?: boolean;\n}\n\nconst getNumberValidator =\n    (options: Options = {}): ValidationFunction<NumberValidationResult> =>\n    (value: any) => {\n        const { required, min, max, allowDecimals = true } = options;\n        const numberValue = getNumberFromStringInput(value);\n\n        if (required) {\n            if (hasValue(value) === false || (typeof value === 'string' && value.trim().length === 0)) {\n                return ValidateNumberError.numberHasNoValue;\n            }\n        }\n\n        if (hasValue(value)) {\n            if (numberValue === undefined) {\n                return ValidateNumberError.numberHasInvalidFormat;\n            }\n            if (allowDecimals === false && Math.round(numberValue) !== numberValue) {\n                return ValidateNumberError.numberHasDecimals;\n            }\n            if (min !== undefined && numberValue < min) {\n                return ValidateNumberError.numberIsTooSmall;\n            }\n            if (max !== undefined && numberValue > max) {\n                return ValidateNumberError.numberIsTooLarge;\n            }\n        }\n        return undefined;\n    };\n\nexport default getNumberValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateOrgNumberError {\n    orgNumberHasNoValue = 'orgNumberHasNoValue',\n    orgNumberHasInvalidFormat = 'orgNumberHasInvalidFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateOrgNumberError.orgNumberHasNoValue\n    | ValidateOrgNumberError.orgNumberHasInvalidFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst isValidOrgNumber = (value: any): boolean => {\n    if (\n        value &&\n        typeof value === 'string' &&\n        value.length === 9 &&\n        /^[0-9]*$/.test(value) &&\n        (value.charAt(0) === '8' || value.charAt(0) === '9')\n    ) {\n        return getMod11(value) === parseInt(value.charAt(8), 10);\n    }\n    return false;\n};\n\nconst getOrgNumberValidator =\n    (options: Options = {}): ValidationFunction<OrgNumberValidationResult> =>\n    (value: any) => {\n        const { required } = options;\n        if (required && hasValue(value) === false) {\n            return ValidateOrgNumberError.orgNumberHasNoValue;\n        }\n        const isValidFormat = isValidOrgNumber(value);\n        if (hasValue(value) && isValidFormat === false) {\n            return ValidateOrgNumberError.orgNumberHasInvalidFormat;\n        }\n    };\n\nexport default getOrgNumberValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateStringError {\n    stringHasNoValue = 'stringHasNoValue',\n    stringIsNotAString = 'stringIsNotAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateStringError.stringHasNoValue\n    | ValidateStringError.stringIsNotAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ninterface Options {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst getStringValidator =\n    (options: Options = {}): ValidationFunction<StringValidationResult> =>\n    (value: any) => {\n        const { required, minLength, maxLength } = options;\n\n        if (required) {\n            if (hasValue(value) === false || (typeof value === 'string' && value.trim().length === 0)) {\n                return ValidateStringError.stringHasNoValue;\n            }\n        }\n\n        if (hasValue(value)) {\n            if (typeof value !== 'string') {\n                return ValidateStringError.stringIsNotAString;\n            }\n            if (minLength !== undefined && value.trim().length < minLength) {\n                return ValidateStringError.stringIsTooShort;\n            }\n            if (maxLength !== undefined && value.length > maxLength) {\n                return ValidateStringError.stringIsTooLong;\n            }\n        }\n    };\n\nexport default getStringValidator;\n","import { YesOrNo } from '../types';\nimport { ValidationFunction } from './types';\n\nexport enum ValidateYesOrNoError {\n    'yesOrNoIsUnanswered' = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult = ValidateYesOrNoError.yesOrNoIsUnanswered | undefined;\n\nconst getYesOrNoValidator = (): ValidationFunction<YesOrNoValidationResult> => (value: any) => {\n    const isAnswered = value === YesOrNo.YES || value === YesOrNo.NO || value === YesOrNo.DO_NOT_KNOW;\n    return isAnswered ? undefined : ValidateYesOrNoError.yesOrNoIsUnanswered;\n};\n\nexport default getYesOrNoValidator;\n","import { ValidationFunction } from './types';\nimport { hasValue } from './validationUtils';\n\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst getRequiredFieldValidator = (): ValidationFunction<RequiredFieldValidationResult> => (value: any) => {\n    if (hasValue(value) === false) {\n        return ValidateRequiredFieldError.noValue;\n    }\n    return undefined;\n};\n\nexport default getRequiredFieldValidator;\n","import { Time } from '../types';\nimport { ValidationFunction } from './types';\nimport { getNumberFromStringInput, hasValue } from './validationUtils';\n\nexport enum ValidateTimeError {\n    timeHasNoValue = 'timeHasNoValue',\n    hoursAreInvalid = 'hoursAreInvalid',\n    hoursAreNegative = 'hoursAreNegative',\n    minutesAreInvalid = 'minutesAreInvalid',\n    minutesAreNegative = 'minutesAreNegative',\n    tooManyHours = 'tooManyHours',\n    tooManyMinutes = 'tooManyMinutes',\n    durationIsTooLong = 'durationIsTooLong',\n    durationIsTooShort = 'durationIsTooShort',\n}\n\ntype TimeValidationResult =\n    | undefined\n    | ValidateTimeError.timeHasNoValue\n    | ValidateTimeError.hoursAreInvalid\n    | ValidateTimeError.hoursAreNegative\n    | ValidateTimeError.minutesAreInvalid\n    | ValidateTimeError.minutesAreNegative\n    | ValidateTimeError.durationIsTooLong\n    | ValidateTimeError.durationIsTooShort\n    | ValidateTimeError.tooManyHours\n    | ValidateTimeError.tooManyMinutes;\n\ntype TimeRange = {\n    hours: number;\n    minutes: number;\n};\n\ninterface Options {\n    required?: boolean;\n    min?: TimeRange;\n    max?: TimeRange;\n}\n\nconst getMinutes = (hours: number, minutes: number): number => hours * 60 + minutes;\n\nconst valueIsValidNumber = (value: string | undefined): boolean => {\n    if (value) {\n        return value.match(/^[\\-0-9]+$/) !== null; // Tillatt - for å kunne gi feil på negative verdier\n    }\n    return false;\n};\n\nconst getTimeValidator =\n    (options: Options = {}): ValidationFunction<TimeValidationResult> =>\n    (value: Partial<Time>) => {\n        const { required, max, min } = options;\n        const { hours: inputHours, minutes: inputMinutes } = value || {};\n\n        if (hasValue(inputHours) && valueIsValidNumber(inputHours) === false) {\n            return ValidateTimeError.hoursAreInvalid;\n        }\n        if (hasValue(inputMinutes) && valueIsValidNumber(inputMinutes) === false) {\n            return ValidateTimeError.minutesAreInvalid;\n        }\n\n        const hours = getNumberFromStringInput(inputHours || '0');\n        const minutes = getNumberFromStringInput(inputMinutes || '0');\n\n        if (hours === undefined) {\n            return ValidateTimeError.hoursAreInvalid;\n        } else if (hours > 23) {\n            return ValidateTimeError.tooManyHours;\n        } else if (hours < 0) {\n            return ValidateTimeError.hoursAreNegative;\n        }\n        if (minutes === undefined) {\n            return ValidateTimeError.minutesAreInvalid;\n        } else if (minutes > 59) {\n            return ValidateTimeError.tooManyMinutes;\n        } else if (minutes < 0) {\n            return ValidateTimeError.minutesAreNegative;\n        }\n\n        if (required && hours === 0 && minutes === 0) {\n            return ValidateTimeError.timeHasNoValue;\n        }\n\n        if (max) {\n            if (getMinutes(hours, minutes) > getMinutes(max.hours, max.minutes)) {\n                return ValidateTimeError.durationIsTooLong;\n            }\n        }\n\n        if (min) {\n            if (getMinutes(hours, minutes) < getMinutes(min.hours, min.minutes)) {\n                return ValidateTimeError.durationIsTooShort;\n            }\n        }\n\n        return undefined;\n    };\n\nexport default getTimeValidator;\n","export interface IntlErrorObject {\n    /** If passed in, the key is not transformed with field name and error */\n    key: string;\n    /** Values passed through to intl formatMessage */\n    values?: { [key: string]: any };\n    /** Set if error key is not to be altered by fieldErrorHandler */\n    keepKeyUnaltered?: boolean;\n}\n\nexport const isIntlErrorObject = (error: any): error is IntlErrorObject => {\n    return typeof error === 'object' && typeof error.key === 'string';\n};\n\nexport type ValidationError = string | IntlErrorObject;\n\nexport type ValidationResult<ValidationErrors> = ValidationErrors | undefined;\n\nexport type ValidationFunction<ValidationErrors> = (value: any) => ValidationResult<ValidationErrors>;\n","import { IntlShape } from 'react-intl';\nimport { CustomFormErrorHandler, FieldErrorHandler } from '../types';\nimport { isIntlErrorObject, ValidationError } from './types';\n\nconst createFieldErrorIntlKey = (error: string, fieldName: string, errorPrefix?: string): string =>\n    `${errorPrefix ? `${errorPrefix}.` : ''}${fieldName}.${error}`;\n\nconst getFieldErrorHandler =\n    (intl: IntlShape, errorPrefix?: string): FieldErrorHandler<ValidationError> =>\n    (error: ValidationError, fieldName: string) => {\n        return isIntlErrorObject(error)\n            ? intl.formatMessage(\n                  {\n                      id: error.keepKeyUnaltered\n                          ? error.key\n                          : createFieldErrorIntlKey(error.key, fieldName, errorPrefix),\n                  },\n                  error.values\n              )\n            : intl.formatMessage({ id: createFieldErrorIntlKey(error, fieldName, errorPrefix) });\n    };\n\nconst getIntlFormErrorHandler = (intl: IntlShape, errorPrefix?: string): CustomFormErrorHandler<ValidationError> => ({\n    fieldErrorHandler: getFieldErrorHandler(intl, errorPrefix),\n    isHandledErrorTypeFunc: isIntlErrorObject,\n});\n\nexport default getIntlFormErrorHandler;\n","export interface Ferieuttak {\n    id?: string;\n    fom: Date;\n    tom: Date;\n    land: Ferieland[];\n}\n\nexport const isFerieuttak = (ferieuttak: Ferieuttak): ferieuttak is Ferieuttak => {\n    return ferieuttak.fom !== undefined && ferieuttak.tom !== undefined && ferieuttak.land !== undefined;\n};\n\nexport enum Ferieland {\n    'Norge' = 'norge',\n    'Sverige' = 'sverige',\n    'Danmark' = 'danmark',\n}\n","import React from 'react';\n\nconst Question: React.FunctionComponent = ({ children }) => <div style={{ marginBottom: '2rem' }}>{children}</div>;\n\nexport default Question;\n","import React from 'react';\nimport bemUtils from '../../utils/bemUtils';\nimport './tiles.less';\n\nconst bem = bemUtils('tiles');\ninterface Props {\n    columns?: 1 | 2 | 3 | 'flex';\n}\n\nconst Tiles: React.FunctionComponent<Props> = ({ columns = 3, children }) => (\n    <div className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <div className={bem.element('tile')}>{child}</div>\n        ))}\n    </div>\n);\n\nexport default Tiles;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Box from '@navikt/sif-common-core/lib/components/box/Box';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { dateToISOString, getTypedFormComponents, ISOStringToDate } from '../../../../typed-formik-form';\nimport { getDateRangeValidator } from '../../../../typed-formik-form/validation';\nimport getDateValidator from '../../../../typed-formik-form/validation/getDateValidator';\nimport getListValidator, { ValidateListError } from '../../../../typed-formik-form/validation/getListValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { Ferieland, Ferieuttak, isFerieuttak } from './types';\n\nexport interface FerieuttakFormLabels {\n    title: string;\n    fromDate: string;\n    toDate: string;\n    intervalTitle: string;\n    okButton: string;\n    cancelButton: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    ferieuttak?: Ferieuttak;\n    alleFerieuttak?: Ferieuttak[];\n    labels?: Partial<FerieuttakFormLabels>;\n    onSubmit: (values: Ferieuttak) => void;\n    onCancel: () => void;\n}\n\nconst defaultLabels: FerieuttakFormLabels = {\n    title: 'Registrer uttak av ferie',\n    fromDate: 'Fra og med',\n    toDate: 'Til og med',\n    intervalTitle: 'Velg tidsrom',\n    okButton: 'Ok',\n    cancelButton: 'Avbryt',\n};\n\nexport enum FerieuttakFormFields {\n    tom = 'tom',\n    fom = 'fom',\n    land = 'land',\n}\n\ninterface FormValues extends Omit<Ferieuttak, 'fom' | 'tom'> {\n    fom: string;\n    tom: string;\n}\n\nconst Form = getTypedFormComponents<FerieuttakFormFields, FormValues, ValidationError>();\n\nconst mapFerieuttakToFormValues = (ferieuttak: Ferieuttak): FormValues => ({\n    ...ferieuttak,\n    land: [...(ferieuttak.land || [])],\n    fom: dateToISOString(ferieuttak.fom),\n    tom: dateToISOString(ferieuttak.tom),\n});\n\nconst mapFormValuesToFerieuttak = (values: Partial<FormValues>): Ferieuttak | undefined => {\n    const fom = ISOStringToDate(values.fom);\n    const tom = ISOStringToDate(values.tom);\n    if (fom && tom) {\n        return {\n            ...values,\n            land: [...(values.land || [])],\n            fom,\n            tom,\n        };\n    }\n    return undefined;\n};\n\nconst FerieuttakForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    labels,\n    ferieuttak,\n    alleFerieuttak = [],\n    onSubmit,\n    onCancel,\n}) => {\n    const onFormikSubmit = (formValues: Partial<FormValues>) => {\n        const ferieuttak = mapFormValuesToFerieuttak(formValues);\n        if (ferieuttak && isFerieuttak(ferieuttak)) {\n            onSubmit(ferieuttak);\n        } else {\n            throw new Error('FerieuttakForm: Formvalues is not a valid Ferieuttak on submit.');\n        }\n    };\n    const intl = useIntl();\n    const formLabels: FerieuttakFormLabels = { ...defaultLabels, ...labels };\n    const initialValues = ferieuttak ? mapFerieuttakToFormValues(ferieuttak) : undefined;\n    return (\n        <>\n            <Form.FormikWrapper\n                initialValues={initialValues || {}}\n                onSubmit={onFormikSubmit}\n                renderForm={(formik) => (\n                    <Form.Form onCancel={onCancel} formErrorHandler={getIntlFormErrorHandler(intl, 'ferieForm')}>\n                        <Box padBottom=\"l\">\n                            <Systemtittel tag=\"h1\">{formLabels.title}</Systemtittel>\n                        </Box>\n                        <Form.CheckboxPanelGroup\n                            name={FerieuttakFormFields.land}\n                            legend={'Hvilket land'}\n                            checkboxes={[\n                                {\n                                    value: Ferieland.Norge,\n                                    label: 'Norge',\n                                },\n                                {\n                                    value: Ferieland.Sverige,\n                                    label: 'Sverige',\n                                },\n                                {\n                                    value: Ferieland.Danmark,\n                                    label: 'Danmark',\n                                },\n                            ]}\n                            validate={(value) => {\n                                const error = getListValidator({ required: true })(value);\n                                switch (error) {\n                                    case undefined:\n                                        return undefined;\n                                    case ValidateListError.listIsEmpty:\n                                        return 'listIsEmpty';\n                                }\n                            }}\n                        />\n                        <Box margin=\"xl\">\n                            <Form.DateIntervalPicker\n                                legend={formLabels.intervalTitle}\n                                fromDatepickerProps={{\n                                    label: formLabels.fromDate,\n                                    name: FerieuttakFormFields.fom,\n                                    fullscreenOverlay: true,\n                                    minDate,\n                                    maxDate: maxDate || formik.values.tom,\n                                    disabledDateRanges: alleFerieuttak\n                                        .filter((f) => (ferieuttak ? ferieuttak.id !== f.id : true))\n                                        .map((f) => ({ from: f.fom, to: f.tom })),\n                                    validate: (value) => {\n                                        const error = getDateValidator({\n                                            required: true,\n                                            min: minDate,\n                                            max: maxDate,\n                                        })(value);\n                                        return error;\n                                    },\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.tom);\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    label: formLabels.toDate,\n                                    name: FerieuttakFormFields.tom,\n                                    fullscreenOverlay: true,\n                                    minDate: minDate || formik.values.fom,\n                                    maxDate,\n                                    validate: getDateRangeValidator({\n                                        fromDate: ISOStringToDate(formik.values.fom),\n                                        min: minDate,\n                                        max: maxDate,\n                                        required: true,\n                                    }).validateToDate,\n                                    onChange: () => {\n                                        setTimeout(() => {\n                                            formik.validateField(FerieuttakFormFields.fom);\n                                        });\n                                    },\n                                }}\n                            />\n                        </Box>\n                    </Form.Form>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FerieuttakForm;\n","import React from 'react';\nimport ActionLink from '@navikt/sif-common-core/lib/components/action-link/ActionLink';\nimport ItemList from '@navikt/sif-common-core/lib/components/item-list/ItemList';\nimport { prettifyDateExtended } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { Ferieuttak } from './types';\n\ninterface Props {\n    ferieuttak: Ferieuttak[];\n    onEdit?: (opphold: Ferieuttak) => void;\n    onDelete?: (opphold: Ferieuttak) => void;\n}\n\nconst FerieuttakList: React.FunctionComponent<Props> = ({ ferieuttak = [], onDelete, onEdit }) => {\n    const getDateTitleString = (uttak: Ferieuttak) =>\n        `${prettifyDateExtended(uttak.fom)} - ${prettifyDateExtended(uttak.tom)}`;\n\n    const renderFerieuttakLabel = (uttak: Ferieuttak): React.ReactNode => {\n        const title = getDateTitleString(uttak);\n        return (\n            <>\n                {onEdit && <ActionLink onClick={() => onEdit(uttak)}>{title}</ActionLink>}\n                {!onEdit && <span>{title}</span>}\n            </>\n        );\n    };\n\n    return (\n        <ItemList<Ferieuttak>\n            getItemId={(uttak) => uttak.id}\n            getItemTitle={(uttak) => getDateTitleString(uttak)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderFerieuttakLabel}\n            items={ferieuttak.filter((uttak) => uttak.id !== undefined)}\n        />\n    );\n};\n\nexport default FerieuttakList;\n","import React from 'react';\nimport { sortItemsByFom } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '../../../../typed-formik-form';\nimport FerieuttakForm from './FerieuttakForm';\nimport FerieuttakList from './FerieuttakList';\nimport { Ferieuttak } from './types';\nimport { TypedFormInputValidationProps } from '../../../../typed-formik-form/types';\n\ninterface Props<FieldName> extends TypedFormInputValidationProps<FieldName, string> {\n    name: FieldName;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n}\n\nfunction FerieuttakListAndDialog<FieldName>({ name, minDate, maxDate, validate, labels }: Props<FieldName>) {\n    return (\n        <>\n            <FormikModalFormAndList<FieldName, Ferieuttak, string>\n                name={name}\n                labels={labels}\n                dialogWidth=\"narrow\"\n                validate={validate ? (value) => validate(value, name) : undefined}\n                sortFunc={sortItemsByFom}\n                maxItems={3}\n                formRenderer={({ onSubmit, onCancel, item, allItems }) => (\n                    <FerieuttakForm\n                        ferieuttak={item}\n                        alleFerieuttak={allItems}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        onSubmit={onSubmit}\n                        onCancel={onCancel}\n                    />\n                )}\n                listRenderer={({ items, onEdit, onDelete }) => (\n                    <FerieuttakList ferieuttak={items} onEdit={onEdit} onDelete={onDelete} />\n                )}\n            />\n        </>\n    );\n}\n\nexport default FerieuttakListAndDialog;\n","import { Time, YesOrNo } from '../../../typed-formik-form/types';\nimport { Ferieuttak } from './ferieuttak-example';\n\nexport enum FormFields {\n    'nameGroup' = 'nameGroup',\n    'firstname' = 'firstname',\n    'lastname' = 'lastname',\n    'birthdate' = 'birthdate',\n    'birthCountry' = 'birthCountry',\n    'hasKids' = 'hasKids',\n    'numberOfKids' = 'numberOfKids',\n    'hasBeenAbroadWithKids' = 'hasBeenAbroadWithKids',\n    'countries' = 'countries',\n    'time' = 'time',\n    'daterange_from' = 'daterange_from',\n    'daterange_to' = 'daterange_to',\n    'dateinterval_from' = 'dateinterval_from',\n    'dateinterval_to' = 'dateinterval_to',\n    'files' = 'files',\n    'ferieuttak' = 'ferieuttak',\n    'letters' = 'letters',\n    'fødselsnummer' = 'fødselsnummer',\n    'datastruktur' = 'objekt',\n    'barnetsFødselsnummer' = 'barnetsFødselsnummer',\n    'friends' = 'friends',\n    'tilsynstimer' = 'tilsynstimer',\n}\n\nexport interface CompletedFormValues {\n    [FormFields.nameGroup]: string;\n    [FormFields.firstname]: string;\n    [FormFields.lastname]?: string;\n    [FormFields.birthdate]: string;\n    [FormFields.birthCountry]: string;\n    [FormFields.hasKids]: YesOrNo;\n    [FormFields.numberOfKids]?: number;\n    [FormFields.hasBeenAbroadWithKids]?: YesOrNo;\n    [FormFields.countries]: string[];\n    [FormFields.time]?: Time;\n    [FormFields.daterange_from]?: string;\n    [FormFields.daterange_to]?: string;\n    [FormFields.files]?: any;\n    [FormFields.ferieuttak]?: Ferieuttak[];\n    [FormFields.letters]?: string[];\n    [FormFields.friends]: Friend[];\n    [FormFields.fødselsnummer]: string;\n    [FormFields.datastruktur]: {\n        navn: string;\n    };\n    [FormFields.tilsynstimer]: string;\n    [FormFields.barnetsFødselsnummer]: string;\n}\nexport interface Person {\n    name: string;\n}\nexport interface Friend extends Person {\n    siblings: Person[];\n}\nexport type FormValues = Partial<CompletedFormValues>;\n","import React from 'react';\nimport { FieldArray } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { FormikInput } from '../../../../typed-formik-form';\nimport { getStringValidator } from '../../../../typed-formik-form/validation';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { hasValue } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport { Friend } from '../types';\n\ninterface Props {\n    fieldName: string;\n    friend: Friend;\n}\n\nconst Siblings: React.FunctionComponent<Props> = ({ fieldName, friend }) => {\n    const { siblings } = friend;\n    return (\n        <FieldArray\n            name={fieldName}\n            render={(arrayHelpers) => (\n                <div>\n                    {siblings &&\n                        siblings.length > 0 &&\n                        siblings.map((_sibling, index) => (\n                            <div key={index}>\n                                <Question>\n                                    <FormikInput\n                                        type=\"text\"\n                                        label=\"Søskens navn\"\n                                        name={`${fieldName}.${index}.name` as any}\n                                        validate={(values) => {\n                                            const error = getStringValidator({ required: true })(values);\n                                            if (error) {\n                                                const intlErr: ValidationError = {\n                                                    key: 'søskennavn.mangler',\n                                                    values: {\n                                                        navn: hasValue(friend.name) ? friend.name : ` venn ${index}`,\n                                                    },\n                                                };\n                                                return intlErr;\n                                            }\n                                        }}\n                                    />\n                                </Question>\n                            </div>\n                        ))}\n                    <Box>\n                        <Knapp htmlType=\"button\" mini={true} onClick={() => arrayHelpers.push('')}>\n                            Legg til søsken\n                        </Knapp>\n                    </Box>\n                </div>\n            )}\n        />\n    );\n};\n\nexport default Siblings;\n","import { Time, YesOrNo } from '../../../typed-formik-form';\n\nexport enum FormFields {\n    'jaNeiSpørsmål' = 'jaNeiSpørsmål',\n    'tall' = 'tall',\n    'tekst' = 'tekst',\n    'fødselsnummer' = 'fødselsnummer',\n    'dato' = 'dato',\n    'tidsperiode_fra' = 'tidsperiode_fra',\n    'tidsperiode_til' = 'tidsperiode_til',\n    'orgnummer' = 'orgnummer',\n    'liste' = 'liste',\n    'radio' = 'radio',\n    'select' = 'select',\n    'checked' = 'checked',\n    'time' = 'time',\n}\n\nexport interface FormValues {\n    [FormFields.jaNeiSpørsmål]?: YesOrNo;\n    [FormFields.tall]?: string;\n    [FormFields.tekst]?: string;\n    [FormFields.fødselsnummer]?: string;\n    [FormFields.dato]?: string;\n    [FormFields.tidsperiode_fra]?: string;\n    [FormFields.tidsperiode_til]?: string;\n    [FormFields.orgnummer]?: string;\n    [FormFields.liste]?: string[];\n    [FormFields.select]?: string;\n    [FormFields.radio]?: string;\n    [FormFields.checked]?: boolean;\n    [FormFields.time]?: Partial<Time>;\n}\n\nexport const initialValues = {};\n","import { FieldArray } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport Panel from 'nav-frontend-paneler';\nimport React from 'react';\nimport { FormikInput } from '../../../../typed-formik-form';\nimport { getStringValidator } from '../../../../typed-formik-form/validation';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport { Friend } from '../types';\nimport Siblings from './Siblings';\n\ninterface Props {\n    fieldName: string;\n    friends: Friend[];\n}\n\nconst Friends: React.FunctionComponent<Props> = ({ fieldName, friends }) => (\n    <FieldArray\n        name={fieldName}\n        render={(arrayHelpers) => (\n            <div>\n                {friends &&\n                    friends.length > 0 &&\n                    friends.map((_friend, index) => {\n                        return (\n                            <div key={index}>\n                                <Panel border={true}>\n                                    <Question>\n                                        <FormikInput\n                                            type=\"text\"\n                                            label=\"Fornavn\"\n                                            name={`${fieldName}.${index}.name` as any}\n                                            validate={getStringValidator({ required: true })}\n                                        />\n                                    </Question>\n                                    <fieldset>\n                                        <legend>Søsken</legend>\n                                        <Siblings fieldName={`${fieldName}.${index}.siblings`} friend={_friend} />\n                                    </fieldset>\n                                </Panel>\n                            </div>\n                        );\n                    })}\n                <Box margin=\"l\">\n                    <Knapp\n                        htmlType=\"button\"\n                        mini={true}\n                        onClick={() => arrayHelpers.push({ name: 'bac', siblings: [] })}>\n                        Legg til en venn\n                    </Knapp>\n                </Box>\n            </div>\n        )}\n    />\n);\n\nexport default Friends;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormikContext } from 'formik';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport { FormikDateIntervalPicker, FormikFileInput, ISOStringToDate } from '../../../../typed-formik-form';\nimport FormikDateRangePicker from '../../../../typed-formik-form/components/formik-date-range-picker/FormikDateRangePicker';\nimport { getTypedFormComponents } from '../../../../typed-formik-form/components/getTypedFormComponents';\nimport {\n    getDateValidator,\n    getFødselsnummerValidator,\n    getNumberValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateFødselsnummerError,\n    ValidateNumberError,\n} from '../../../../typed-formik-form/validation';\nimport getRequiredFieldValidator from '../../../../typed-formik-form/validation/getRequiredFieldValidator';\nimport getIntlFormErrorHandler from '../../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../../typed-formik-form/validation/types';\nimport { validateAll } from '../../../../typed-formik-form/validation/validationUtils';\nimport Box from '../../../components/box/Box';\nimport Question from '../../../components/question/Question';\nimport Tiles from '../../../components/tiles/Tiles';\nimport FerieuttakListAndDialog from '../ferieuttak-example/FerieuttakListAndDialog';\nimport { FormFields, FormValues } from '../types';\nimport Friends from './Friends';\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst TypedFormExample = () => {\n    const { values } = useFormikContext<FormValues>();\n    const { setFieldValue } = useFormikContext<FormValues>();\n    const intl = useIntl();\n    const minDate = dayjs().subtract(2, 'month').toDate();\n    const maxDate = dayjs().add(1, 'month').toDate();\n    return (\n        <Form.Form\n            submitButtonLabel=\"Ok\"\n            includeValidationSummary={true}\n            includeButtons={true}\n            formErrorHandler={getIntlFormErrorHandler(intl)}>\n            <Question>\n                <Form.YesOrNoQuestion\n                    legend={'Har du kids'}\n                    name={FormFields.hasKids}\n                    validate={(value) => {\n                        const err = getYesOrNoValidator()(value);\n                        if (err) {\n                            return {\n                                key: err,\n                                values: { question: 'spørsmålet om antall barn' },\n                                keepKeyUnaltered: false,\n                            };\n                        }\n                    }}\n                />\n            </Question>\n            {1 + 1 === 3 && (\n                <Question>\n                    <FormikDateRangePicker\n                        legend=\"DateRangePicker\"\n                        disableWeekend={true}\n                        minDate={minDate}\n                        maxDate={maxDate}\n                        fromInputProps={{\n                            name: FormFields.daterange_from,\n                            label: 'Fra',\n                        }}\n                        toInputProps={{\n                            name: FormFields.daterange_to,\n                            label: 'Til',\n                        }}\n                    />\n                </Question>\n            )}\n            <Question>\n                <Form.Input\n                    name={FormFields.fødselsnummer}\n                    label=\"Fødselsnummer\"\n                    validate={(value) =>\n                        validateAll<ValidationError>([\n                            () => getStringValidator({ minLength: 2 })(value),\n                            () => getFødselsnummerValidator({ required: true })(value),\n                        ])\n                    }\n                />\n            </Question>\n            <Question>\n                <Form.Input\n                    name={FormFields.barnetsFødselsnummer}\n                    label=\"Barnets fødselsnummer\"\n                    validate={(value) => {\n                        const error = getFødselsnummerValidator({\n                            required: true,\n                            disallowedValues: values.fødselsnummer ? [values.fødselsnummer] : undefined,\n                        })(value);\n                        if (error === ValidateFødselsnummerError.fødselsnummerIsNotAllowed) {\n                            return {\n                                key: 'fødselsnummer.fødselsnummerIsNotAllowed',\n                                values: {\n                                    info: ' (du har tastet inn ditt eget fødselsnummer)',\n                                },\n                            };\n                        }\n                        return error;\n                    }}\n                />\n            </Question>\n            <Box margin=\"xl\">\n                <Box margin=\"l\" padBottom=\"l\">\n                    <Undertittel>Venner</Undertittel>\n                </Box>\n                <Question>\n                    <Friends fieldName=\"friends\" friends={values.friends || []} />\n                </Question>\n            </Box>\n            <Question>\n                <FerieuttakListAndDialog\n                    name={FormFields.ferieuttak}\n                    labels={{\n                        addLabel: 'Legg til',\n                        modalTitle: 'Ferieuttak',\n                        listTitle: 'Ferieuttak',\n                    }}\n                    minDate={dayjs().subtract(1, 'year').toDate()}\n                    maxDate={dayjs().add(1, 'year').toDate()}\n                />\n            </Question>\n            <Question>\n                <Form.DatePicker\n                    name={FormFields.birthdate}\n                    label=\"Fødselsdato\"\n                    validate={getDateValidator({ required: true })}\n                />\n                {1 + 1 === 3 && (\n                    <Knapp\n                        htmlType=\"button\"\n                        onClick={() => {\n                            setFieldValue(FormFields.birthdate, '2000-10-2');\n                        }}>\n                        Sett ugyldig dato\n                    </Knapp>\n                )}\n            </Question>\n            <Question>\n                <Form.CountrySelect\n                    name={FormFields.birthCountry}\n                    label=\"Fødselsland\"\n                    useAlpha3Code={true}\n                    validate={getRequiredFieldValidator()}\n                />\n            </Question>\n            <Question>\n                <Tiles columns={2}>\n                    <Form.Input name={FormFields.firstname} label=\"Fornavn\" validate={getRequiredFieldValidator()} />\n                    <Form.Input name={FormFields.lastname} label=\"Etternavn\" validate={getRequiredFieldValidator()} />\n                </Tiles>\n            </Question>\n            <Question>\n                <FormikDateIntervalPicker\n                    legend=\"DateIntervalPicker (test)\"\n                    fromDatepickerProps={{\n                        name: FormFields.dateinterval_from,\n                        label: 'Fra',\n                        maxDate: ISOStringToDate(values.daterange_to),\n                        validate: getRequiredFieldValidator(),\n                    }}\n                    toDatepickerProps={{\n                        name: FormFields.dateinterval_to,\n                        label: 'Til',\n                        minDate: ISOStringToDate(values.daterange_from),\n                        validate: getRequiredFieldValidator(),\n                    }}\n                />\n            </Question>\n            <Question>\n                <FormikFileInput\n                    name={FormFields.files}\n                    label=\"Legg til filer\"\n                    acceptedExtensions={'tsx'}\n                    onFilesSelect={() => null}\n                />\n            </Question>\n            <Question>\n                <Form.Input\n                    label=\"Oppgi hvor mange timer i snitt per uke, har barnet tilsyn?\"\n                    name={FormFields.tilsynstimer}\n                    suffixStyle=\"text\"\n                    suffix=\"Timer\"\n                    bredde=\"S\"\n                    maxLength={5}\n                    validate={(value) => {\n                        const error = getNumberValidator({ min: 0, max: 20000 })(value);\n                        if (error === ValidateNumberError.numberIsTooLarge) {\n                            return {\n                                key: error,\n                                values: { max: 20000 },\n                            };\n                        }\n                        if (error === ValidateNumberError.numberIsTooSmall) {\n                            return {\n                                key: error,\n                                values: { min: 0 },\n                            };\n                        }\n                        return error;\n                    }}\n                />\n            </Question>\n        </Form.Form>\n    );\n};\n\nexport default TypedFormExample;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport TypedFormExample from './typed-form-example/TypedFormExample';\nimport { FormValues } from './types';\n\nconst initialValues: FormValues = {\n    ferieuttak: [\n        {\n            id: '1',\n            fom: new Date(),\n            tom: dayjs().add(1, 'month').toDate(),\n            land: [],\n        },\n        {\n            id: '2',\n            fom: dayjs().add(1, 'month').toDate(),\n            tom: dayjs().add(2, 'month').toDate(),\n            land: [],\n        },\n    ],\n    friends: [],\n    letters: [],\n};\n\nconst FormikExample = () => {\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>TypedFormExample</h2>\n                <p>Skjemaet her er mest brukt som arbeidsflate for å teste komponentene under utvikling.</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={() => (\n                    <Panel>\n                        <TypedFormExample />\n                    </Panel>\n                )}\n            />\n        </>\n    );\n};\n\nexport default FormikExample;\n","import { Element } from 'nav-frontend-typografi';\nimport React from 'react';\nimport Box from '../box/Box';\nimport './validationErrorList.less';\n\ninterface ValidationErrorInfo {\n    info: string;\n    example?: string;\n}\n\nexport type ValidationErrors = {\n    [key: string]: ValidationErrorInfo;\n};\n\ninterface Props {\n    errors: ValidationErrors;\n    title: string;\n}\n\nconst ValidationErrorList = ({ errors, title }: Props) => {\n    return (\n        <Box margin=\"xl\">\n            {title && <Element tag=\"h4\">{title}</Element>}\n            <Box margin=\"m\">\n                <table className=\"validationErrorList\">\n                    <thead>\n                        <tr>\n                            <th>Feil</th>\n                            <th>Beskrivelse</th>\n                            <th>Eksempel</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.keys(errors).map((key) => {\n                            return (\n                                <tr key={key}>\n                                    <th>\n                                        <code>{key}</code>\n                                    </th>\n                                    <td key=\"info\">{errors[key].info}</td>\n                                    <td key=\"example\">{errors[key].example}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </Box>\n        </Box>\n    );\n};\n\nexport default ValidationErrorList;\n","import React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport Tabs from 'nav-frontend-tabs';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport Box from '../../components/box/Box';\nimport { hasValue } from '../../../typed-formik-form/validation/validationUtils';\n\ninterface Props {\n    title: string;\n    functionName?: string;\n    code?: string;\n}\n\nconst ValideringPanel: React.FunctionComponent<Props> = ({ title, children, code }) => {\n    const [activePanel, setActivePanel] = useState(0);\n    return (\n        <div style={{ marginBottom: '4rem' }}>\n            <Systemtittel tag=\"h3\">{title}</Systemtittel>\n            <Box margin=\"l\">\n                {hasValue(code) && (\n                    <Tabs\n                        tabs={[{ label: 'Eksempel' }, { label: 'Kode' }]}\n                        onChange={(_evt, idx) => setActivePanel(idx)}\n                    />\n                )}\n                {activePanel === 0 && <>{children}</>}\n                {activePanel === 1 && (\n                    <SyntaxHighlighter language=\"typescript\" style={docco}>\n                        {code}\n                    </SyntaxHighlighter>\n                )}\n            </Box>\n        </div>\n    );\n};\nexport default ValideringPanel;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(isSameOrBefore);\ndayjs.extend(utc);\ndayjs.extend(isBetween);\n\nimport { ApiStringDate } from '../types/ApiStringDate';\n\nconst apiDateFormat = 'YYYY-MM-DD';\nconst prettyDateFormat = 'DD.MM.YYYY';\nconst prettyDateFormatExtended = 'DD. MMM YYYY';\n\nexport const formatDateToApiFormat = (date: Date): ApiStringDate => {\n    const apiFormattedDate = dayjs(date).format(apiDateFormat);\n    return apiFormattedDate;\n};\nexport const prettifyDate = (date: Date): string => dayjs(date).format(prettyDateFormat);\nexport const prettifyDateExtended = (date: Date) => dayjs(date).format(prettyDateFormatExtended);\nexport const apiStringDateToDate = (date: ApiStringDate): Date => dayjs(date, apiDateFormat).toDate();\n\nexport const isMoreThan3YearsAgo = (date: Date) => dayjs(date).isBefore(date3YearsAgo);\n\nexport const dateToISOFormattedDateString = (date?: Date) => (date ? dayjs.utc(date).format(apiDateFormat) : undefined);\n\nexport const date10MonthsAgo = dayjs().subtract(10, 'month').startOf('day').toDate();\n\nexport const date1YearAgo = dayjs().subtract(1, 'year').startOf('day').toDate();\n\nexport const date4YearsAgo = dayjs().subtract(4, 'year').startOf('day').toDate();\n\nexport const date3YearsAgo = dayjs().subtract(3, 'year').startOf('day').toDate();\n\nexport const date4WeeksAgo = dayjs().subtract(4, 'week').startOf('day').toDate();\n\nexport const date1YearFromNow = dayjs().add(1, 'year').endOf('day').toDate();\n\nexport const dateToday = dayjs().toDate();\n\nexport const sortDateRange = (d1: DateRange, d2: DateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\nexport const sortOpenDateRange = (d1: OpenDateRange, d2: OpenDateRange): number => {\n    if (dayjs(d1.from).isSameOrBefore(d2.from)) {\n        return -1;\n    }\n    return 1;\n};\n\nexport interface DateRange {\n    from: Date;\n    to: Date;\n}\n\nexport interface OpenDateRange {\n    from: Date;\n    to?: Date;\n}\n\nexport const dateRangesCollide = (ranges: DateRange[]): boolean => {\n    if (ranges.length > 0) {\n        const sortedDates = ranges.sort(sortDateRange);\n        const hasOverlap = ranges.find((d, idx) => {\n            if (idx < sortedDates.length - 1) {\n                return dayjs(d.to).isAfter(sortedDates[idx + 1].from);\n            }\n            return false;\n        });\n        return hasOverlap !== undefined;\n    }\n    return false;\n};\n\nexport const dateRangesExceedsRange = (ranges: DateRange[], allowedRange: DateRange): boolean => {\n    if (ranges.length === 0) {\n        return false;\n    }\n    const sortedRanges = ranges.sort(sortDateRange);\n    const from = sortedRanges[0].from;\n    const to = sortedRanges[sortedRanges.length - 1].to;\n\n    if (\n        !dayjs(from).isBetween(allowedRange.from, allowedRange.to, 'day', '[]') ||\n        !dayjs(to).isBetween(allowedRange.from, allowedRange.to, 'day', '[]')\n    ) {\n        return true;\n    }\n    return false;\n};\n\ninterface ItemWithFomTom {\n    fom: Date;\n    tom: Date;\n}\n\ninterface ItemWithFom {\n    fom: Date;\n}\n\nexport const sortItemsByFomTom = (a: ItemWithFomTom, b: ItemWithFomTom) =>\n    sortDateRange({ from: a.fom, to: a.fom }, { from: b.fom, to: b.tom });\n\nexport const sortItemsByFom = (a: ItemWithFom, b: ItemWithFom) => sortOpenDateRange({ from: a.fom }, { from: b.fom });\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport Panel from 'nav-frontend-paneler';\nimport 'nav-frontend-tabs-style';\nimport { getTypedFormComponents } from '../../../typed-formik-form';\nimport datepickerUtils from '../../../typed-formik-form/components/formik-datepicker/datepickerUtils';\nimport TypedFormikWrapper from '../../../typed-formik-form/components/typed-formik-wrapper/TypedFormikWrapper';\nimport {\n    getCheckedValidator,\n    getDateRangeValidator,\n    getDateValidator,\n    getFødselsnummerValidator,\n    getListValidator,\n    getNumberValidator,\n    getOrgNumberValidator,\n    getRequiredFieldValidator,\n    getStringValidator,\n    getYesOrNoValidator,\n    ValidateCheckedError,\n    ValidateDateError,\n    ValidateDateRangeError,\n    ValidateFødselsnummerError,\n    ValidateListError,\n    ValidateNumberError,\n    ValidateOrgNumberError,\n    ValidateRequiredFieldError,\n    ValidateStringError,\n    ValidateYesOrNoError,\n} from '../../../typed-formik-form/validation';\nimport getIntlFormErrorHandler from '../../../typed-formik-form/validation/intlFormErrorHandler';\nimport { ValidationError } from '../../../typed-formik-form/validation/types';\nimport Box from '../../components/box/Box';\nimport PageIntro from '../../components/page-intro/PageIntro';\nimport ValidationErrorList from '../../components/validation-errors/ValidationErrorList';\nimport { FormFields, FormValues } from './types';\nimport ValideringPanel from './ValideringPanel';\nimport { dateToday } from '../../utils/dateUtils';\nimport { prettifyDate } from '@navikt/sif-common-core/lib/utils/dateUtils';\nimport getTimeValidator, { ValidateTimeError } from '../../../typed-formik-form/validation/getTimeValidator';\n\nconst initialValues: FormValues = {\n    liste: [],\n};\n\nconst Form = getTypedFormComponents<FormFields, FormValues, ValidationError>();\n\nconst ValideringExample = () => {\n    const intl = useIntl();\n    return (\n        <>\n            <PageIntro title=\"@navikt/sif-common-formik\">\n                <h2>Validering</h2>\n                <p>sif-common-formik komponenter med validering</p>\n            </PageIntro>\n\n            <TypedFormikWrapper<FormValues>\n                initialValues={initialValues}\n                onSubmit={(values) => {\n                    console.log('FormikWrapperSubmit', values);\n                }}\n                renderForm={(formik) => {\n                    const fromDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_fra);\n                    const toDate = datepickerUtils.getDateFromDateString(formik.values.tidsperiode_til);\n                    return (\n                        <Form.Form\n                            submitButtonLabel=\"Ok\"\n                            includeValidationSummary={true}\n                            includeButtons={true}\n                            formErrorHandler={getIntlFormErrorHandler(intl)}>\n                            <ValideringPanel\n                                title=\"Ja/Nei\"\n                                code={`\nexport enum ValidateYesOrNoError {\nyesOrNoIsUnanswered = 'yesOrNoIsUnanswered',\n}\n\ntype YesOrNoValidationResult =\n| ValidateYesOrNoError.yesOrNoIsUnanswered\n| undefined;\n\nconst error = getYesOrNoValidator()(value);\n                    `}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.jaNeiSpørsmål}\n                                        legend=\"Har du søkt om andre ytelser i perioden du søker for?\"\n                                        validate={getYesOrNoValidator()}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateYesOrNoError.yesOrNoIsUnanswered]: {\n                                            info: 'spørsmål er ikke besvart',\n                                            example:\n                                                'Du må svare ja eller nei på om du har søkt andre ytelser i perioden du søker for',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n\n                            <ValideringPanel\n                                title=\"Fritekst\"\n                                code={`\nexport enum ValidateStringError {\n    stringHasNoValue = 'stringHasNoValue',\n    stringIsNotAString = 'stringIsNotAString',\n    stringIsTooShort = 'stringIsTooShort',\n    stringIsTooLong = 'stringIsTooLong',\n}\n\ntype StringValidationResult =\n    | undefined\n    | ValidateStringError.stringHasNoValue\n    | ValidateStringError.stringIsNotAString\n    | ValidateStringError.stringIsTooLong\n    | ValidateStringError.stringIsTooShort;\n\ntype Options = {\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n}\n\nconst error = getStringValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.tekst}\n                                        label=\"Hva er navnet på dagen i dag? Bruk mellom 5 og 20 tegn\"\n                                        bredde=\"L\"\n                                        validate={getStringValidator({\n                                            required: true,\n                                            maxLength: 20,\n                                            minLength: 5,\n                                        })}></Form.Input>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateStringError.stringHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Skriv inn hvilken dag det er i dag',\n                                        },\n                                        [ValidateStringError.stringIsNotAString]: {\n                                            info: 'feil type data',\n                                            example: 'Navnet på dagen i dag er ikke gyldig',\n                                        },\n                                        [ValidateStringError.stringIsTooLong]: {\n                                            info: 'for lang tekst',\n                                            example: 'Navnet på dagen i dag kan ikke inneholde flere enn 20 tegn.',\n                                        },\n                                        [ValidateStringError.stringIsTooShort]: {\n                                            info: 'for kort tekst',\n                                            example: 'Navnet på dagen i dag må inneholde minst 5 tegn',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Tall\"\n                                code={`\nexport enum ValidateNumberError {\n    numberHasNoValue = 'numberHasNoValue',\n    numberHasInvalidFormat = 'numberHasInvalidFormat',\n    numberIsTooSmall = 'numberIsTooSmall',\n    numberIsTooLarge = 'numberIsTooLarge'\n    numberHasDecimals = 'numberHasDecimals',\n}\n\ntype NumberValidationResult =\n    | undefined\n    | ValidateNumberError.numberHasNoValue\n    | ValidateNumberError.numberHasInvalidFormat\n    | ValidateNumberError.numberIsTooLarge\n    | ValidateNumberError.numberIsTooSmall\n    |ValidateNumberError.numberHasDecimals;\n\ninterface Options {\n    required?: boolean;\n    min?: number;\n    max?: number;\n}\n\nconst error = getNumberValidator(options)(value);\n                                    `}>\n                                <Panel>\n                                    <Form.NumberInput\n                                        name={FormFields.tall}\n                                        label=\"Hva er næringsinntekten for virksomheten?\"\n                                        bredde=\"S\"\n                                        validate={getNumberValidator({\n                                            required: true,\n                                            min: 1999,\n                                            max: 2021,\n                                            allowDecimals: false,\n                                        })}></Form.NumberInput>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateNumberError.numberHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example: 'Du må oppgi næringsinntekt for virksomheten',\n                                        },\n                                        [ValidateNumberError.numberHasInvalidFormat]: {\n                                            info: 'verdien er ikke et tall',\n                                            example:\n                                                'Du må oppgi et gyldig tall for næringsinntekten i virksomheten. Et gyldig tall inneholder kun siffer.',\n                                        },\n                                        [ValidateNumberError.numberIsTooSmall]: {\n                                            info: 'for lavt tall',\n                                            example: `Tallet du har oppgitt som næringsinntekt for virksomheten er for lavt. Tallet kan ikke være lavere enn 0.`,\n                                        },\n                                        [ValidateNumberError.numberIsTooLarge]: {\n                                            info: 'for stort tall',\n                                            example: `Tallet du har oppgitt som næringsinntekt for virksomheten er for høyt. Tallet kan ikke være høyere enn 99999999.`,\n                                        },\n                                        [ValidateNumberError.numberHasDecimals]: {\n                                            info: 'tall inneholder desimaler',\n                                            example: `Tallet du har oppgitt inneholder desimaler. Oppgi tallet i heltall.`,\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Dato\"\n                                code={`\nexport enum ValidateDateError {\n    dateHasNoValue = 'dateHasNoValue',\n    dateHasInvalidFormat = 'dateHasInvalidFormat',\n    dateIsBeforeMin = 'dateIsBeforeMin',\n    dateIsAfterMax = 'dateIsAfterMax',\n    dateIsNotWeekday = 'dateIsNotWeekday',\n}\n\nexport type DateValidationResult =\n    | ValidateDateError.dateHasNoValue\n    | ValidateDateError.dateHasInvalidFormat\n    | ValidateDateError.dateIsBeforeMin\n    | ValidateDateError.dateIsAfterMax\n    | ValidateDateError.dateIsNotWeekday\n    | undefined;\n\nexport interface DateValidationOptions {\n    required?: boolean;\n    min?: Date;\n    max?: Date;\n    onlyWeekdays?: boolean;\n}\n\nconst error = getDateValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.DatePicker\n                                        name={FormFields.dato}\n                                        label={\n                                            'Når startet du i arbeidslivet? Dersom dette var en lørdag eller søndag, velg påfølgende mandag.'\n                                        }\n                                        showYearSelector={true}\n                                        validate={getDateValidator({\n                                            required: true,\n                                            min: new Date(2015, 0, 1),\n                                            max: dateToday,\n                                            onlyWeekdays: true,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateDateError.dateHasNoValue]: {\n                                            info: 'tomt innhold i felt',\n                                            example:\n                                                'Du må oppgi dato for når du begynte i arbeidslivet. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                        [ValidateDateError.dateHasInvalidFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Du må oppgi dato for når du begynte i arbeidslivet i et gyldig format. Gyldig format er dd.mm.åååå.',\n                                        },\n                                        [ValidateDateError.dateIsBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: `Datoen for når du begynte i arbeidslivet kan ikke være før ${prettifyDate(\n                                                new Date(2015, 0, 1)\n                                            )}. Skriv inn eller velg dato fra datovelgeren.`,\n                                        },\n                                        [ValidateDateError.dateIsAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example:\n                                                'Datoen for når du begynte i arbeidslivet kan ikke være etter dagens dato. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Periodevelger\"\n                                code={`\nexport enum ValidateDateRangeError {\n    toDateIsBeforeFromDate = 'toDateIsBeforeFromDate',\n    fromDateIsAfterToDate = 'fromDateIsAfterToDate',\n}\n\ntype DateRangeValidationResult =\n    | DateValidationResult\n    | ValidateDateRangeError.fromDateIsAfterToDate\n    | ValidateDateRangeError.toDateIsBeforeFromDate\n    | undefined;\n\ninterface Options extends DateValidationOptions {\n    fromDate?: Date;\n    toDate?: Date;\n}\n\nconst errorFromDate = getDateRangeValidator(options).validateFromDate(value);\nconst errorToDate = getDateRangeValidator(options).validateToDate(value);\n                                `}>\n                                <Panel>\n                                    <Form.DateRangePicker\n                                        legend=\"Når startet og avsluttet du virksomheten?\"\n                                        fromInputProps={{\n                                            label: 'Startdato',\n                                            name: FormFields.tidsperiode_fra,\n                                            dayPickerProps: { initialMonth: new Date(2021, 0, 1) },\n                                            validate: getDateRangeValidator({\n                                                min: new Date(2021, 0, 1),\n                                                max: new Date(2021, 11, 31),\n                                                toDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }).validateFromDate,\n                                        }}\n                                        toInputProps={{\n                                            label: 'Sluttdato',\n                                            name: FormFields.tidsperiode_til,\n                                            dayPickerProps: { initialMonth: new Date(2021, 11, 31) },\n                                            validate: getDateRangeValidator({\n                                                min: new Date(2000, 0, 1),\n                                                max: dateToday,\n                                                fromDate,\n                                                required: true,\n                                                onlyWeekdays: true,\n                                            }).validateToDate,\n                                        }}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger - Startdato\"\n                                    errors={{\n                                        [ValidateDateError.dateHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example:\n                                                'Du må oppgi hvilken dato du startet virksomheten. Skriv inn eller velg startdato fra datovelgeren.',\n                                        },\n                                        [ValidateDateError.dateHasInvalidFormat]: {\n                                            info: 'ugyldig verdi',\n                                            example:\n                                                'Du må oppgi startdato for virksomheten i et gyldig format. Gyldig format er dd.mm.ååå.',\n                                        },\n                                        [ValidateDateError.dateIsBeforeMin]: {\n                                            info: 'dato er for tidlig',\n                                            example: `Startdatoen for når du startet virksomheten kan ikke være før ${prettifyDate(\n                                                new Date(2000, 0, 1)\n                                            )}. Skriv inn eller velg startdato fra datovelgeren.`,\n                                        },\n                                        [ValidateDateError.dateIsAfterMax]: {\n                                            info: 'dato er for sen',\n                                            example:\n                                                'Startdatoen for når du startet virksomhetem må være før dagens dato. Skriv inn eller velg startdato fra datovelgeren.',\n                                        },\n                                        [ValidateDateRangeError.fromDateIsAfterToDate]: {\n                                            info: 'fra-dato er etter til-dato',\n                                            example:\n                                                'Startdatoen for når du startet virksomheten må være før sluttdatoen, eller på samme dag som sluttdatoen. Skriv inn eller velg dato fra datovelgeren.',\n                                        },\n                                    }}\n                                />\n                                <Box margin=\"xl\">\n                                    <ValidationErrorList\n                                        title=\"Feilmeldinger - Sluttdato\"\n                                        errors={{\n                                            [ValidateDateError.dateHasNoValue]: {\n                                                info: 'ingen verdi',\n                                                example:\n                                                    'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n                                            },\n                                            [ValidateDateError.dateHasInvalidFormat]: {\n                                                info: 'ugyldig verdi',\n                                                example:\n                                                    'Du må oppgi hvilken dato du avsluttet virksomheten. Skriv inn eller velg dato fra datovelgeren.',\n                                            },\n                                            [ValidateDateError.dateIsBeforeMin]: {\n                                                info: 'dato er for tidlig',\n                                                example: `Sluttdatoen for når du avsluttet virksomheten kan ikke være før ${prettifyDate(\n                                                    new Date(2000, 0, 1)\n                                                )}. Skriv inn eller velg sluttdato fra datovelgeren.`,\n                                            },\n                                            [ValidateDateError.dateIsAfterMax]: {\n                                                info: 'dato er for sen',\n                                                example:\n                                                    'Sluttdatoen for når du avsluttet virksomhetem må være før dagens dato. Skriv inn eller velg sluttdato fra datovelgeren.',\n                                            },\n                                            [ValidateDateRangeError.toDateIsBeforeFromDate]: {\n                                                info: 'fra-dato er etter til-dato',\n                                                example:\n                                                    'Sluttdatoen for når du avsluttet virksomheten kan ikke være før startdatoen. Skriv inn eller velg sluttdato fra datovelgeren.',\n                                            },\n                                        }}\n                                    />\n                                </Box>\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Norsk fødselsnummer/D-nummer\"\n                                code={`\nexport enum ValidateFødselsnummerError {\n    fødselsnummerHasNoValue = 'fødselsnummerHasNoValue',\n    fødselsnummerIsNot11Chars = 'fødselsnummerIsNot11Chars',\n    fødselsnummerIsInvalid = 'fødselsnummerIsInvalid',\n    fødselsnummerIsNotAllowed = 'fødselsnummerIsNotAllowed',\n}\n\ntype FødselsnummerValidationResult =\n    | ValidateFødselsnummerError.fødselsnummerHasNoValue\n    | ValidateFødselsnummerError.fødselsnummerIsNotAllowed\n    | ValidateFødselsnummerError.fødselsnummerIsNot11Chars\n    | ValidateFødselsnummerError.fødselsnummerIsInvalid\n    | undefined;\n\ninterface Options {\n    required?: boolean;\n    /** Andre fødselsnumre som ikke er gyldig - f.eks søkers fødselsnummer */\n    disallowedValues?: string[];\n}\n\nconst error = getFødselsnummerValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.Input\n                                        name={FormFields.fødselsnummer}\n                                        bredde=\"M\"\n                                        description={\n                                            'Eksempelfødselsnummeret \"19081988075\" er ditt eget, og er ikke tillatt'\n                                        }\n                                        label=\"Hva er barnets fødselsnummer / D-nummer?\"\n                                        validate={getFødselsnummerValidator({\n                                            required: true,\n                                            disallowedValues: ['19081988075'],\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateFødselsnummerError.fødselsnummerHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example: 'Skriv inn barnets fødselsnummer',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsNot11Chars]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Du har oppgitt et ugyldig fødselsnummer. Et gyldig fødselsnummer består av 11 siffer.',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsInvalid]: {\n                                            info: 'ikke 11 tegn',\n                                            example:\n                                                'Du har oppgitt et ugyldig fødselsnummer som ikke består av 11 siffer. Et gyldig fødselsnummer består av 11 siffer.',\n                                        },\n                                        [ValidateFødselsnummerError.fødselsnummerIsNotAllowed]: {\n                                            info: 'ikke tillatt fødselsnummer',\n                                            example:\n                                                'Du har oppgitt ditt eget fødselsnummer som barnets fødselsnummer. Skriv inn barnets fødselsnummer.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Organisasjonsnummer\"\n                                code={`\nexport enum ValidateOrgNumberError {\n    orgNumberHasNoValue = 'orgNumberHasNoValue',\n    orgNumberHasInvalidFormat = 'orgNumberHasInvalidFormat',\n}\n\ntype OrgNumberValidationResult =\n    | undefined\n    | ValidateOrgNumberError.orgNumberHasNoValue\n    | ValidateOrgNumberError.orgNumberHasInvalidFormat;\n\ninterface Options {\n    required?: boolean;\n}\n\nconst error = getOrgNumberValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.YesOrNoQuestion\n                                        name={FormFields.orgnummer}\n                                        legend=\"Hva er NAVs organisasjonsnummer\"\n                                        validate={getOrgNumberValidator({ required: true })}></Form.YesOrNoQuestion>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateOrgNumberError.orgNumberHasNoValue]: {\n                                            info: 'ingen verdi',\n                                            example:\n                                                'Skriv inn organisasjonsnummeret. Et gyldig organsisasjonsnummer inneholder 9 siffer',\n                                        },\n                                        [ValidateOrgNumberError.orgNumberHasInvalidFormat]: {\n                                            info: 'ugyldig orgnummer',\n                                            example:\n                                                'Du har oppgitt et ugyldig organisasjonsnummer. Oppgi et gyldig organsisasjonsnummer som inneholder 9 siffer.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Flervalgsliste\"\n                                code={`\nexport enum ValidateListError {\n    listIsEmpty = 'listIsEmpty',\n    listHasTooFewItems = 'listHasTooFewItems',\n    listHasTooManyItems = 'listHastooManyItems',\n}\n\ntype ListValidationResult = undefined | ValidateListError;\n\ninterface Options {\n    required?: boolean;\n    minItems?: number;\n    maxItems?: number;\n}\n\nconst error = getListValidator(options)(value);\n`}>\n                                <Panel>\n                                    <Form.CheckboxPanelGroup\n                                        name={FormFields.liste}\n                                        legend=\"Velg dine 2 eller 3 favorittfrukter\"\n                                        checkboxes={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getListValidator({\n                                            required: true,\n                                            minItems: 2,\n                                            maxItems: 3,\n                                        })}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateListError.listIsEmpty]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Velg dine 2 eller 3 favorittfrukter. Huk av i listen.',\n                                        },\n                                        [ValidateListError.listHasTooFewItems]: {\n                                            info: 'for få valgt',\n                                            example: 'Du har valgt for få frukter. Du må velge minst 2 frukter.',\n                                        },\n                                        [ValidateListError.listHasTooManyItems]: {\n                                            info: 'for mange valgt',\n                                            example:\n                                                'Du har valgt for mange frukter. Du kan ikke velge flere enn 3 frukter.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Enkeltvalg - radioknapper\"\n                                code={`\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst error = getRequiredFieldValidator()(value);\n`}>\n                                <Panel>\n                                    <Form.RadioPanelGroup\n                                        name={FormFields.radio}\n                                        legend=\"Velg din éne favorittfrukt\"\n                                        radios={[\n                                            {\n                                                label: 'Eple',\n                                                value: 'eple',\n                                            },\n                                            {\n                                                label: 'Banan',\n                                                value: 'Banan',\n                                            },\n                                            {\n                                                label: 'Pære',\n                                                value: 'Pære',\n                                            },\n                                            {\n                                                label: 'Jordbær (ja, det er en såkalt \"falsk frukt\")',\n                                                value: 'Jordbær',\n                                            },\n                                        ]}\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ingen element valgt',\n                                            example: 'Du må velge din éne favorittfrukt. Huk av i listen.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Enkeltvalg i liste\"\n                                code={`\nexport enum ValidateRequiredFieldError {\n    'noValue' = 'noValue',\n}\n\ntype RequiredFieldValidationResult = ValidateRequiredFieldError.noValue | undefined;\n\nconst error = getRequiredFieldValidator()(value);\n`}>\n                                <p>Samme valideringslogikk som for en radioliste</p>\n                                <Panel>\n                                    <Form.CountrySelect\n                                        name={FormFields.select}\n                                        label=\"Hvilket land er virksomheten registrert i?\"\n                                        validate={getRequiredFieldValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateRequiredFieldError.noValue]: {\n                                            info: 'ikke valgt',\n                                            example:\n                                                'Du må velge hvilket land virksomheten din er registrert i. Velg land fra listen.',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                            <ValideringPanel\n                                title=\"Avkrysningsvalg\"\n                                code={`\nexport enum ValidateCheckedError {\n    'notChecked' = 'notChecked',\n}\n\ntype CheckedValidationResult = ValidateCheckedError | undefined;\n\nconst error = getCheckedValidator()(value);\n                            `}>\n                                <Panel>\n                                    <Form.Checkbox\n                                        name={FormFields.checked}\n                                        label=\"Kryss av for at du bare må krysse av denne checkboxen\"\n                                        validate={getCheckedValidator()}\n                                    />\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateCheckedError.notChecked]: {\n                                            info: 'ikke valgt',\n                                            example: 'Du må krysse av for at du bare må gjøre det',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n\n                            <ValideringPanel\n                                title=\"TimeInput\"\n                                code={`\nexport enum ValidateTimeError {\n    timeHasNoValue = 'timeHasNoValue',\n    hoursAreInvalid = 'hoursAreInvalid',\n    hoursAreNegative = 'hoursAreNegative',\n    minutesAreInvalid = 'minutesAreInvalid',\n    minutesAreNegative = 'minutesAreNegative',\n    tooManyHours = 'tooManyHours',\n    tooManyMinutes = 'tooManyMinutes',\n    durationIsTooLong = 'durationIsTooLong',\n    durationIsTooShort = 'durationIsTooShort',\n}\n\ntype TimeValidationResult =\n    | undefined\n    | ValidateTimeError.timeHasNoValue\n    | ValidateTimeError.hoursAreInvalid\n    | ValidateTimeError.hoursAreNegative\n    | ValidateTimeError.minutesAreInvalid\n    | ValidateTimeError.minutesAreNegative\n    | ValidateTimeError.durationIsTooLong\n    | ValidateTimeError.durationIsTooShort\n    | ValidateTimeError.tooManyHours\n    | ValidateTimeError.tooManyMinutes;\n\ntype TimeRange = {\n    hours: number;\n    minutes: number;\n};\n\ninterface Options {\n    required?: boolean;\n    min?: TimeRange;\n    max?: TimeRange;\n}\n\nconst error = getTimeValidator()(value);\n                    `}>\n                                <Panel>\n                                    <Form.TimeInput\n                                        name={FormFields.time}\n                                        label=\"Hvor lenge var barnet i tilsyn 12.10.2020\"\n                                        validate={(time) => {\n                                            const error = getTimeValidator({\n                                                required: true,\n                                                min: { hours: 0, minutes: 1 },\n                                                max: { hours: 7, minutes: 30 },\n                                            })(time);\n                                            return error\n                                                ? {\n                                                      key: error,\n                                                      values: { dag: 'Torsdag 12.10.2000' },\n                                                      keepKeyUnaltered: true,\n                                                  }\n                                                : undefined;\n                                        }}></Form.TimeInput>\n                                </Panel>\n                                <ValidationErrorList\n                                    title=\"Feilmeldinger\"\n                                    errors={{\n                                        [ValidateTimeError.timeHasNoValue]: {\n                                            info: 'spørsmål er ikke besvart',\n                                            example: 'Du må fylle ut timer og minutter',\n                                        },\n                                        [ValidateTimeError.hoursAreInvalid]: {\n                                            info: 'ugyldig verdi i feltet for antall timer',\n                                            example: 'Antall timer er ikke et gyldig tall',\n                                        },\n                                        [ValidateTimeError.hoursAreNegative]: {\n                                            info: 'antall timer har negativ verdi',\n                                            example: 'Antall timer kan ikke være mindre enn 0',\n                                        },\n                                        [ValidateTimeError.minutesAreInvalid]: {\n                                            info: 'ugyldig verdi i feltet for antall minutter',\n                                            example: 'Antall minutter er ikke et gyldig tall',\n                                        },\n                                        [ValidateTimeError.minutesAreNegative]: {\n                                            info: 'antall minutter har negativ verdi',\n                                            example: 'Antall minutter kan ikke være mindre enn 0',\n                                        },\n                                        [ValidateTimeError.tooManyHours]: {\n                                            info: 'antall timer over 23',\n                                            example: 'Antall timer kan ikke overstige 23',\n                                        },\n                                        [ValidateTimeError.tooManyMinutes]: {\n                                            info: 'antall minutter over 59',\n                                            example: 'Antall minutter kan ikke overstige 59',\n                                        },\n                                        [ValidateTimeError.durationIsTooLong]: {\n                                            info: 'for lang tid',\n                                            example: 'Angitt varighet kan ikke være mer enn {maks}',\n                                        },\n                                        [ValidateTimeError.durationIsTooShort]: {\n                                            info: 'for kort tid',\n                                            example: 'Angitt varighet må være minst {min}',\n                                        },\n                                    }}\n                                />\n                            </ValideringPanel>\n                        </Form.Form>\n                    );\n                }}\n            />\n        </>\n    );\n};\n\nexport default ValideringExample;\n","import React from 'react';\nimport PageIntro from './components/page-intro/PageIntro';\n\nconst Intro = () => (\n    <>\n        <PageIntro title=\"@navikt/sif-common-formik\">\n            <h2>Typed formik wrapper for nav-frontend-skjema + validering</h2>\n            <p>\n                Sett av skjema-komponenter laget for team brukerdialog i sykdom-i-familien. Komponentene gjør det\n                enklere og raskere å sette opp skjemaløsninger hvor en bruker typescript, formik og nav-frontend-skjema,\n                og som sørger for at oppførsel og utéendet blir likt på tvers av brukerdialogene. For flere detaljer, se\n                kode.\n            </p>\n\n            <h3>Validering</h3>\n            <p>\n                Det er laget et sett med valideringsfunksjoner som en kan bruke sammen med skjemakomponentene. Disse\n                finner du på{' '}\n                <a href=\"#validering\" className=\"lenke\">\n                    denne siden\n                </a>\n                .{' '}\n            </p>\n        </PageIntro>\n    </>\n);\n\nexport default Intro;\n","import React from 'react';\nimport FormikExample from '../examples/formik-example/FormikExample';\nimport ValideringExample from '../examples/validering-example/ValideringExample';\nimport Intro from '../Intro';\n\nexport interface RouteConfig {\n    path: string;\n    title: string;\n    renderContent: () => React.ReactNode;\n}\n\nexport const routes: RouteConfig[] = [\n    {\n        path: 'frontpage',\n        title: 'Forside',\n        renderContent: () => <Intro />,\n    },\n    {\n        path: 'formik-example',\n        title: 'TypedFormExample',\n        renderContent: () => <FormikExample />,\n    },\n    {\n        path: 'validering',\n        title: 'Validering',\n        renderContent: () => <ValideringExample />,\n    },\n];\n\nexport const getRouteConfig = (pathname: string): RouteConfig | undefined => {\n    return routes.find((f) => isActiveRoute(f.path, pathname));\n};\n\nexport const isActiveRoute = (path: string, pathname: string): boolean => {\n    return pathname.indexOf(path) >= 0;\n};\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport 'nav-frontend-lenker-style';\nimport { isActiveRoute, routes } from '../../config/routeConfig';\nimport bemUtils from '../../utils/bemUtils';\n\nconst lenkeBem = bemUtils('lenke');\n\nconst LeftMenu = () => {\n    const {\n        location: { pathname },\n    } = useHistory();\n    return (\n        <div className=\"leftMenu\">\n            {routes.map((route) => (\n                <Link\n                    key={route.path}\n                    to={route.path}\n                    className={lenkeBem.classNames(\n                        lenkeBem.block,\n                        lenkeBem.modifierConditional('active', isActiveRoute(route.path, pathname))\n                    )}>\n                    {route.title}\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default LeftMenu;\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport LeftMenu from './components/left-menu/LeftMenu';\nimport { getRouteConfig } from './config/routeConfig';\nimport Intro from './Intro';\n\ntype Props = RouteComponentProps;\n\nconst DevContent: React.FunctionComponent<Props> = ({ history }) => {\n    const {\n        location: { pathname },\n    } = history;\n    const routeConfig = getRouteConfig(pathname);\n    return (\n        <>\n            <nav className=\"asideContent\">\n                <LeftMenu />\n            </nav>\n            <article style={{ maxWidth: '1000px' }} className=\"mainContent\">\n                {routeConfig ? routeConfig.renderContent() : <Intro />}\n            </article>\n        </>\n    );\n};\n\nexport default withRouter(DevContent);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport NAVLogo from './components/svg/NAVLogo';\nimport DevContent from './DevContent';\nimport './styles/dev.less';\n\nconst DevPage = () => {\n    return (\n        <main className=\"devPage\">\n            <header className=\"header\">\n                <span className=\"navLogo\">\n                    <NAVLogo />\n                </span>\n                <span className=\"header__title\">\n                    <Systemtittel tag=\"h1\">sif-common-formik</Systemtittel>\n                </span>\n            </header>\n            <div className=\"contentWrapper\">\n                <HashRouter>\n                    <DevContent />\n                </HashRouter>\n            </div>\n        </main>\n    );\n};\n\nexport default DevPage;\n","import React from 'react';\nimport '@formatjs/intl-pluralrules/locale-data/en';\nimport '@formatjs/intl-pluralrules/locale-data/nb';\nimport '@formatjs/intl-pluralrules/locale-data/nn';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport 'nav-frontend-skjema-style';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport AppIntlProvider from './dev/components/app-intl-provider/AppIntlProvider';\nimport DevPage from './dev/DevPage';\nimport './dev/styles/globalStyles.less';\n\nconst App: React.FC = () => {\n    return (\n        <Normaltekst tag=\"div\">\n            <AppIntlProvider locale={'nb'}>\n                <DevPage />\n            </AppIntlProvider>\n        </Normaltekst>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport App from './App';\n\nModal.setAppElement('#root');\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}